
Sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c64  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08007da8  08007da8  00017da8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008138  08008138  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008138  08008138  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008138  08008138  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008138  08008138  00018138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800813c  0800813c  0001813c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  200001e0  08008320  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002bc  08008320  000202bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f61  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000173e  00000000  00000000  0002916a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002a8a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000868  00000000  00000000  0002b1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001574e  00000000  00000000  0002ba20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000763b  00000000  00000000  0004116e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000899f4  00000000  00000000  000487a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d219d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032bc  00000000  00000000  000d2218  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08007d8c 	.word	0x08007d8c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08007d8c 	.word	0x08007d8c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ce:	f1a4 0401 	sub.w	r4, r4, #1
 80002d2:	d1e9      	bne.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	d1ed      	bne.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105e:	2003      	movs	r0, #3
 8001060:	f000 f954 	bl	800130c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001064:	2000      	movs	r0, #0
 8001066:	f000 f80d 	bl	8001084 <HAL_InitTick>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	e001      	b.n	800107a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001076:	f002 ffa7 	bl	8003fc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800107a:	79fb      	ldrb	r3, [r7, #7]
}
 800107c:	4618      	mov	r0, r3
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_InitTick+0x68>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d022      	beq.n	80010de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_InitTick+0x6c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_InitTick+0x68>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f962 	bl	8001376 <HAL_SYSTICK_Config>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10f      	bne.n	80010d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	d809      	bhi.n	80010d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010be:	2200      	movs	r2, #0
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295
 80010c6:	f000 f92c 	bl	8001322 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_InitTick+0x70>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e004      	b.n	80010e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e001      	b.n	80010e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000004 	.word	0x20000004
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000000 	.word	0x20000000

080010f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x1c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x20>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	4a03      	ldr	r2, [pc, #12]	; (8001114 <HAL_IncTick+0x1c>)
 8001108:	6013      	str	r3, [r2, #0]
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000208 	.word	0x20000208
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b02      	ldr	r3, [pc, #8]	; (800112c <HAL_GetTick+0x10>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000208 	.word	0x20000208

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff fff0 	bl	800111c <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d004      	beq.n	8001154 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_Delay+0x40>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4413      	add	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001154:	bf00      	nop
 8001156:	f7ff ffe1 	bl	800111c <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	429a      	cmp	r2, r3
 8001164:	d8f7      	bhi.n	8001156 <HAL_Delay+0x26>
  {
  }
}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000004 	.word	0x20000004

08001174 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001184:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001190:	4013      	ands	r3, r2
 8001192:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800119c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a6:	4a04      	ldr	r2, [pc, #16]	; (80011b8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	60d3      	str	r3, [r2, #12]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <__NVIC_GetPriorityGrouping+0x18>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0307 	and.w	r3, r3, #7
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	db0b      	blt.n	8001202 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f003 021f 	and.w	r2, r3, #31
 80011f0:	4906      	ldr	r1, [pc, #24]	; (800120c <__NVIC_EnableIRQ+0x34>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	2001      	movs	r0, #1
 80011fa:	fa00 f202 	lsl.w	r2, r0, r2
 80011fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001202:	bf00      	nop
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3b01      	subs	r3, #1
 80012d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d8:	d301      	bcc.n	80012de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012da:	2301      	movs	r3, #1
 80012dc:	e00f      	b.n	80012fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <SysTick_Config+0x40>)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e6:	210f      	movs	r1, #15
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f7ff ff90 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <SysTick_Config+0x40>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <SysTick_Config+0x40>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	e000e010 	.word	0xe000e010

0800130c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff ff2d 	bl	8001174 <__NVIC_SetPriorityGrouping>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b086      	sub	sp, #24
 8001326:	af00      	add	r7, sp, #0
 8001328:	4603      	mov	r3, r0
 800132a:	60b9      	str	r1, [r7, #8]
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001334:	f7ff ff42 	bl	80011bc <__NVIC_GetPriorityGrouping>
 8001338:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	68b9      	ldr	r1, [r7, #8]
 800133e:	6978      	ldr	r0, [r7, #20]
 8001340:	f7ff ff90 	bl	8001264 <NVIC_EncodePriority>
 8001344:	4602      	mov	r2, r0
 8001346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134a:	4611      	mov	r1, r2
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff5f 	bl	8001210 <__NVIC_SetPriority>
}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff35 	bl	80011d8 <__NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffa2 	bl	80012c8 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001390:	b480      	push	{r7}
 8001392:	b087      	sub	sp, #28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013a6:	e160      	b.n	800166a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2101      	movs	r1, #1
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	fa01 f303 	lsl.w	r3, r1, r3
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	f000 8152 	beq.w	8001664 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d003      	beq.n	80013d0 <HAL_GPIO_Init+0x40>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b12      	cmp	r3, #18
 80013ce:	d123      	bne.n	8001418 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	08da      	lsrs	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3208      	adds	r2, #8
 8001412:	6939      	ldr	r1, [r7, #16]
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d00b      	beq.n	800146c <HAL_GPIO_Init+0xdc>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b02      	cmp	r3, #2
 800145a:	d007      	beq.n	800146c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001460:	2b11      	cmp	r3, #17
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b12      	cmp	r3, #18
 800146a:	d130      	bne.n	80014ce <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	2203      	movs	r2, #3
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	43db      	mvns	r3, r3
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4313      	orrs	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80014a2:	2201      	movs	r2, #1
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	091b      	lsrs	r3, r3, #4
 80014b8:	f003 0201 	and.w	r2, r3, #1
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	2203      	movs	r2, #3
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	43db      	mvns	r3, r3
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80ac 	beq.w	8001664 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800150c:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_GPIO_Init+0x2f4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a5c      	ldr	r2, [pc, #368]	; (8001684 <HAL_GPIO_Init+0x2f4>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6213      	str	r3, [r2, #32]
 8001518:	4b5a      	ldr	r3, [pc, #360]	; (8001684 <HAL_GPIO_Init+0x2f4>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8001524:	4a58      	ldr	r2, [pc, #352]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a50      	ldr	r2, [pc, #320]	; (800168c <HAL_GPIO_Init+0x2fc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d025      	beq.n	800159c <HAL_GPIO_Init+0x20c>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4f      	ldr	r2, [pc, #316]	; (8001690 <HAL_GPIO_Init+0x300>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d01f      	beq.n	8001598 <HAL_GPIO_Init+0x208>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a4e      	ldr	r2, [pc, #312]	; (8001694 <HAL_GPIO_Init+0x304>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d019      	beq.n	8001594 <HAL_GPIO_Init+0x204>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a4d      	ldr	r2, [pc, #308]	; (8001698 <HAL_GPIO_Init+0x308>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d013      	beq.n	8001590 <HAL_GPIO_Init+0x200>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_GPIO_Init+0x30c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d00d      	beq.n	800158c <HAL_GPIO_Init+0x1fc>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a4b      	ldr	r2, [pc, #300]	; (80016a0 <HAL_GPIO_Init+0x310>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d007      	beq.n	8001588 <HAL_GPIO_Init+0x1f8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <HAL_GPIO_Init+0x314>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d101      	bne.n	8001584 <HAL_GPIO_Init+0x1f4>
 8001580:	2306      	movs	r3, #6
 8001582:	e00c      	b.n	800159e <HAL_GPIO_Init+0x20e>
 8001584:	2307      	movs	r3, #7
 8001586:	e00a      	b.n	800159e <HAL_GPIO_Init+0x20e>
 8001588:	2305      	movs	r3, #5
 800158a:	e008      	b.n	800159e <HAL_GPIO_Init+0x20e>
 800158c:	2304      	movs	r3, #4
 800158e:	e006      	b.n	800159e <HAL_GPIO_Init+0x20e>
 8001590:	2303      	movs	r3, #3
 8001592:	e004      	b.n	800159e <HAL_GPIO_Init+0x20e>
 8001594:	2302      	movs	r3, #2
 8001596:	e002      	b.n	800159e <HAL_GPIO_Init+0x20e>
 8001598:	2301      	movs	r3, #1
 800159a:	e000      	b.n	800159e <HAL_GPIO_Init+0x20e>
 800159c:	2300      	movs	r3, #0
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	f002 0203 	and.w	r2, r2, #3
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	4093      	lsls	r3, r2
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4313      	orrs	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015ae:	4936      	ldr	r1, [pc, #216]	; (8001688 <HAL_GPIO_Init+0x2f8>)
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	089b      	lsrs	r3, r3, #2
 80015b4:	3302      	adds	r3, #2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015bc:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <HAL_GPIO_Init+0x318>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	43db      	mvns	r3, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent); 
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015e0:	4a31      	ldr	r2, [pc, #196]	; (80016a8 <HAL_GPIO_Init+0x318>)
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <HAL_GPIO_Init+0x318>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent); 
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800160a:	4a27      	ldr	r2, [pc, #156]	; (80016a8 <HAL_GPIO_Init+0x318>)
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001610:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <HAL_GPIO_Init+0x318>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	43db      	mvns	r3, r3
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d003      	beq.n	8001634 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent); 
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001634:	4a1c      	ldr	r2, [pc, #112]	; (80016a8 <HAL_GPIO_Init+0x318>)
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <HAL_GPIO_Init+0x318>)
 800163c:	68db      	ldr	r3, [r3, #12]
 800163e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	43db      	mvns	r3, r3
 8001644:	693a      	ldr	r2, [r7, #16]
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent); 
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800165e:	4a12      	ldr	r2, [pc, #72]	; (80016a8 <HAL_GPIO_Init+0x318>)
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	3301      	adds	r3, #1
 8001668:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
 8001674:	2b00      	cmp	r3, #0
 8001676:	f47f ae97 	bne.w	80013a8 <HAL_GPIO_Init+0x18>
  } 
}
 800167a:	bf00      	nop
 800167c:	371c      	adds	r7, #28
 800167e:	46bd      	mov	sp, r7
 8001680:	bc80      	pop	{r7}
 8001682:	4770      	bx	lr
 8001684:	40023800 	.word	0x40023800
 8001688:	40010000 	.word	0x40010000
 800168c:	40020000 	.word	0x40020000
 8001690:	40020400 	.word	0x40020400
 8001694:	40020800 	.word	0x40020800
 8001698:	40020c00 	.word	0x40020c00
 800169c:	40021000 	.word	0x40021000
 80016a0:	40021400 	.word	0x40021400
 80016a4:	40021800 	.word	0x40021800
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691a      	ldr	r2, [r3, #16]
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e001      	b.n	80016ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
	...

080016dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <HAL_GPIO_EXTI_IRQHandler+0x24>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f806 	bl	800170c <HAL_GPIO_EXTI_Callback>
  }
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40010400 	.word	0x40010400

0800170c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d101      	bne.n	8001732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e10f      	b.n	8001952 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001738:	b2db      	uxtb	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d106      	bne.n	800174c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f002 fc6c 	bl	8004024 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2224      	movs	r2, #36	; 0x24
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f022 0201 	bic.w	r2, r2, #1
 8001762:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001764:	f001 fd18 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8001768:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4a7b      	ldr	r2, [pc, #492]	; (800195c <HAL_I2C_Init+0x23c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d807      	bhi.n	8001784 <HAL_I2C_Init+0x64>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4a7a      	ldr	r2, [pc, #488]	; (8001960 <HAL_I2C_Init+0x240>)
 8001778:	4293      	cmp	r3, r2
 800177a:	bf94      	ite	ls
 800177c:	2301      	movls	r3, #1
 800177e:	2300      	movhi	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	e006      	b.n	8001792 <HAL_I2C_Init+0x72>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4a77      	ldr	r2, [pc, #476]	; (8001964 <HAL_I2C_Init+0x244>)
 8001788:	4293      	cmp	r3, r2
 800178a:	bf94      	ite	ls
 800178c:	2301      	movls	r3, #1
 800178e:	2300      	movhi	r3, #0
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e0db      	b.n	8001952 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4a72      	ldr	r2, [pc, #456]	; (8001968 <HAL_I2C_Init+0x248>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	0c9b      	lsrs	r3, r3, #18
 80017a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	4a64      	ldr	r2, [pc, #400]	; (800195c <HAL_I2C_Init+0x23c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d802      	bhi.n	80017d4 <HAL_I2C_Init+0xb4>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	3301      	adds	r3, #1
 80017d2:	e009      	b.n	80017e8 <HAL_I2C_Init+0xc8>
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017da:	fb02 f303 	mul.w	r3, r2, r3
 80017de:	4a63      	ldr	r2, [pc, #396]	; (800196c <HAL_I2C_Init+0x24c>)
 80017e0:	fba2 2303 	umull	r2, r3, r2, r3
 80017e4:	099b      	lsrs	r3, r3, #6
 80017e6:	3301      	adds	r3, #1
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	6812      	ldr	r2, [r2, #0]
 80017ec:	430b      	orrs	r3, r1
 80017ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	4956      	ldr	r1, [pc, #344]	; (800195c <HAL_I2C_Init+0x23c>)
 8001804:	428b      	cmp	r3, r1
 8001806:	d80d      	bhi.n	8001824 <HAL_I2C_Init+0x104>
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1e59      	subs	r1, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	fbb1 f3f3 	udiv	r3, r1, r3
 8001816:	3301      	adds	r3, #1
 8001818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800181c:	2b04      	cmp	r3, #4
 800181e:	bf38      	it	cc
 8001820:	2304      	movcc	r3, #4
 8001822:	e04f      	b.n	80018c4 <HAL_I2C_Init+0x1a4>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d111      	bne.n	8001850 <HAL_I2C_Init+0x130>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	1e58      	subs	r0, r3, #1
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6859      	ldr	r1, [r3, #4]
 8001834:	460b      	mov	r3, r1
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	440b      	add	r3, r1
 800183a:	fbb0 f3f3 	udiv	r3, r0, r3
 800183e:	3301      	adds	r3, #1
 8001840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf0c      	ite	eq
 8001848:	2301      	moveq	r3, #1
 800184a:	2300      	movne	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	e012      	b.n	8001876 <HAL_I2C_Init+0x156>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1e58      	subs	r0, r3, #1
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6859      	ldr	r1, [r3, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	440b      	add	r3, r1
 800185e:	0099      	lsls	r1, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	fbb0 f3f3 	udiv	r3, r0, r3
 8001866:	3301      	adds	r3, #1
 8001868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800186c:	2b00      	cmp	r3, #0
 800186e:	bf0c      	ite	eq
 8001870:	2301      	moveq	r3, #1
 8001872:	2300      	movne	r3, #0
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Init+0x15e>
 800187a:	2301      	movs	r3, #1
 800187c:	e022      	b.n	80018c4 <HAL_I2C_Init+0x1a4>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10e      	bne.n	80018a4 <HAL_I2C_Init+0x184>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	1e58      	subs	r0, r3, #1
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6859      	ldr	r1, [r3, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	440b      	add	r3, r1
 8001894:	fbb0 f3f3 	udiv	r3, r0, r3
 8001898:	3301      	adds	r3, #1
 800189a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018a2:	e00f      	b.n	80018c4 <HAL_I2C_Init+0x1a4>
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1e58      	subs	r0, r3, #1
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6859      	ldr	r1, [r3, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	0099      	lsls	r1, r3, #2
 80018b4:	440b      	add	r3, r1
 80018b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	6809      	ldr	r1, [r1, #0]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69da      	ldr	r2, [r3, #28]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	6911      	ldr	r1, [r2, #16]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	68d2      	ldr	r2, [r2, #12]
 80018fe:	4311      	orrs	r1, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	430b      	orrs	r3, r1
 8001906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	695a      	ldr	r2, [r3, #20]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2220      	movs	r2, #32
 800193e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	000186a0 	.word	0x000186a0
 8001960:	001e847f 	.word	0x001e847f
 8001964:	003d08ff 	.word	0x003d08ff
 8001968:	431bde83 	.word	0x431bde83
 800196c:	10624dd3 	.word	0x10624dd3

08001970 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b088      	sub	sp, #32
 8001974:	af02      	add	r7, sp, #8
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	607a      	str	r2, [r7, #4]
 800197a:	461a      	mov	r2, r3
 800197c:	460b      	mov	r3, r1
 800197e:	817b      	strh	r3, [r7, #10]
 8001980:	4613      	mov	r3, r2
 8001982:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff fbca 	bl	800111c <HAL_GetTick>
 8001988:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b20      	cmp	r3, #32
 8001994:	f040 80e0 	bne.w	8001b58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2319      	movs	r3, #25
 800199e:	2201      	movs	r2, #1
 80019a0:	4970      	ldr	r1, [pc, #448]	; (8001b64 <HAL_I2C_Master_Transmit+0x1f4>)
 80019a2:	68f8      	ldr	r0, [r7, #12]
 80019a4:	f000 fd56 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019ae:	2302      	movs	r3, #2
 80019b0:	e0d3      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_I2C_Master_Transmit+0x50>
 80019bc:	2302      	movs	r3, #2
 80019be:	e0cc      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d007      	beq.n	80019e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f042 0201 	orr.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2221      	movs	r2, #33	; 0x21
 80019fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2210      	movs	r2, #16
 8001a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	893a      	ldrh	r2, [r7, #8]
 8001a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4a50      	ldr	r2, [pc, #320]	; (8001b68 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a28:	8979      	ldrh	r1, [r7, #10]
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	6a3a      	ldr	r2, [r7, #32]
 8001a2e:	68f8      	ldr	r0, [r7, #12]
 8001a30:	f000 fbe4 	bl	80021fc <I2C_MasterRequestWrite>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e08d      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3e:	2300      	movs	r3, #0
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	695b      	ldr	r3, [r3, #20]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a54:	e066      	b.n	8001b24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	6a39      	ldr	r1, [r7, #32]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fdd0 	bl	8002600 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00d      	beq.n	8001a82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d107      	bne.n	8001a7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06b      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11b      	bne.n	8001af8 <HAL_I2C_Master_Transmit+0x188>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d017      	beq.n	8001af8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	3b01      	subs	r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	6a39      	ldr	r1, [r7, #32]
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fdc0 	bl	8002682 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00d      	beq.n	8001b24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d107      	bne.n	8001b20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e01a      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d194      	bne.n	8001a56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e000      	b.n	8001b5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
  }
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	00100002 	.word	0x00100002
 8001b68:	ffff0000 	.word	0xffff0000

08001b6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08c      	sub	sp, #48	; 0x30
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	607a      	str	r2, [r7, #4]
 8001b76:	461a      	mov	r2, r3
 8001b78:	460b      	mov	r3, r1
 8001b7a:	817b      	strh	r3, [r7, #10]
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b80:	f7ff facc 	bl	800111c <HAL_GetTick>
 8001b84:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b20      	cmp	r3, #32
 8001b90:	f040 820b 	bne.w	8001faa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2319      	movs	r3, #25
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	497c      	ldr	r1, [pc, #496]	; (8001d90 <HAL_I2C_Master_Receive+0x224>)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fc58 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001baa:	2302      	movs	r3, #2
 8001bac:	e1fe      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_I2C_Master_Receive+0x50>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e1f7      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d007      	beq.n	8001be2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f042 0201 	orr.w	r2, r2, #1
 8001be0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bf0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2222      	movs	r2, #34	; 0x22
 8001bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2200      	movs	r2, #0
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	893a      	ldrh	r2, [r7, #8]
 8001c12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4a5c      	ldr	r2, [pc, #368]	; (8001d94 <HAL_I2C_Master_Receive+0x228>)
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c24:	8979      	ldrh	r1, [r7, #10]
 8001c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f000 fb5c 	bl	80022e8 <I2C_MasterRequestRead>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1b8      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d113      	bne.n	8001c6a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	623b      	str	r3, [r7, #32]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	623b      	str	r3, [r7, #32]
 8001c56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e18c      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d11b      	bne.n	8001caa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	e16c      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d11b      	bne.n	8001cea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	695b      	ldr	r3, [r3, #20]
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	e14c      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cf8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	617b      	str	r3, [r7, #20]
 8001d0e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d10:	e138      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	f200 80f1 	bhi.w	8001efe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d123      	bne.n	8001d6c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fceb 	bl	8002704 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e139      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691a      	ldr	r2, [r3, #16]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	b2d2      	uxtb	r2, r2
 8001d44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d6a:	e10b      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d14e      	bne.n	8001e12 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4906      	ldr	r1, [pc, #24]	; (8001d98 <HAL_I2C_Master_Receive+0x22c>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 fb68 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e10e      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
 8001d8e:	bf00      	nop
 8001d90:	00100002 	.word	0x00100002
 8001d94:	ffff0000 	.word	0xffff0000
 8001d98:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001daa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	b2d2      	uxtb	r2, r2
 8001db8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e10:	e0b8      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e18:	2200      	movs	r2, #0
 8001e1a:	4966      	ldr	r1, [pc, #408]	; (8001fb4 <HAL_I2C_Master_Receive+0x448>)
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fb19 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0bf      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691a      	ldr	r2, [r3, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	b2d2      	uxtb	r2, r2
 8001e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	3b01      	subs	r3, #1
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e74:	2200      	movs	r2, #0
 8001e76:	494f      	ldr	r1, [pc, #316]	; (8001fb4 <HAL_I2C_Master_Receive+0x448>)
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f000 faeb 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e091      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691a      	ldr	r2, [r3, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001efc:	e042      	b.n	8001f84 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fbfe 	bl	8002704 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e04c      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b04      	cmp	r3, #4
 8001f50:	d118      	bne.n	8001f84 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	f47f aec2 	bne.w	8001d12 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e000      	b.n	8001fac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
  }
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3728      	adds	r7, #40	; 0x28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	00010004 	.word	0x00010004

08001fb8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff f8a8 	bl	800111c <HAL_GetTick>
 8001fcc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	f040 8105 	bne.w	80021ea <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2319      	movs	r3, #25
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	4982      	ldr	r1, [pc, #520]	; (80021f4 <HAL_I2C_IsDeviceReady+0x23c>)
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fa32 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e0f8      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002000:	2b01      	cmp	r3, #1
 8002002:	d101      	bne.n	8002008 <HAL_I2C_IsDeviceReady+0x50>
 8002004:	2302      	movs	r3, #2
 8002006:	e0f1      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x234>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d007      	beq.n	800202e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f042 0201 	orr.w	r2, r2, #1
 800202c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800203c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2224      	movs	r2, #36	; 0x24
 8002042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4a6a      	ldr	r2, [pc, #424]	; (80021f8 <HAL_I2C_IsDeviceReady+0x240>)
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002060:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2200      	movs	r2, #0
 800206a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 f9f0 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e0b6      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800207e:	897b      	ldrh	r3, [r7, #10]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800208c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800208e:	f7ff f845 	bl	800111c <HAL_GetTick>
 8002092:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b02      	cmp	r3, #2
 80020a0:	bf0c      	ite	eq
 80020a2:	2301      	moveq	r3, #1
 80020a4:	2300      	movne	r3, #0
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80020c2:	e025      	b.n	8002110 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7ff f82a 	bl	800111c <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d302      	bcc.n	80020da <HAL_I2C_IsDeviceReady+0x122>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d103      	bne.n	80020e2 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	22a0      	movs	r2, #160	; 0xa0
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	bf0c      	ite	eq
 80020f0:	2301      	moveq	r3, #1
 80020f2:	2300      	movne	r3, #0
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002106:	bf0c      	ite	eq
 8002108:	2301      	moveq	r3, #1
 800210a:	2300      	movne	r3, #0
 800210c:	b2db      	uxtb	r3, r3
 800210e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2ba0      	cmp	r3, #160	; 0xa0
 800211a:	d005      	beq.n	8002128 <HAL_I2C_IsDeviceReady+0x170>
 800211c:	7dfb      	ldrb	r3, [r7, #23]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_I2C_IsDeviceReady+0x170>
 8002122:	7dbb      	ldrb	r3, [r7, #22]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0cd      	beq.n	80020c4 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b02      	cmp	r3, #2
 800213c:	d129      	bne.n	8002192 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	613b      	str	r3, [r7, #16]
 8002162:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	2319      	movs	r3, #25
 800216a:	2201      	movs	r2, #1
 800216c:	4921      	ldr	r1, [pc, #132]	; (80021f4 <HAL_I2C_IsDeviceReady+0x23c>)
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f970 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e036      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2220      	movs	r2, #32
 8002182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	e02c      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	2319      	movs	r3, #25
 80021b2:	2201      	movs	r2, #1
 80021b4:	490f      	ldr	r1, [pc, #60]	; (80021f4 <HAL_I2C_IsDeviceReady+0x23c>)
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 f94c 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e012      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	3301      	adds	r3, #1
 80021ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	f4ff af3e 	bcc.w	8002052 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80021ea:	2302      	movs	r3, #2
  }
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3720      	adds	r7, #32
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	00100002 	.word	0x00100002
 80021f8:	ffff0000 	.word	0xffff0000

080021fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	460b      	mov	r3, r1
 800220a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b08      	cmp	r3, #8
 8002216:	d006      	beq.n	8002226 <I2C_MasterRequestWrite+0x2a>
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d003      	beq.n	8002226 <I2C_MasterRequestWrite+0x2a>
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002224:	d108      	bne.n	8002238 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	e00b      	b.n	8002250 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223c:	2b12      	cmp	r3, #18
 800223e:	d107      	bne.n	8002250 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800224e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 f8f9 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e035      	b.n	80022d8 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002274:	d108      	bne.n	8002288 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002276:	897b      	ldrh	r3, [r7, #10]
 8002278:	b2db      	uxtb	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002284:	611a      	str	r2, [r3, #16]
 8002286:	e01b      	b.n	80022c0 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002288:	897b      	ldrh	r3, [r7, #10]
 800228a:	11db      	asrs	r3, r3, #7
 800228c:	b2db      	uxtb	r3, r3
 800228e:	f003 0306 	and.w	r3, r3, #6
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f063 030f 	orn	r3, r3, #15
 8002298:	b2da      	uxtb	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	490e      	ldr	r1, [pc, #56]	; (80022e0 <I2C_MasterRequestWrite+0xe4>)
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f92b 	bl	8002502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e010      	b.n	80022d8 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022b6:	897b      	ldrh	r3, [r7, #10]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4907      	ldr	r1, [pc, #28]	; (80022e4 <I2C_MasterRequestWrite+0xe8>)
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 f91b 	bl	8002502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	00010008 	.word	0x00010008
 80022e4:	00010002 	.word	0x00010002

080022e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	603b      	str	r3, [r7, #0]
 80022f4:	460b      	mov	r3, r1
 80022f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800230c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b08      	cmp	r3, #8
 8002312:	d006      	beq.n	8002322 <I2C_MasterRequestRead+0x3a>
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d003      	beq.n	8002322 <I2C_MasterRequestRead+0x3a>
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002320:	d108      	bne.n	8002334 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e00b      	b.n	800234c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	2b11      	cmp	r3, #17
 800233a:	d107      	bne.n	800234c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800234a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f87b 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e06d      	b.n	8002444 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002370:	d108      	bne.n	8002384 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002372:	897b      	ldrh	r3, [r7, #10]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	f043 0301 	orr.w	r3, r3, #1
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	611a      	str	r2, [r3, #16]
 8002382:	e053      	b.n	800242c <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002384:	897b      	ldrh	r3, [r7, #10]
 8002386:	11db      	asrs	r3, r3, #7
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f003 0306 	and.w	r3, r3, #6
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f063 030f 	orn	r3, r3, #15
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	492a      	ldr	r1, [pc, #168]	; (800244c <I2C_MasterRequestRead+0x164>)
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 f8ad 	bl	8002502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e048      	b.n	8002444 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023b2:	897b      	ldrh	r3, [r7, #10]
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	4923      	ldr	r1, [pc, #140]	; (8002450 <I2C_MasterRequestRead+0x168>)
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f89d 	bl	8002502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e038      	b.n	8002444 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	613b      	str	r3, [r7, #16]
 80023e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f825 	bl	8002454 <I2C_WaitOnFlagUntilTimeout>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e017      	b.n	8002444 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002414:	897b      	ldrh	r3, [r7, #10]
 8002416:	11db      	asrs	r3, r3, #7
 8002418:	b2db      	uxtb	r3, r3
 800241a:	f003 0306 	and.w	r3, r3, #6
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f063 030e 	orn	r3, r3, #14
 8002424:	b2da      	uxtb	r2, r3
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	4907      	ldr	r1, [pc, #28]	; (8002450 <I2C_MasterRequestRead+0x168>)
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 f865 	bl	8002502 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	00010008 	.word	0x00010008
 8002450:	00010002 	.word	0x00010002

08002454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	603b      	str	r3, [r7, #0]
 8002460:	4613      	mov	r3, r2
 8002462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002464:	e025      	b.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d021      	beq.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800246e:	f7fe fe55 	bl	800111c <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d302      	bcc.n	8002484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d116      	bne.n	80024b2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2200      	movs	r2, #0
 8002488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	f043 0220 	orr.w	r2, r3, #32
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e023      	b.n	80024fa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	0c1b      	lsrs	r3, r3, #16
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d10d      	bne.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	43da      	mvns	r2, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	4013      	ands	r3, r2
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bf0c      	ite	eq
 80024ce:	2301      	moveq	r3, #1
 80024d0:	2300      	movne	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	461a      	mov	r2, r3
 80024d6:	e00c      	b.n	80024f2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699b      	ldr	r3, [r3, #24]
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	4013      	ands	r3, r2
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf0c      	ite	eq
 80024ea:	2301      	moveq	r3, #1
 80024ec:	2300      	movne	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	79fb      	ldrb	r3, [r7, #7]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d0b6      	beq.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	60f8      	str	r0, [r7, #12]
 800250a:	60b9      	str	r1, [r7, #8]
 800250c:	607a      	str	r2, [r7, #4]
 800250e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002510:	e051      	b.n	80025b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002520:	d123      	bne.n	800256a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002530:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800253a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2220      	movs	r2, #32
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f043 0204 	orr.w	r2, r3, #4
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e046      	b.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002570:	d021      	beq.n	80025b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7fe fdd3 	bl	800111c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d302      	bcc.n	8002588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d116      	bne.n	80025b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2220      	movs	r2, #32
 8002592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f043 0220 	orr.w	r2, r3, #32
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e020      	b.n	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d10c      	bne.n	80025da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4013      	ands	r3, r2
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	bf14      	ite	ne
 80025d2:	2301      	movne	r3, #1
 80025d4:	2300      	moveq	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	e00b      	b.n	80025f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	43da      	mvns	r2, r3
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	4013      	ands	r3, r2
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bf14      	ite	ne
 80025ec:	2301      	movne	r3, #1
 80025ee:	2300      	moveq	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d18d      	bne.n	8002512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800260c:	e02d      	b.n	800266a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f000 f8ce 	bl	80027b0 <I2C_IsAcknowledgeFailed>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e02d      	b.n	800267a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002624:	d021      	beq.n	800266a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002626:	f7fe fd79 	bl	800111c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	429a      	cmp	r2, r3
 8002634:	d302      	bcc.n	800263c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d116      	bne.n	800266a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2220      	movs	r2, #32
 8002646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	f043 0220 	orr.w	r2, r3, #32
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e007      	b.n	800267a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d1ca      	bne.n	800260e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b084      	sub	sp, #16
 8002686:	af00      	add	r7, sp, #0
 8002688:	60f8      	str	r0, [r7, #12]
 800268a:	60b9      	str	r1, [r7, #8]
 800268c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800268e:	e02d      	b.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f000 f88d 	bl	80027b0 <I2C_IsAcknowledgeFailed>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e02d      	b.n	80026fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a6:	d021      	beq.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026a8:	f7fe fd38 	bl	800111c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	68ba      	ldr	r2, [r7, #8]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d302      	bcc.n	80026be <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e007      	b.n	80026fc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d1ca      	bne.n	8002690 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002710:	e042      	b.n	8002798 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b10      	cmp	r3, #16
 800271e:	d119      	bne.n	8002754 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0210 	mvn.w	r2, #16
 8002728:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e029      	b.n	80027a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002754:	f7fe fce2 	bl	800111c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	429a      	cmp	r2, r3
 8002762:	d302      	bcc.n	800276a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d116      	bne.n	8002798 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2200      	movs	r2, #0
 800276e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2220      	movs	r2, #32
 8002774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	f043 0220 	orr.w	r2, r3, #32
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e007      	b.n	80027a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a2:	2b40      	cmp	r3, #64	; 0x40
 80027a4:	d1b5      	bne.n	8002712 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	695b      	ldr	r3, [r3, #20]
 80027be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027c6:	d11b      	bne.n	8002800 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0204 	orr.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr

0800280c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e31d      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281e:	4b94      	ldr	r3, [pc, #592]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002828:	4b91      	ldr	r3, [pc, #580]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002830:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d07b      	beq.n	8002936 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b08      	cmp	r3, #8
 8002842:	d006      	beq.n	8002852 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d10f      	bne.n	800286a <HAL_RCC_OscConfig+0x5e>
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002850:	d10b      	bne.n	800286a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002852:	4b87      	ldr	r3, [pc, #540]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d06a      	beq.n	8002934 <HAL_RCC_OscConfig+0x128>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d166      	bne.n	8002934 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e2f7      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d106      	bne.n	8002880 <HAL_RCC_OscConfig+0x74>
 8002872:	4b7f      	ldr	r3, [pc, #508]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7e      	ldr	r2, [pc, #504]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800287c:	6013      	str	r3, [r2, #0]
 800287e:	e02d      	b.n	80028dc <HAL_RCC_OscConfig+0xd0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10c      	bne.n	80028a2 <HAL_RCC_OscConfig+0x96>
 8002888:	4b79      	ldr	r3, [pc, #484]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a78      	ldr	r2, [pc, #480]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 800288e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002892:	6013      	str	r3, [r2, #0]
 8002894:	4b76      	ldr	r3, [pc, #472]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a75      	ldr	r2, [pc, #468]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 800289a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	e01c      	b.n	80028dc <HAL_RCC_OscConfig+0xd0>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b05      	cmp	r3, #5
 80028a8:	d10c      	bne.n	80028c4 <HAL_RCC_OscConfig+0xb8>
 80028aa:	4b71      	ldr	r3, [pc, #452]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a70      	ldr	r2, [pc, #448]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80028b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	4b6e      	ldr	r3, [pc, #440]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a6d      	ldr	r2, [pc, #436]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80028bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xd0>
 80028c4:	4b6a      	ldr	r3, [pc, #424]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a69      	ldr	r2, [pc, #420]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80028ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	4b67      	ldr	r3, [pc, #412]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a66      	ldr	r2, [pc, #408]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80028d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d013      	beq.n	800290c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fc1a 	bl	800111c <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ec:	f7fe fc16 	bl	800111c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b64      	cmp	r3, #100	; 0x64
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e2ad      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028fe:	4b5c      	ldr	r3, [pc, #368]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0xe0>
 800290a:	e014      	b.n	8002936 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7fe fc06 	bl	800111c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002914:	f7fe fc02 	bl	800111c <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	; 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e299      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002926:	4b52      	ldr	r3, [pc, #328]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x108>
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d05a      	beq.n	80029f8 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b04      	cmp	r3, #4
 8002946:	d005      	beq.n	8002954 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b0c      	cmp	r3, #12
 800294c:	d119      	bne.n	8002982 <HAL_RCC_OscConfig+0x176>
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d116      	bne.n	8002982 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002954:	4b46      	ldr	r3, [pc, #280]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_RCC_OscConfig+0x160>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d001      	beq.n	800296c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e276      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b40      	ldr	r3, [pc, #256]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	493d      	ldr	r1, [pc, #244]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 800297c:	4313      	orrs	r3, r2
 800297e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002980:	e03a      	b.n	80029f8 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d020      	beq.n	80029cc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298a:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_RCC_OscConfig+0x268>)
 800298c:	2201      	movs	r2, #1
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7fe fbc4 	bl	800111c <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe fbc0 	bl	800111c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e257      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029aa:	4b31      	ldr	r3, [pc, #196]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b6:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	021b      	lsls	r3, r3, #8
 80029c4:	492a      	ldr	r1, [pc, #168]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	604b      	str	r3, [r1, #4]
 80029ca:	e015      	b.n	80029f8 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029cc:	4b29      	ldr	r3, [pc, #164]	; (8002a74 <HAL_RCC_OscConfig+0x268>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fba3 	bl	800111c <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029da:	f7fe fb9f 	bl	800111c <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e236      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80029ec:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80b8 	beq.w	8002b76 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d170      	bne.n	8002aee <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a0c:	4b18      	ldr	r3, [pc, #96]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_OscConfig+0x218>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e21a      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1a      	ldr	r2, [r3, #32]
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d921      	bls.n	8002a78 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fbd5 	bl	80031e8 <RCC_SetFlashLatencyFromMSIRange>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e208      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a48:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	4906      	ldr	r1, [pc, #24]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a5a:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	061b      	lsls	r3, r3, #24
 8002a68:	4901      	ldr	r1, [pc, #4]	; (8002a70 <HAL_RCC_OscConfig+0x264>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
 8002a6e:	e020      	b.n	8002ab2 <HAL_RCC_OscConfig+0x2a6>
 8002a70:	40023800 	.word	0x40023800
 8002a74:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a78:	4ba4      	ldr	r3, [pc, #656]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	49a1      	ldr	r1, [pc, #644]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a8a:	4ba0      	ldr	r3, [pc, #640]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	061b      	lsls	r3, r3, #24
 8002a98:	499c      	ldr	r1, [pc, #624]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fba0 	bl	80031e8 <RCC_SetFlashLatencyFromMSIRange>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1d3      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	0b5b      	lsrs	r3, r3, #13
 8002ab8:	3301      	adds	r3, #1
 8002aba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ac2:	4a92      	ldr	r2, [pc, #584]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002ac4:	6892      	ldr	r2, [r2, #8]
 8002ac6:	0912      	lsrs	r2, r2, #4
 8002ac8:	f002 020f 	and.w	r2, r2, #15
 8002acc:	4990      	ldr	r1, [pc, #576]	; (8002d10 <HAL_RCC_OscConfig+0x504>)
 8002ace:	5c8a      	ldrb	r2, [r1, r2]
 8002ad0:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002ad2:	4a90      	ldr	r2, [pc, #576]	; (8002d14 <HAL_RCC_OscConfig+0x508>)
 8002ad4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002ad6:	4b90      	ldr	r3, [pc, #576]	; (8002d18 <HAL_RCC_OscConfig+0x50c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fad2 	bl	8001084 <HAL_InitTick>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d045      	beq.n	8002b76 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	e1b5      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d029      	beq.n	8002b4a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002af6:	4b89      	ldr	r3, [pc, #548]	; (8002d1c <HAL_RCC_OscConfig+0x510>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002afc:	f7fe fb0e 	bl	800111c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b04:	f7fe fb0a 	bl	800111c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e1a1      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b16:	4b7d      	ldr	r3, [pc, #500]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b22:	4b7a      	ldr	r3, [pc, #488]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4977      	ldr	r1, [pc, #476]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b34:	4b75      	ldr	r3, [pc, #468]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	061b      	lsls	r3, r3, #24
 8002b42:	4972      	ldr	r1, [pc, #456]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]
 8002b48:	e015      	b.n	8002b76 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b4a:	4b74      	ldr	r3, [pc, #464]	; (8002d1c <HAL_RCC_OscConfig+0x510>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b50:	f7fe fae4 	bl	800111c <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b58:	f7fe fae0 	bl	800111c <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e177      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b6a:	4b68      	ldr	r3, [pc, #416]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1f0      	bne.n	8002b58 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d030      	beq.n	8002be4 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d016      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b8a:	4b65      	ldr	r3, [pc, #404]	; (8002d20 <HAL_RCC_OscConfig+0x514>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b90:	f7fe fac4 	bl	800111c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b98:	f7fe fac0 	bl	800111c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e157      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002baa:	4b58      	ldr	r3, [pc, #352]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0f0      	beq.n	8002b98 <HAL_RCC_OscConfig+0x38c>
 8002bb6:	e015      	b.n	8002be4 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bb8:	4b59      	ldr	r3, [pc, #356]	; (8002d20 <HAL_RCC_OscConfig+0x514>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbe:	f7fe faad 	bl	800111c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc6:	f7fe faa9 	bl	800111c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e140      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002bd8:	4b4c      	ldr	r3, [pc, #304]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d1f0      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80b5 	beq.w	8002d5c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bf6:	4b45      	ldr	r3, [pc, #276]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10d      	bne.n	8002c1e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b42      	ldr	r3, [pc, #264]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	4a41      	ldr	r2, [pc, #260]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6253      	str	r3, [r2, #36]	; 0x24
 8002c0e:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1e:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <HAL_RCC_OscConfig+0x518>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d118      	bne.n	8002c5c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c2a:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <HAL_RCC_OscConfig+0x518>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a3d      	ldr	r2, [pc, #244]	; (8002d24 <HAL_RCC_OscConfig+0x518>)
 8002c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c36:	f7fe fa71 	bl	800111c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c3e:	f7fe fa6d 	bl	800111c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b64      	cmp	r3, #100	; 0x64
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e104      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c50:	4b34      	ldr	r3, [pc, #208]	; (8002d24 <HAL_RCC_OscConfig+0x518>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d106      	bne.n	8002c72 <HAL_RCC_OscConfig+0x466>
 8002c64:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6353      	str	r3, [r2, #52]	; 0x34
 8002c70:	e02d      	b.n	8002cce <HAL_RCC_OscConfig+0x4c2>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x488>
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c84:	6353      	str	r3, [r2, #52]	; 0x34
 8002c86:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002c8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c90:	6353      	str	r3, [r2, #52]	; 0x34
 8002c92:	e01c      	b.n	8002cce <HAL_RCC_OscConfig+0x4c2>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d10c      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x4aa>
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ca0:	4a1a      	ldr	r2, [pc, #104]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002ca2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ca6:	6353      	str	r3, [r2, #52]	; 0x34
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cac:	4a17      	ldr	r2, [pc, #92]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb2:	6353      	str	r3, [r2, #52]	; 0x34
 8002cb4:	e00b      	b.n	8002cce <HAL_RCC_OscConfig+0x4c2>
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cba:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cc0:	6353      	str	r3, [r2, #52]	; 0x34
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc6:	4a11      	ldr	r2, [pc, #68]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ccc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d015      	beq.n	8002d02 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fa21 	bl	800111c <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cdc:	e00a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cde:	f7fe fa1d 	bl	800111c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e0b2      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cf4:	4b05      	ldr	r3, [pc, #20]	; (8002d0c <HAL_RCC_OscConfig+0x500>)
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0ee      	beq.n	8002cde <HAL_RCC_OscConfig+0x4d2>
 8002d00:	e023      	b.n	8002d4a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d02:	f7fe fa0b 	bl	800111c <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d08:	e019      	b.n	8002d3e <HAL_RCC_OscConfig+0x532>
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	08007e6c 	.word	0x08007e6c
 8002d14:	2000000c 	.word	0x2000000c
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	42470020 	.word	0x42470020
 8002d20:	42470680 	.word	0x42470680
 8002d24:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7fe f9f8 	bl	800111c <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e08d      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002d3e:	4b49      	ldr	r3, [pc, #292]	; (8002e64 <HAL_RCC_OscConfig+0x658>)
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ee      	bne.n	8002d28 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d4a:	7ffb      	ldrb	r3, [r7, #31]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d50:	4b44      	ldr	r3, [pc, #272]	; (8002e64 <HAL_RCC_OscConfig+0x658>)
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	4a43      	ldr	r2, [pc, #268]	; (8002e64 <HAL_RCC_OscConfig+0x658>)
 8002d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d079      	beq.n	8002e58 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	2b0c      	cmp	r3, #12
 8002d68:	d056      	beq.n	8002e18 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d13b      	bne.n	8002dea <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d72:	4b3d      	ldr	r3, [pc, #244]	; (8002e68 <HAL_RCC_OscConfig+0x65c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe f9d0 	bl	800111c <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe f9cc 	bl	800111c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e063      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d92:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <HAL_RCC_OscConfig+0x658>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d9e:	4b31      	ldr	r3, [pc, #196]	; (8002e64 <HAL_RCC_OscConfig+0x658>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dae:	4319      	orrs	r1, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	430b      	orrs	r3, r1
 8002db6:	492b      	ldr	r1, [pc, #172]	; (8002e64 <HAL_RCC_OscConfig+0x658>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dbc:	4b2a      	ldr	r3, [pc, #168]	; (8002e68 <HAL_RCC_OscConfig+0x65c>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc2:	f7fe f9ab 	bl	800111c <HAL_GetTick>
 8002dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc8:	e008      	b.n	8002ddc <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fe f9a7 	bl	800111c <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e03e      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <HAL_RCC_OscConfig+0x658>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0f0      	beq.n	8002dca <HAL_RCC_OscConfig+0x5be>
 8002de8:	e036      	b.n	8002e58 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b1f      	ldr	r3, [pc, #124]	; (8002e68 <HAL_RCC_OscConfig+0x65c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df0:	f7fe f994 	bl	800111c <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df8:	f7fe f990 	bl	800111c <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e027      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0a:	4b16      	ldr	r3, [pc, #88]	; (8002e64 <HAL_RCC_OscConfig+0x658>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f0      	bne.n	8002df8 <HAL_RCC_OscConfig+0x5ec>
 8002e16:	e01f      	b.n	8002e58 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e01a      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	; (8002e64 <HAL_RCC_OscConfig+0x658>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d10d      	bne.n	8002e54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d106      	bne.n	8002e54 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3720      	adds	r7, #32
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800
 8002e68:	42470060 	.word	0x42470060

08002e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e11a      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e80:	4b8f      	ldr	r3, [pc, #572]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d919      	bls.n	8002ec2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x34>
 8002e94:	4b8a      	ldr	r3, [pc, #552]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a89      	ldr	r2, [pc, #548]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 8002e9a:	f043 0304 	orr.w	r3, r3, #4
 8002e9e:	6013      	str	r3, [r2, #0]
 8002ea0:	4b87      	ldr	r3, [pc, #540]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 0201 	bic.w	r2, r3, #1
 8002ea8:	4985      	ldr	r1, [pc, #532]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb0:	4b83      	ldr	r3, [pc, #524]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e0f9      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ece:	4b7d      	ldr	r3, [pc, #500]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	497a      	ldr	r1, [pc, #488]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0301 	and.w	r3, r3, #1
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 808e 	beq.w	800300a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d107      	bne.n	8002f06 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef6:	4b73      	ldr	r3, [pc, #460]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d121      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e0d7      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d107      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f0e:	4b6d      	ldr	r3, [pc, #436]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d115      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0cb      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d107      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f26:	4b67      	ldr	r3, [pc, #412]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0bf      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f36:	4b63      	ldr	r3, [pc, #396]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e0b7      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f46:	4b5f      	ldr	r3, [pc, #380]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	495c      	ldr	r1, [pc, #368]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f58:	f7fe f8e0 	bl	800111c <HAL_GetTick>
 8002f5c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d112      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f66:	e00a      	b.n	8002f7e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f68:	f7fe f8d8 	bl	800111c <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e09b      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f7e:	4b51      	ldr	r3, [pc, #324]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d1ee      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xfc>
 8002f8a:	e03e      	b.n	800300a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d112      	bne.n	8002fba <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f94:	e00a      	b.n	8002fac <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f96:	f7fe f8c1 	bl	800111c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e084      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fac:	4b45      	ldr	r3, [pc, #276]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f003 030c 	and.w	r3, r3, #12
 8002fb4:	2b0c      	cmp	r3, #12
 8002fb6:	d1ee      	bne.n	8002f96 <HAL_RCC_ClockConfig+0x12a>
 8002fb8:	e027      	b.n	800300a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d11d      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fe f8aa 	bl	800111c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e06d      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fda:	4b3a      	ldr	r3, [pc, #232]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d1ee      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x158>
 8002fe6:	e010      	b.n	800300a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fe8:	f7fe f898 	bl	800111c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e05b      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ffe:	4b31      	ldr	r3, [pc, #196]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ee      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800300a:	4b2d      	ldr	r3, [pc, #180]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d219      	bcs.n	800304c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d105      	bne.n	800302a <HAL_RCC_ClockConfig+0x1be>
 800301e:	4b28      	ldr	r3, [pc, #160]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a27      	ldr	r2, [pc, #156]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 0201 	bic.w	r2, r3, #1
 8003032:	4923      	ldr	r1, [pc, #140]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303a:	4b21      	ldr	r3, [pc, #132]	; (80030c0 <HAL_RCC_ClockConfig+0x254>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	429a      	cmp	r2, r3
 8003046:	d001      	beq.n	800304c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e034      	b.n	80030b6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d008      	beq.n	800306a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003058:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4917      	ldr	r1, [pc, #92]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003076:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	490f      	ldr	r1, [pc, #60]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800308a:	f000 f823 	bl	80030d4 <HAL_RCC_GetSysClockFreq>
 800308e:	4601      	mov	r1, r0
 8003090:	4b0c      	ldr	r3, [pc, #48]	; (80030c4 <HAL_RCC_ClockConfig+0x258>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	4a0b      	ldr	r2, [pc, #44]	; (80030c8 <HAL_RCC_ClockConfig+0x25c>)
 800309c:	5cd3      	ldrb	r3, [r2, r3]
 800309e:	fa21 f303 	lsr.w	r3, r1, r3
 80030a2:	4a0a      	ldr	r2, [pc, #40]	; (80030cc <HAL_RCC_ClockConfig+0x260>)
 80030a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_RCC_ClockConfig+0x264>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fd ffea 	bl	8001084 <HAL_InitTick>
 80030b0:	4603      	mov	r3, r0
 80030b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80030b4:	7afb      	ldrb	r3, [r7, #11]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	40023c00 	.word	0x40023c00
 80030c4:	40023800 	.word	0x40023800
 80030c8:	08007e6c 	.word	0x08007e6c
 80030cc:	2000000c 	.word	0x2000000c
 80030d0:	20000000 	.word	0x20000000

080030d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80030da:	4b26      	ldr	r3, [pc, #152]	; (8003174 <HAL_RCC_GetSysClockFreq+0xa0>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 030c 	and.w	r3, r3, #12
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d006      	beq.n	80030f8 <HAL_RCC_GetSysClockFreq+0x24>
 80030ea:	2b0c      	cmp	r3, #12
 80030ec:	d007      	beq.n	80030fe <HAL_RCC_GetSysClockFreq+0x2a>
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d12c      	bne.n	800314c <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030f2:	4b21      	ldr	r3, [pc, #132]	; (8003178 <HAL_RCC_GetSysClockFreq+0xa4>)
 80030f4:	613b      	str	r3, [r7, #16]
      break;
 80030f6:	e037      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030f8:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_GetSysClockFreq+0xa8>)
 80030fa:	613b      	str	r3, [r7, #16]
      break;
 80030fc:	e034      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	0c9b      	lsrs	r3, r3, #18
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	4a1e      	ldr	r2, [pc, #120]	; (8003180 <HAL_RCC_GetSysClockFreq+0xac>)
 8003108:	5cd3      	ldrb	r3, [r2, r3]
 800310a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	0d9b      	lsrs	r3, r3, #22
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	3301      	adds	r3, #1
 8003116:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <HAL_RCC_GetSysClockFreq+0xa0>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d008      	beq.n	8003136 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4a15      	ldr	r2, [pc, #84]	; (800317c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003128:	fb02 f203 	mul.w	r2, r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e007      	b.n	8003146 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4a0f      	ldr	r2, [pc, #60]	; (8003178 <HAL_RCC_GetSysClockFreq+0xa4>)
 800313a:	fb02 f203 	mul.w	r2, r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	fbb2 f3f3 	udiv	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	613b      	str	r3, [r7, #16]
      break;
 800314a:	e00d      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <HAL_RCC_GetSysClockFreq+0xa0>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	0b5b      	lsrs	r3, r3, #13
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	613b      	str	r3, [r7, #16]
      break;
 8003166:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003168:	693b      	ldr	r3, [r7, #16]
}
 800316a:	4618      	mov	r0, r3
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40023800 	.word	0x40023800
 8003178:	00f42400 	.word	0x00f42400
 800317c:	016e3600 	.word	0x016e3600
 8003180:	08007e60 	.word	0x08007e60

08003184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003188:	4b02      	ldr	r3, [pc, #8]	; (8003194 <HAL_RCC_GetHCLKFreq+0x10>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	2000000c 	.word	0x2000000c

08003198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800319c:	f7ff fff2 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031a0:	4601      	mov	r1, r0
 80031a2:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	4a03      	ldr	r2, [pc, #12]	; (80031bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ae:	5cd3      	ldrb	r3, [r2, r3]
 80031b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08007e7c 	.word	0x08007e7c

080031c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031c4:	f7ff ffde 	bl	8003184 <HAL_RCC_GetHCLKFreq>
 80031c8:	4601      	mov	r1, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0adb      	lsrs	r3, r3, #11
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4a03      	ldr	r2, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031d6:	5cd3      	ldrb	r3, [r2, r3]
 80031d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08007e7c 	.word	0x08007e7c

080031e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80031f0:	2300      	movs	r3, #0
 80031f2:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80031f4:	4b29      	ldr	r3, [pc, #164]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d12c      	bne.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003200:	4b26      	ldr	r3, [pc, #152]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800320c:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e016      	b.n	8003246 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003218:	4b20      	ldr	r3, [pc, #128]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	4a1f      	ldr	r2, [pc, #124]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800321e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003222:	6253      	str	r3, [r2, #36]	; 0x24
 8003224:	4b1d      	ldr	r3, [pc, #116]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322c:	60fb      	str	r3, [r7, #12]
 800322e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003230:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003238:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800323a:	4b18      	ldr	r3, [pc, #96]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	4a17      	ldr	r2, [pc, #92]	; (800329c <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003244:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800324c:	d105      	bne.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003254:	d101      	bne.n	800325a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003256:	2301      	movs	r3, #1
 8003258:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d105      	bne.n	800326c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003260:	4b10      	ldr	r3, [pc, #64]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a0f      	ldr	r2, [pc, #60]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f023 0201 	bic.w	r2, r3, #1
 8003274:	490b      	ldr	r1, [pc, #44]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	4313      	orrs	r3, r2
 800327a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800327c:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	693a      	ldr	r2, [r7, #16]
 8003286:	429a      	cmp	r2, r3
 8003288:	d001      	beq.n	800328e <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e000      	b.n	8003290 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	40007000 	.word	0x40007000
 80032a4:	40023c00 	.word	0x40023c00

080032a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e03f      	b.n	800333a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 feec 	bl	80040ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	; 0x24
 80032d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f90b 	bl	8003508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	691a      	ldr	r2, [r3, #16]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003300:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695a      	ldr	r2, [r3, #20]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003310:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003320:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2220      	movs	r2, #32
 800332c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b088      	sub	sp, #32
 8003346:	af02      	add	r7, sp, #8
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	603b      	str	r3, [r7, #0]
 800334e:	4613      	mov	r3, r2
 8003350:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b20      	cmp	r3, #32
 8003360:	f040 8083 	bne.w	800346a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d002      	beq.n	8003370 <HAL_UART_Transmit+0x2e>
 800336a:	88fb      	ldrh	r3, [r7, #6]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d101      	bne.n	8003374 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e07b      	b.n	800346c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_UART_Transmit+0x40>
 800337e:	2302      	movs	r3, #2
 8003380:	e074      	b.n	800346c <HAL_UART_Transmit+0x12a>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2221      	movs	r2, #33	; 0x21
 8003394:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003398:	f7fd fec0 	bl	800111c <HAL_GetTick>
 800339c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	88fa      	ldrh	r2, [r7, #6]
 80033a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	88fa      	ldrh	r2, [r7, #6]
 80033a8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033aa:	e042      	b.n	8003432 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	3b01      	subs	r3, #1
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c2:	d122      	bne.n	800340a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	9300      	str	r3, [sp, #0]
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2180      	movs	r1, #128	; 0x80
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f850 	bl	8003474 <UART_WaitOnFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e046      	b.n	800346c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	881b      	ldrh	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d103      	bne.n	8003402 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	3302      	adds	r3, #2
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	e017      	b.n	8003432 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3301      	adds	r3, #1
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	e013      	b.n	8003432 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2200      	movs	r2, #0
 8003412:	2180      	movs	r1, #128	; 0x80
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f82d 	bl	8003474 <UART_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e023      	b.n	800346c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	60ba      	str	r2, [r7, #8]
 800342a:	781a      	ldrb	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003436:	b29b      	uxth	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1b7      	bne.n	80033ac <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2200      	movs	r2, #0
 8003444:	2140      	movs	r1, #64	; 0x40
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f814 	bl	8003474 <UART_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e00a      	b.n	800346c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800346a:	2302      	movs	r3, #2
  }
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003484:	e02c      	b.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d028      	beq.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003494:	f7fd fe42 	bl	800111c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d21d      	bcs.n	80034e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 0201 	bic.w	r2, r2, #1
 80034c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e00f      	b.n	8003500 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	bf0c      	ite	eq
 80034f0:	2301      	moveq	r3, #1
 80034f2:	2300      	movne	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	461a      	mov	r2, r3
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d0c3      	beq.n	8003486 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3710      	adds	r7, #16
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	4313      	orrs	r3, r2
 800353c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003548:	f023 030c 	bic.w	r3, r3, #12
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6812      	ldr	r2, [r2, #0]
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	430b      	orrs	r3, r1
 8003554:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003574:	f040 80a5 	bne.w	80036c2 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4aa4      	ldr	r2, [pc, #656]	; (8003810 <UART_SetConfig+0x308>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d14f      	bne.n	8003622 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003582:	f7ff fe1d 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 8003586:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	4613      	mov	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	009a      	lsls	r2, r3, #2
 8003592:	441a      	add	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	4a9d      	ldr	r2, [pc, #628]	; (8003814 <UART_SetConfig+0x30c>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	0119      	lsls	r1, r3, #4
 80035a8:	68ba      	ldr	r2, [r7, #8]
 80035aa:	4613      	mov	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	4413      	add	r3, r2
 80035b0:	009a      	lsls	r2, r3, #2
 80035b2:	441a      	add	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80035be:	4b95      	ldr	r3, [pc, #596]	; (8003814 <UART_SetConfig+0x30c>)
 80035c0:	fba3 0302 	umull	r0, r3, r3, r2
 80035c4:	095b      	lsrs	r3, r3, #5
 80035c6:	2064      	movs	r0, #100	; 0x64
 80035c8:	fb00 f303 	mul.w	r3, r0, r3
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	3332      	adds	r3, #50	; 0x32
 80035d2:	4a90      	ldr	r2, [pc, #576]	; (8003814 <UART_SetConfig+0x30c>)
 80035d4:	fba2 2303 	umull	r2, r3, r2, r3
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80035e0:	4419      	add	r1, r3
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	009a      	lsls	r2, r3, #2
 80035ec:	441a      	add	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f8:	4b86      	ldr	r3, [pc, #536]	; (8003814 <UART_SetConfig+0x30c>)
 80035fa:	fba3 0302 	umull	r0, r3, r3, r2
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	2064      	movs	r0, #100	; 0x64
 8003602:	fb00 f303 	mul.w	r3, r0, r3
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	3332      	adds	r3, #50	; 0x32
 800360c:	4a81      	ldr	r2, [pc, #516]	; (8003814 <UART_SetConfig+0x30c>)
 800360e:	fba2 2303 	umull	r2, r3, r2, r3
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	f003 0207 	and.w	r2, r3, #7
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	440a      	add	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003620:	e0f1      	b.n	8003806 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003622:	f7ff fdb9 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 8003626:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009a      	lsls	r2, r3, #2
 8003632:	441a      	add	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	4a75      	ldr	r2, [pc, #468]	; (8003814 <UART_SetConfig+0x30c>)
 8003640:	fba2 2303 	umull	r2, r3, r2, r3
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	0119      	lsls	r1, r3, #4
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	009a      	lsls	r2, r3, #2
 8003652:	441a      	add	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	fbb2 f2f3 	udiv	r2, r2, r3
 800365e:	4b6d      	ldr	r3, [pc, #436]	; (8003814 <UART_SetConfig+0x30c>)
 8003660:	fba3 0302 	umull	r0, r3, r3, r2
 8003664:	095b      	lsrs	r3, r3, #5
 8003666:	2064      	movs	r0, #100	; 0x64
 8003668:	fb00 f303 	mul.w	r3, r0, r3
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	00db      	lsls	r3, r3, #3
 8003670:	3332      	adds	r3, #50	; 0x32
 8003672:	4a68      	ldr	r2, [pc, #416]	; (8003814 <UART_SetConfig+0x30c>)
 8003674:	fba2 2303 	umull	r2, r3, r2, r3
 8003678:	095b      	lsrs	r3, r3, #5
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003680:	4419      	add	r1, r3
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009a      	lsls	r2, r3, #2
 800368c:	441a      	add	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	fbb2 f2f3 	udiv	r2, r2, r3
 8003698:	4b5e      	ldr	r3, [pc, #376]	; (8003814 <UART_SetConfig+0x30c>)
 800369a:	fba3 0302 	umull	r0, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	2064      	movs	r0, #100	; 0x64
 80036a2:	fb00 f303 	mul.w	r3, r0, r3
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	00db      	lsls	r3, r3, #3
 80036aa:	3332      	adds	r3, #50	; 0x32
 80036ac:	4a59      	ldr	r2, [pc, #356]	; (8003814 <UART_SetConfig+0x30c>)
 80036ae:	fba2 2303 	umull	r2, r3, r2, r3
 80036b2:	095b      	lsrs	r3, r3, #5
 80036b4:	f003 0207 	and.w	r2, r3, #7
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	440a      	add	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
}
 80036c0:	e0a1      	b.n	8003806 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a52      	ldr	r2, [pc, #328]	; (8003810 <UART_SetConfig+0x308>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d14e      	bne.n	800376a <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80036cc:	f7ff fd78 	bl	80031c0 <HAL_RCC_GetPCLK2Freq>
 80036d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009a      	lsls	r2, r3, #2
 80036dc:	441a      	add	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	4a4a      	ldr	r2, [pc, #296]	; (8003814 <UART_SetConfig+0x30c>)
 80036ea:	fba2 2303 	umull	r2, r3, r2, r3
 80036ee:	095b      	lsrs	r3, r3, #5
 80036f0:	0119      	lsls	r1, r3, #4
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009a      	lsls	r2, r3, #2
 80036fc:	441a      	add	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	fbb2 f2f3 	udiv	r2, r2, r3
 8003708:	4b42      	ldr	r3, [pc, #264]	; (8003814 <UART_SetConfig+0x30c>)
 800370a:	fba3 0302 	umull	r0, r3, r3, r2
 800370e:	095b      	lsrs	r3, r3, #5
 8003710:	2064      	movs	r0, #100	; 0x64
 8003712:	fb00 f303 	mul.w	r3, r0, r3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	3332      	adds	r3, #50	; 0x32
 800371c:	4a3d      	ldr	r2, [pc, #244]	; (8003814 <UART_SetConfig+0x30c>)
 800371e:	fba2 2303 	umull	r2, r3, r2, r3
 8003722:	095b      	lsrs	r3, r3, #5
 8003724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003728:	4419      	add	r1, r3
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003740:	4b34      	ldr	r3, [pc, #208]	; (8003814 <UART_SetConfig+0x30c>)
 8003742:	fba3 0302 	umull	r0, r3, r3, r2
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	2064      	movs	r0, #100	; 0x64
 800374a:	fb00 f303 	mul.w	r3, r0, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	3332      	adds	r3, #50	; 0x32
 8003754:	4a2f      	ldr	r2, [pc, #188]	; (8003814 <UART_SetConfig+0x30c>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	f003 020f 	and.w	r2, r3, #15
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	440a      	add	r2, r1
 8003766:	609a      	str	r2, [r3, #8]
}
 8003768:	e04d      	b.n	8003806 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800376a:	f7ff fd15 	bl	8003198 <HAL_RCC_GetPCLK1Freq>
 800376e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009a      	lsls	r2, r3, #2
 800377a:	441a      	add	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	4a23      	ldr	r2, [pc, #140]	; (8003814 <UART_SetConfig+0x30c>)
 8003788:	fba2 2303 	umull	r2, r3, r2, r3
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	0119      	lsls	r1, r3, #4
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009a      	lsls	r2, r3, #2
 800379a:	441a      	add	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <UART_SetConfig+0x30c>)
 80037a8:	fba3 0302 	umull	r0, r3, r3, r2
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	2064      	movs	r0, #100	; 0x64
 80037b0:	fb00 f303 	mul.w	r3, r0, r3
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	3332      	adds	r3, #50	; 0x32
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <UART_SetConfig+0x30c>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c6:	4419      	add	r1, r3
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	4613      	mov	r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	4413      	add	r3, r2
 80037d0:	009a      	lsls	r2, r3, #2
 80037d2:	441a      	add	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	fbb2 f2f3 	udiv	r2, r2, r3
 80037de:	4b0d      	ldr	r3, [pc, #52]	; (8003814 <UART_SetConfig+0x30c>)
 80037e0:	fba3 0302 	umull	r0, r3, r3, r2
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	2064      	movs	r0, #100	; 0x64
 80037e8:	fb00 f303 	mul.w	r3, r0, r3
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	3332      	adds	r3, #50	; 0x32
 80037f2:	4a08      	ldr	r2, [pc, #32]	; (8003814 <UART_SetConfig+0x30c>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	095b      	lsrs	r3, r3, #5
 80037fa:	f003 020f 	and.w	r2, r3, #15
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	440a      	add	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	40013800 	.word	0x40013800
 8003814:	51eb851f 	.word	0x51eb851f

08003818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	InterName name =LDPT_INT ;
 800381e:	2302      	movs	r3, #2
 8003820:	71fb      	strb	r3, [r7, #7]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003822:	f7fd fc17 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003826:	f000 f82d 	bl	8003884 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800382a:	f000 f8cb 	bl	80039c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800382e:	f000 f871 	bl	8003914 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003832:	f000 f89d 	bl	8003970 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart1, (uint8_t*)"Start of testing\r\n",18,1000);
 8003836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383a:	2212      	movs	r2, #18
 800383c:	490d      	ldr	r1, [pc, #52]	; (8003874 <main+0x5c>)
 800383e:	480e      	ldr	r0, [pc, #56]	; (8003878 <main+0x60>)
 8003840:	f7ff fd7f 	bl	8003342 <HAL_UART_Transmit>
  //I2C_find_devices();

   MMA845x_begin(1, 2);
 8003844:	2102      	movs	r1, #2
 8003846:	2001      	movs	r0, #1
 8003848:	f000 f9fe 	bl	8003c48 <MMA845x_begin>
  // MMA845X_interrupt(name,1);
   MMA845x_getdata();
 800384c:	f000 fa68 	bl	8003d20 <MMA845x_getdata>
   MMA845X_sendData();
 8003850:	f000 fb6e 	bl	8003f30 <MMA845X_sendData>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)==GPIO_PIN_RESET)
 8003854:	2180      	movs	r1, #128	; 0x80
 8003856:	4809      	ldr	r0, [pc, #36]	; (800387c <main+0x64>)
 8003858:	f7fd ff28 	bl	80016ac <HAL_GPIO_ReadPin>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f8      	bne.n	8003854 <main+0x3c>
	  {
		  HAL_UART_Transmit(&huart1, (uint8_t*)"That's deep\r\n",17,1000);
 8003862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003866:	2211      	movs	r2, #17
 8003868:	4905      	ldr	r1, [pc, #20]	; (8003880 <main+0x68>)
 800386a:	4803      	ldr	r0, [pc, #12]	; (8003878 <main+0x60>)
 800386c:	f7ff fd69 	bl	8003342 <HAL_UART_Transmit>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)==GPIO_PIN_RESET)
 8003870:	e7f0      	b.n	8003854 <main+0x3c>
 8003872:	bf00      	nop
 8003874:	08007da8 	.word	0x08007da8
 8003878:	20000264 	.word	0x20000264
 800387c:	40020800 	.word	0x40020800
 8003880:	08007dbc 	.word	0x08007dbc

08003884 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b092      	sub	sp, #72	; 0x48
 8003888:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800388a:	f107 0314 	add.w	r3, r7, #20
 800388e:	2234      	movs	r2, #52	; 0x34
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fd34 	bl	8004300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003898:	463b      	mov	r3, r7
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	60da      	str	r2, [r3, #12]
 80038a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038a6:	4b1a      	ldr	r3, [pc, #104]	; (8003910 <SystemClock_Config+0x8c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <SystemClock_Config+0x8c>)
 80038b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038b4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80038b6:	2310      	movs	r3, #16
 80038b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80038ba:	2301      	movs	r3, #1
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80038be:	2300      	movs	r3, #0
 80038c0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80038c2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80038c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7fe ff9b 	bl	800280c <HAL_RCC_OscConfig>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80038dc:	f000 f8ce 	bl	8003a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038e0:	230f      	movs	r3, #15
 80038e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80038e4:	2300      	movs	r3, #0
 80038e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038e8:	2300      	movs	r3, #0
 80038ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038f0:	2300      	movs	r3, #0
 80038f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80038f4:	463b      	mov	r3, r7
 80038f6:	2100      	movs	r1, #0
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff fab7 	bl	8002e6c <HAL_RCC_ClockConfig>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003904:	f000 f8ba 	bl	8003a7c <Error_Handler>
  }
}
 8003908:	bf00      	nop
 800390a:	3748      	adds	r7, #72	; 0x48
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40007000 	.word	0x40007000

08003914 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <MX_I2C1_Init+0x50>)
 800391a:	4a13      	ldr	r2, [pc, #76]	; (8003968 <MX_I2C1_Init+0x54>)
 800391c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800391e:	4b11      	ldr	r3, [pc, #68]	; (8003964 <MX_I2C1_Init+0x50>)
 8003920:	4a12      	ldr	r2, [pc, #72]	; (800396c <MX_I2C1_Init+0x58>)
 8003922:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003924:	4b0f      	ldr	r3, [pc, #60]	; (8003964 <MX_I2C1_Init+0x50>)
 8003926:	2200      	movs	r2, #0
 8003928:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800392a:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <MX_I2C1_Init+0x50>)
 800392c:	2200      	movs	r2, #0
 800392e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <MX_I2C1_Init+0x50>)
 8003932:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003936:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003938:	4b0a      	ldr	r3, [pc, #40]	; (8003964 <MX_I2C1_Init+0x50>)
 800393a:	2200      	movs	r2, #0
 800393c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800393e:	4b09      	ldr	r3, [pc, #36]	; (8003964 <MX_I2C1_Init+0x50>)
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8003944:	4b07      	ldr	r3, [pc, #28]	; (8003964 <MX_I2C1_Init+0x50>)
 8003946:	2240      	movs	r2, #64	; 0x40
 8003948:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800394a:	4b06      	ldr	r3, [pc, #24]	; (8003964 <MX_I2C1_Init+0x50>)
 800394c:	2200      	movs	r2, #0
 800394e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003950:	4804      	ldr	r0, [pc, #16]	; (8003964 <MX_I2C1_Init+0x50>)
 8003952:	f7fd fee5 	bl	8001720 <HAL_I2C_Init>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d001      	beq.n	8003960 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800395c:	f000 f88e 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003960:	bf00      	nop
 8003962:	bd80      	pop	{r7, pc}
 8003964:	2000020c 	.word	0x2000020c
 8003968:	40005400 	.word	0x40005400
 800396c:	000186a0 	.word	0x000186a0

08003970 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003974:	4b11      	ldr	r3, [pc, #68]	; (80039bc <MX_USART1_UART_Init+0x4c>)
 8003976:	4a12      	ldr	r2, [pc, #72]	; (80039c0 <MX_USART1_UART_Init+0x50>)
 8003978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800397a:	4b10      	ldr	r3, [pc, #64]	; (80039bc <MX_USART1_UART_Init+0x4c>)
 800397c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003982:	4b0e      	ldr	r3, [pc, #56]	; (80039bc <MX_USART1_UART_Init+0x4c>)
 8003984:	2200      	movs	r2, #0
 8003986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003988:	4b0c      	ldr	r3, [pc, #48]	; (80039bc <MX_USART1_UART_Init+0x4c>)
 800398a:	2200      	movs	r2, #0
 800398c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800398e:	4b0b      	ldr	r3, [pc, #44]	; (80039bc <MX_USART1_UART_Init+0x4c>)
 8003990:	2200      	movs	r2, #0
 8003992:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003994:	4b09      	ldr	r3, [pc, #36]	; (80039bc <MX_USART1_UART_Init+0x4c>)
 8003996:	220c      	movs	r2, #12
 8003998:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800399a:	4b08      	ldr	r3, [pc, #32]	; (80039bc <MX_USART1_UART_Init+0x4c>)
 800399c:	2200      	movs	r2, #0
 800399e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <MX_USART1_UART_Init+0x4c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80039a6:	4805      	ldr	r0, [pc, #20]	; (80039bc <MX_USART1_UART_Init+0x4c>)
 80039a8:	f7ff fc7e 	bl	80032a8 <HAL_UART_Init>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80039b2:	f000 f863 	bl	8003a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000264 	.word	0x20000264
 80039c0:	40013800 	.word	0x40013800

080039c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ca:	f107 030c 	add.w	r3, r7, #12
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	609a      	str	r2, [r3, #8]
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039da:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <MX_GPIO_Init+0xa8>)
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	4a23      	ldr	r2, [pc, #140]	; (8003a6c <MX_GPIO_Init+0xa8>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	61d3      	str	r3, [r2, #28]
 80039e6:	4b21      	ldr	r3, [pc, #132]	; (8003a6c <MX_GPIO_Init+0xa8>)
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	60bb      	str	r3, [r7, #8]
 80039f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039f2:	4b1e      	ldr	r3, [pc, #120]	; (8003a6c <MX_GPIO_Init+0xa8>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	; (8003a6c <MX_GPIO_Init+0xa8>)
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	61d3      	str	r3, [r2, #28]
 80039fe:	4b1b      	ldr	r3, [pc, #108]	; (8003a6c <MX_GPIO_Init+0xa8>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	607b      	str	r3, [r7, #4]
 8003a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a0a:	4b18      	ldr	r3, [pc, #96]	; (8003a6c <MX_GPIO_Init+0xa8>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	4a17      	ldr	r2, [pc, #92]	; (8003a6c <MX_GPIO_Init+0xa8>)
 8003a10:	f043 0302 	orr.w	r3, r3, #2
 8003a14:	61d3      	str	r3, [r2, #28]
 8003a16:	4b15      	ldr	r3, [pc, #84]	; (8003a6c <MX_GPIO_Init+0xa8>)
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	603b      	str	r3, [r7, #0]
 8003a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a2e:	f107 030c 	add.w	r3, r7, #12
 8003a32:	4619      	mov	r1, r3
 8003a34:	480e      	ldr	r0, [pc, #56]	; (8003a70 <MX_GPIO_Init+0xac>)
 8003a36:	f7fd fcab 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <MX_GPIO_Init+0xb0>)
 8003a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a48:	f107 030c 	add.w	r3, r7, #12
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	480a      	ldr	r0, [pc, #40]	; (8003a78 <MX_GPIO_Init+0xb4>)
 8003a50:	f7fd fc9e 	bl	8001390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003a54:	2200      	movs	r2, #0
 8003a56:	2100      	movs	r1, #0
 8003a58:	2017      	movs	r0, #23
 8003a5a:	f7fd fc62 	bl	8001322 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a5e:	2017      	movs	r0, #23
 8003a60:	f7fd fc7b 	bl	800135a <HAL_NVIC_EnableIRQ>

}
 8003a64:	bf00      	nop
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	40020800 	.word	0x40020800
 8003a74:	10110000 	.word	0x10110000
 8003a78:	40020400 	.word	0x40020400

08003a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003a80:	bf00      	nop
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bc80      	pop	{r7}
 8003a86:	4770      	bx	lr

08003a88 <MMA845X_write>:
	if(add) slave_address=add;
	else slave_address=0x38;
}

void MMA845X_write(uint8_t param_addr, uint8_t param)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af02      	add	r7, sp, #8
 8003a8e:	4603      	mov	r3, r0
 8003a90:	460a      	mov	r2, r1
 8003a92:	71fb      	strb	r3, [r7, #7]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71bb      	strb	r3, [r7, #6]
	uint8_t message[2]= {param_addr,param};
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	733b      	strb	r3, [r7, #12]
 8003a9c:	79bb      	ldrb	r3, [r7, #6]
 8003a9e:	737b      	strb	r3, [r7, #13]
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)slave_address,message, 2, 100)!=HAL_OK)
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	; (8003ad0 <MMA845X_write+0x48>)
 8003aa2:	8819      	ldrh	r1, [r3, #0]
 8003aa4:	f107 020c 	add.w	r2, r7, #12
 8003aa8:	2364      	movs	r3, #100	; 0x64
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	2302      	movs	r3, #2
 8003aae:	4809      	ldr	r0, [pc, #36]	; (8003ad4 <MMA845X_write+0x4c>)
 8003ab0:	f7fd ff5e 	bl	8001970 <HAL_I2C_Master_Transmit>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d006      	beq.n	8003ac8 <MMA845X_write+0x40>
		HAL_UART_Transmit(&huart1, (uint8_t*)"Error of  write\r\n",17,1000);
 8003aba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003abe:	2211      	movs	r2, #17
 8003ac0:	4905      	ldr	r1, [pc, #20]	; (8003ad8 <MMA845X_write+0x50>)
 8003ac2:	4806      	ldr	r0, [pc, #24]	; (8003adc <MMA845X_write+0x54>)
 8003ac4:	f7ff fc3d 	bl	8003342 <HAL_UART_Transmit>
}
 8003ac8:	bf00      	nop
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000008 	.word	0x20000008
 8003ad4:	2000020c 	.word	0x2000020c
 8003ad8:	08007e00 	.word	0x08007e00
 8003adc:	20000264 	.word	0x20000264

08003ae0 <MMA845X_read>:

uint8_t MMA845X_read(uint8_t param_addr)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af02      	add	r7, sp, #8
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)slave_address,(uint8_t *)&param_addr, 1, 100)==HAL_OK)
 8003aea:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <MMA845X_read+0x8c>)
 8003aec:	8819      	ldrh	r1, [r3, #0]
 8003aee:	1dfa      	adds	r2, r7, #7
 8003af0:	2364      	movs	r3, #100	; 0x64
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	2301      	movs	r3, #1
 8003af6:	481e      	ldr	r0, [pc, #120]	; (8003b70 <MMA845X_read+0x90>)
 8003af8:	f7fd ff3a 	bl	8001970 <HAL_I2C_Master_Transmit>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d127      	bne.n	8003b52 <MMA845X_read+0x72>
	{
		if(HAL_I2C_IsDeviceReady(&hi2c1,(uint16_t)slave_address,1,100)==HAL_OK)
 8003b02:	4b1a      	ldr	r3, [pc, #104]	; (8003b6c <MMA845X_read+0x8c>)
 8003b04:	8819      	ldrh	r1, [r3, #0]
 8003b06:	2364      	movs	r3, #100	; 0x64
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4819      	ldr	r0, [pc, #100]	; (8003b70 <MMA845X_read+0x90>)
 8003b0c:	f7fe fa54 	bl	8001fb8 <HAL_I2C_IsDeviceReady>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d115      	bne.n	8003b42 <MMA845X_read+0x62>
		{
			if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)slave_address,(uint8_t *)&Data, 1, 1000)!=HAL_OK)HAL_UART_Transmit(&huart1, (uint8_t*)"Error of read\r\n",17,1000);;
 8003b16:	4b15      	ldr	r3, [pc, #84]	; (8003b6c <MMA845X_read+0x8c>)
 8003b18:	8819      	ldrh	r1, [r3, #0]
 8003b1a:	f107 020f 	add.w	r2, r7, #15
 8003b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2301      	movs	r3, #1
 8003b26:	4812      	ldr	r0, [pc, #72]	; (8003b70 <MMA845X_read+0x90>)
 8003b28:	f7fe f820 	bl	8001b6c <HAL_I2C_Master_Receive>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <MMA845X_read+0x80>
 8003b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b36:	2211      	movs	r2, #17
 8003b38:	490e      	ldr	r1, [pc, #56]	; (8003b74 <MMA845X_read+0x94>)
 8003b3a:	480f      	ldr	r0, [pc, #60]	; (8003b78 <MMA845X_read+0x98>)
 8003b3c:	f7ff fc01 	bl	8003342 <HAL_UART_Transmit>
 8003b40:	e00e      	b.n	8003b60 <MMA845X_read+0x80>
		}
		else HAL_UART_Transmit(&huart1, (uint8_t*)"Error of state\r\n",17,1000);
 8003b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b46:	2211      	movs	r2, #17
 8003b48:	490c      	ldr	r1, [pc, #48]	; (8003b7c <MMA845X_read+0x9c>)
 8003b4a:	480b      	ldr	r0, [pc, #44]	; (8003b78 <MMA845X_read+0x98>)
 8003b4c:	f7ff fbf9 	bl	8003342 <HAL_UART_Transmit>
 8003b50:	e006      	b.n	8003b60 <MMA845X_read+0x80>
	}
	else HAL_UART_Transmit(&huart1, (uint8_t*)"Error of  write read\r\n",22,1000);
 8003b52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b56:	2216      	movs	r2, #22
 8003b58:	4909      	ldr	r1, [pc, #36]	; (8003b80 <MMA845X_read+0xa0>)
 8003b5a:	4807      	ldr	r0, [pc, #28]	; (8003b78 <MMA845X_read+0x98>)
 8003b5c:	f7ff fbf1 	bl	8003342 <HAL_UART_Transmit>
	return Data;
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000008 	.word	0x20000008
 8003b70:	2000020c 	.word	0x2000020c
 8003b74:	08007e14 	.word	0x08007e14
 8003b78:	20000264 	.word	0x20000264
 8003b7c:	08007e24 	.word	0x08007e24
 8003b80:	08007e38 	.word	0x08007e38

08003b84 <MMA845X_active>:

void MMA845X_active()
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af02      	add	r7, sp, #8
	uint8_t Data;
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)slave_address,MMA_845XQ_CTRL_REG1, 1, 1000)==HAL_OK)
 8003b8a:	4b29      	ldr	r3, [pc, #164]	; (8003c30 <MMA845X_active+0xac>)
 8003b8c:	8819      	ldrh	r1, [r3, #0]
 8003b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	2301      	movs	r3, #1
 8003b96:	222a      	movs	r2, #42	; 0x2a
 8003b98:	4826      	ldr	r0, [pc, #152]	; (8003c34 <MMA845X_active+0xb0>)
 8003b9a:	f7fd fee9 	bl	8001970 <HAL_I2C_Master_Transmit>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d127      	bne.n	8003bf4 <MMA845X_active+0x70>
		{
			if(HAL_I2C_IsDeviceReady(&hi2c1,(uint16_t)slave_address,1,1000)==HAL_OK)
 8003ba4:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <MMA845X_active+0xac>)
 8003ba6:	8819      	ldrh	r1, [r3, #0]
 8003ba8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bac:	2201      	movs	r2, #1
 8003bae:	4821      	ldr	r0, [pc, #132]	; (8003c34 <MMA845X_active+0xb0>)
 8003bb0:	f7fe fa02 	bl	8001fb8 <HAL_I2C_IsDeviceReady>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d114      	bne.n	8003be4 <MMA845X_active+0x60>
			{
				if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)slave_address,(uint8_t *)&Data, 1, 1000)!=HAL_OK)HAL_UART_Transmit(&huart1, (uint8_t*)"Error of read\r\n",17,1000);;
 8003bba:	4b1d      	ldr	r3, [pc, #116]	; (8003c30 <MMA845X_active+0xac>)
 8003bbc:	8819      	ldrh	r1, [r3, #0]
 8003bbe:	1dba      	adds	r2, r7, #6
 8003bc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	481a      	ldr	r0, [pc, #104]	; (8003c34 <MMA845X_active+0xb0>)
 8003bca:	f7fd ffcf 	bl	8001b6c <HAL_I2C_Master_Receive>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d016      	beq.n	8003c02 <MMA845X_active+0x7e>
 8003bd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bd8:	2211      	movs	r2, #17
 8003bda:	4917      	ldr	r1, [pc, #92]	; (8003c38 <MMA845X_active+0xb4>)
 8003bdc:	4817      	ldr	r0, [pc, #92]	; (8003c3c <MMA845X_active+0xb8>)
 8003bde:	f7ff fbb0 	bl	8003342 <HAL_UART_Transmit>
 8003be2:	e00e      	b.n	8003c02 <MMA845X_active+0x7e>
			}
			else HAL_UART_Transmit(&huart1, (uint8_t*)"Error of state\r\n",17,1000);
 8003be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be8:	2211      	movs	r2, #17
 8003bea:	4915      	ldr	r1, [pc, #84]	; (8003c40 <MMA845X_active+0xbc>)
 8003bec:	4813      	ldr	r0, [pc, #76]	; (8003c3c <MMA845X_active+0xb8>)
 8003bee:	f7ff fba8 	bl	8003342 <HAL_UART_Transmit>
 8003bf2:	e006      	b.n	8003c02 <MMA845X_active+0x7e>
		}
		else HAL_UART_Transmit(&huart1, (uint8_t*)"Error of  write\r\n",17,1000);
 8003bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bf8:	2211      	movs	r2, #17
 8003bfa:	4912      	ldr	r1, [pc, #72]	; (8003c44 <MMA845X_active+0xc0>)
 8003bfc:	480f      	ldr	r0, [pc, #60]	; (8003c3c <MMA845X_active+0xb8>)
 8003bfe:	f7ff fba0 	bl	8003342 <HAL_UART_Transmit>
	uint8_t _highres = 1;
 8003c02:	2301      	movs	r3, #1
 8003c04:	71fb      	strb	r3, [r7, #7]
	MMA845X_write(MMA_845XQ_CTRL_REG1,Data|MMA_845XQ_CTRL_REG1_VALUE_ACTIVE|(_highres ? 0 : MMA_845XQ_CTRL_REG1_VALUE_F_READ) | 0x38);
 8003c06:	79fb      	ldrb	r3, [r7, #7]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MMA845X_active+0x8c>
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	e000      	b.n	8003c12 <MMA845X_active+0x8e>
 8003c10:	2202      	movs	r2, #2
 8003c12:	79bb      	ldrb	r3, [r7, #6]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	f043 0339 	orr.w	r3, r3, #57	; 0x39
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	4619      	mov	r1, r3
 8003c20:	202a      	movs	r0, #42	; 0x2a
 8003c22:	f7ff ff31 	bl	8003a88 <MMA845X_write>

}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000008 	.word	0x20000008
 8003c34:	2000020c 	.word	0x2000020c
 8003c38:	08007e14 	.word	0x08007e14
 8003c3c:	20000264 	.word	0x20000264
 8003c40:	08007e24 	.word	0x08007e24
 8003c44:	08007e00 	.word	0x08007e00

08003c48 <MMA845x_begin>:
		MMA845X_write(MMA_845XQ_CTRL_REG1,Data & ~MMA_845XQ_CTRL_REG1_VALUE_ACTIVE);
}


void MMA845x_begin(_Bool k, uint8_t a)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	460a      	mov	r2, r1
 8003c52:	71fb      	strb	r3, [r7, #7]
 8003c54:	4613      	mov	r3, r2
 8003c56:	71bb      	strb	r3, [r7, #6]
 scale=a;
 8003c58:	4a2c      	ldr	r2, [pc, #176]	; (8003d0c <MMA845x_begin+0xc4>)
 8003c5a:	79bb      	ldrb	r3, [r7, #6]
 8003c5c:	7013      	strb	r3, [r2, #0]
 _highres=k;
 8003c5e:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <MMA845x_begin+0xc8>)
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	7013      	strb	r3, [r2, #0]
 step_factor = (_highres ? 0.0039 : 0.0156);
 8003c64:	4b2a      	ldr	r3, [pc, #168]	; (8003d10 <MMA845x_begin+0xc8>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MMA845x_begin+0x28>
 8003c6c:	4b29      	ldr	r3, [pc, #164]	; (8003d14 <MMA845x_begin+0xcc>)
 8003c6e:	e000      	b.n	8003c72 <MMA845x_begin+0x2a>
 8003c70:	4b29      	ldr	r3, [pc, #164]	; (8003d18 <MMA845x_begin+0xd0>)
 8003c72:	4a2a      	ldr	r2, [pc, #168]	; (8003d1c <MMA845x_begin+0xd4>)
 8003c74:	6013      	str	r3, [r2, #0]
 if(scale==4) step_factor*=2;
 8003c76:	4b25      	ldr	r3, [pc, #148]	; (8003d0c <MMA845x_begin+0xc4>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b04      	cmp	r3, #4
 8003c7c:	d10a      	bne.n	8003c94 <MMA845x_begin+0x4c>
 8003c7e:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <MMA845x_begin+0xd4>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4619      	mov	r1, r3
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fc ff8d 	bl	8000ba4 <__addsf3>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <MMA845x_begin+0xd4>)
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	e00e      	b.n	8003cb2 <MMA845x_begin+0x6a>
 else if (scale==8) step_factor*=4;
 8003c94:	4b1d      	ldr	r3, [pc, #116]	; (8003d0c <MMA845x_begin+0xc4>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d10a      	bne.n	8003cb2 <MMA845x_begin+0x6a>
 8003c9c:	4b1f      	ldr	r3, [pc, #124]	; (8003d1c <MMA845x_begin+0xd4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fd f885 	bl	8000db4 <__aeabi_fmul>
 8003caa:	4603      	mov	r3, r0
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b1b      	ldr	r3, [pc, #108]	; (8003d1c <MMA845x_begin+0xd4>)
 8003cb0:	601a      	str	r2, [r3, #0]
 MMA845X_read(0x0D);
 8003cb2:	200d      	movs	r0, #13
 8003cb4:	f7ff ff14 	bl	8003ae0 <MMA845X_read>
 MMA845X_write(MMA_845XQ_CTRL_REG2,MMA_845XQ_CTRL_REG2_RESET);
 8003cb8:	2140      	movs	r1, #64	; 0x40
 8003cba:	202b      	movs	r0, #43	; 0x2b
 8003cbc:	f7ff fee4 	bl	8003a88 <MMA845X_write>
 HAL_Delay(10);
 8003cc0:	200a      	movs	r0, #10
 8003cc2:	f7fd fa35 	bl	8001130 <HAL_Delay>
 MMA845X_write(MMA_845XQ_PL_CFG,0x80 | MMA_845XQ_PL_EN);
 8003cc6:	21c0      	movs	r1, #192	; 0xc0
 8003cc8:	2011      	movs	r0, #17
 8003cca:	f7ff fedd 	bl	8003a88 <MMA845X_write>
 if(scale==4 || scale==8)
 8003cce:	4b0f      	ldr	r3, [pc, #60]	; (8003d0c <MMA845x_begin+0xc4>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d003      	beq.n	8003cde <MMA845x_begin+0x96>
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <MMA845x_begin+0xc4>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b08      	cmp	r3, #8
 8003cdc:	d10b      	bne.n	8003cf6 <MMA845x_begin+0xae>
	 MMA845X_write(MMA_845XQ_XYZ_DATA_CFG,(scale==4)?MMA_845XQ_4G_MODE:MMA_845XQ_8G_MODE);
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <MMA845x_begin+0xc4>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d101      	bne.n	8003cea <MMA845x_begin+0xa2>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <MMA845x_begin+0xa4>
 8003cea:	2302      	movs	r3, #2
 8003cec:	4619      	mov	r1, r3
 8003cee:	200e      	movs	r0, #14
 8003cf0:	f7ff feca 	bl	8003a88 <MMA845X_write>
 8003cf4:	e003      	b.n	8003cfe <MMA845x_begin+0xb6>
 else
	 MMA845X_write(MMA_845XQ_XYZ_DATA_CFG,(uint8_t)MMA_845XQ_2G_MODE);
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	200e      	movs	r0, #14
 8003cfa:	f7ff fec5 	bl	8003a88 <MMA845X_write>
 MMA845X_active();
 8003cfe:	f7ff ff41 	bl	8003b84 <MMA845X_active>
}
 8003d02:	bf00      	nop
 8003d04:	3708      	adds	r7, #8
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200002b4 	.word	0x200002b4
 8003d10:	200002ac 	.word	0x200002ac
 8003d14:	3b7f9724 	.word	0x3b7f9724
 8003d18:	3c7f9724 	.word	0x3c7f9724
 8003d1c:	200002b0 	.word	0x200002b0

08003d20 <MMA845x_getdata>:

void MMA845x_getdata()
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af02      	add	r7, sp, #8
	uint8_t status;
	int16_t rx,ry,rz;
	rx=ry=rz=0;
 8003d26:	2300      	movs	r3, #0
 8003d28:	81fb      	strh	r3, [r7, #14]
 8003d2a:	89fb      	ldrh	r3, [r7, #14]
 8003d2c:	81bb      	strh	r3, [r7, #12]
 8003d2e:	89bb      	ldrh	r3, [r7, #12]
 8003d30:	817b      	strh	r3, [r7, #10]
	xg=yg=zg=0;
 8003d32:	4b75      	ldr	r3, [pc, #468]	; (8003f08 <MMA845x_getdata+0x1e8>)
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	4b73      	ldr	r3, [pc, #460]	; (8003f08 <MMA845x_getdata+0x1e8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a73      	ldr	r2, [pc, #460]	; (8003f0c <MMA845x_getdata+0x1ec>)
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	4b72      	ldr	r3, [pc, #456]	; (8003f0c <MMA845x_getdata+0x1ec>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a72      	ldr	r2, [pc, #456]	; (8003f10 <MMA845x_getdata+0x1f0>)
 8003d48:	6013      	str	r3, [r2, #0]
	uint8_t buffer[7];
	if(HAL_I2C_Master_Transmit(&hi2c1,(uint16_t)slave_address,0x00, 1, 100)==HAL_OK)
 8003d4a:	4b72      	ldr	r3, [pc, #456]	; (8003f14 <MMA845x_getdata+0x1f4>)
 8003d4c:	8819      	ldrh	r1, [r3, #0]
 8003d4e:	2364      	movs	r3, #100	; 0x64
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	2301      	movs	r3, #1
 8003d54:	2200      	movs	r2, #0
 8003d56:	4870      	ldr	r0, [pc, #448]	; (8003f18 <MMA845x_getdata+0x1f8>)
 8003d58:	f7fd fe0a 	bl	8001970 <HAL_I2C_Master_Transmit>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f040 80c7 	bne.w	8003ef2 <MMA845x_getdata+0x1d2>
			{
				if(HAL_I2C_IsDeviceReady(&hi2c1,(uint16_t)slave_address,1,100)==HAL_OK)
 8003d64:	4b6b      	ldr	r3, [pc, #428]	; (8003f14 <MMA845x_getdata+0x1f4>)
 8003d66:	8819      	ldrh	r1, [r3, #0]
 8003d68:	2364      	movs	r3, #100	; 0x64
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	486a      	ldr	r0, [pc, #424]	; (8003f18 <MMA845x_getdata+0x1f8>)
 8003d6e:	f7fe f923 	bl	8001fb8 <HAL_I2C_IsDeviceReady>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f040 80b4 	bne.w	8003ee2 <MMA845x_getdata+0x1c2>
					//	{}
						//if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)slave_address,(uint8_t *)&status, 1, 1000)!=HAL_OK)HAL_UART_Transmit(&huart1, (uint8_t*)"Error of read\r\n",17,100);
								//			else
										//	{

												if(_highres)
 8003d7a:	4b68      	ldr	r3, [pc, #416]	; (8003f1c <MMA845x_getdata+0x1fc>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d066      	beq.n	8003e50 <MMA845x_getdata+0x130>
												{
													HAL_I2C_Master_Receive(&hi2c1, (uint16_t)slave_address,(uint8_t *)&buffer, (uint8_t)(_highres ? 7 : 4), 100);
 8003d82:	4b64      	ldr	r3, [pc, #400]	; (8003f14 <MMA845x_getdata+0x1f4>)
 8003d84:	8819      	ldrh	r1, [r3, #0]
 8003d86:	4b65      	ldr	r3, [pc, #404]	; (8003f1c <MMA845x_getdata+0x1fc>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <MMA845x_getdata+0x72>
 8003d8e:	2007      	movs	r0, #7
 8003d90:	e000      	b.n	8003d94 <MMA845x_getdata+0x74>
 8003d92:	2004      	movs	r0, #4
 8003d94:	463a      	mov	r2, r7
 8003d96:	2364      	movs	r3, #100	; 0x64
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	485e      	ldr	r0, [pc, #376]	; (8003f18 <MMA845x_getdata+0x1f8>)
 8003d9e:	f7fd fee5 	bl	8001b6c <HAL_I2C_Master_Receive>
													status = buffer[0];
 8003da2:	783b      	ldrb	r3, [r7, #0]
 8003da4:	727b      	strb	r3, [r7, #9]
													rx=(buffer[1]<<8|buffer[2]);
 8003da6:	787b      	ldrb	r3, [r7, #1]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	b21a      	sxth	r2, r3
 8003dac:	78bb      	ldrb	r3, [r7, #2]
 8003dae:	b21b      	sxth	r3, r3
 8003db0:	4313      	orrs	r3, r2
 8003db2:	817b      	strh	r3, [r7, #10]
													ry=(buffer[3]<<8|buffer[4]);
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	021b      	lsls	r3, r3, #8
 8003db8:	b21a      	sxth	r2, r3
 8003dba:	793b      	ldrb	r3, [r7, #4]
 8003dbc:	b21b      	sxth	r3, r3
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	81bb      	strh	r3, [r7, #12]
													rz=(buffer[5]<<8|buffer[6]);
 8003dc2:	797b      	ldrb	r3, [r7, #5]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	b21a      	sxth	r2, r3
 8003dc8:	79bb      	ldrb	r3, [r7, #6]
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	81fb      	strh	r3, [r7, #14]
													xg=(rx/64)*step_factor;
 8003dd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	da00      	bge.n	8003dda <MMA845x_getdata+0xba>
 8003dd8:	333f      	adds	r3, #63	; 0x3f
 8003dda:	119b      	asrs	r3, r3, #6
 8003ddc:	b21b      	sxth	r3, r3
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc ff94 	bl	8000d0c <__aeabi_i2f>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b4e      	ldr	r3, [pc, #312]	; (8003f20 <MMA845x_getdata+0x200>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4619      	mov	r1, r3
 8003dec:	4610      	mov	r0, r2
 8003dee:	f7fc ffe1 	bl	8000db4 <__aeabi_fmul>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <MMA845x_getdata+0x1f0>)
 8003df8:	601a      	str	r2, [r3, #0]
													yg=(ry/64)*step_factor;
 8003dfa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	da00      	bge.n	8003e04 <MMA845x_getdata+0xe4>
 8003e02:	333f      	adds	r3, #63	; 0x3f
 8003e04:	119b      	asrs	r3, r3, #6
 8003e06:	b21b      	sxth	r3, r3
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7fc ff7f 	bl	8000d0c <__aeabi_i2f>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <MMA845x_getdata+0x200>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4619      	mov	r1, r3
 8003e16:	4610      	mov	r0, r2
 8003e18:	f7fc ffcc 	bl	8000db4 <__aeabi_fmul>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4b3a      	ldr	r3, [pc, #232]	; (8003f0c <MMA845x_getdata+0x1ec>)
 8003e22:	601a      	str	r2, [r3, #0]
													zg=(rz/64)*step_factor;
 8003e24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	da00      	bge.n	8003e2e <MMA845x_getdata+0x10e>
 8003e2c:	333f      	adds	r3, #63	; 0x3f
 8003e2e:	119b      	asrs	r3, r3, #6
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc ff6a 	bl	8000d0c <__aeabi_i2f>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <MMA845x_getdata+0x200>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4610      	mov	r0, r2
 8003e42:	f7fc ffb7 	bl	8000db4 <__aeabi_fmul>
 8003e46:	4603      	mov	r3, r0
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4b2f      	ldr	r3, [pc, #188]	; (8003f08 <MMA845x_getdata+0x1e8>)
 8003e4c:	601a      	str	r2, [r3, #0]

				 }
				else HAL_UART_Transmit(&huart1, (uint8_t*)"Error of state\r\n",17,1000);
			}
	else HAL_UART_Transmit(&huart1, (uint8_t*)"Error of  write\r\n",17,1000);
}
 8003e4e:	e057      	b.n	8003f00 <MMA845x_getdata+0x1e0>
													HAL_I2C_Master_Receive(&hi2c1, (uint16_t)slave_address,(uint8_t *)&buffer[0], 1, 100);
 8003e50:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <MMA845x_getdata+0x1f4>)
 8003e52:	8819      	ldrh	r1, [r3, #0]
 8003e54:	463a      	mov	r2, r7
 8003e56:	2364      	movs	r3, #100	; 0x64
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	482e      	ldr	r0, [pc, #184]	; (8003f18 <MMA845x_getdata+0x1f8>)
 8003e5e:	f7fd fe85 	bl	8001b6c <HAL_I2C_Master_Receive>
													HAL_I2C_Master_Receive(&hi2c1, (uint16_t)slave_address,(uint8_t *)&buffer[0], 1, 100);
 8003e62:	4b2c      	ldr	r3, [pc, #176]	; (8003f14 <MMA845x_getdata+0x1f4>)
 8003e64:	8819      	ldrh	r1, [r3, #0]
 8003e66:	463a      	mov	r2, r7
 8003e68:	2364      	movs	r3, #100	; 0x64
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	482a      	ldr	r0, [pc, #168]	; (8003f18 <MMA845x_getdata+0x1f8>)
 8003e70:	f7fd fe7c 	bl	8001b6c <HAL_I2C_Master_Receive>
													HAL_I2C_Master_Receive(&hi2c1, (uint16_t)slave_address,(uint8_t *)&buffer[0], 1, 100);
 8003e74:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <MMA845x_getdata+0x1f4>)
 8003e76:	8819      	ldrh	r1, [r3, #0]
 8003e78:	463a      	mov	r2, r7
 8003e7a:	2364      	movs	r3, #100	; 0x64
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4825      	ldr	r0, [pc, #148]	; (8003f18 <MMA845x_getdata+0x1f8>)
 8003e82:	f7fd fe73 	bl	8001b6c <HAL_I2C_Master_Receive>
													xg=(float)buffer[0]*step_factor;
 8003e86:	783b      	ldrb	r3, [r7, #0]
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc ff3b 	bl	8000d04 <__aeabi_ui2f>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <MMA845x_getdata+0x200>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4619      	mov	r1, r3
 8003e96:	4610      	mov	r0, r2
 8003e98:	f7fc ff8c 	bl	8000db4 <__aeabi_fmul>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <MMA845x_getdata+0x1f0>)
 8003ea2:	601a      	str	r2, [r3, #0]
													yg=(float)buffer[0]*step_factor;
 8003ea4:	783b      	ldrb	r3, [r7, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fc ff2c 	bl	8000d04 <__aeabi_ui2f>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <MMA845x_getdata+0x200>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	4610      	mov	r0, r2
 8003eb6:	f7fc ff7d 	bl	8000db4 <__aeabi_fmul>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <MMA845x_getdata+0x1ec>)
 8003ec0:	601a      	str	r2, [r3, #0]
													zg=(float)buffer[0]*step_factor;
 8003ec2:	783b      	ldrb	r3, [r7, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7fc ff1d 	bl	8000d04 <__aeabi_ui2f>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	4b14      	ldr	r3, [pc, #80]	; (8003f20 <MMA845x_getdata+0x200>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	f7fc ff6e 	bl	8000db4 <__aeabi_fmul>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	461a      	mov	r2, r3
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <MMA845x_getdata+0x1e8>)
 8003ede:	601a      	str	r2, [r3, #0]
}
 8003ee0:	e00e      	b.n	8003f00 <MMA845x_getdata+0x1e0>
				else HAL_UART_Transmit(&huart1, (uint8_t*)"Error of state\r\n",17,1000);
 8003ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ee6:	2211      	movs	r2, #17
 8003ee8:	490e      	ldr	r1, [pc, #56]	; (8003f24 <MMA845x_getdata+0x204>)
 8003eea:	480f      	ldr	r0, [pc, #60]	; (8003f28 <MMA845x_getdata+0x208>)
 8003eec:	f7ff fa29 	bl	8003342 <HAL_UART_Transmit>
}
 8003ef0:	e006      	b.n	8003f00 <MMA845x_getdata+0x1e0>
	else HAL_UART_Transmit(&huart1, (uint8_t*)"Error of  write\r\n",17,1000);
 8003ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ef6:	2211      	movs	r2, #17
 8003ef8:	490c      	ldr	r1, [pc, #48]	; (8003f2c <MMA845x_getdata+0x20c>)
 8003efa:	480b      	ldr	r0, [pc, #44]	; (8003f28 <MMA845x_getdata+0x208>)
 8003efc:	f7ff fa21 	bl	8003342 <HAL_UART_Transmit>
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000260 	.word	0x20000260
 8003f0c:	200002a4 	.word	0x200002a4
 8003f10:	200002a8 	.word	0x200002a8
 8003f14:	20000008 	.word	0x20000008
 8003f18:	2000020c 	.word	0x2000020c
 8003f1c:	200002ac 	.word	0x200002ac
 8003f20:	200002b0 	.word	0x200002b0
 8003f24:	08007e24 	.word	0x08007e24
 8003f28:	20000264 	.word	0x20000264
 8003f2c:	08007e00 	.word	0x08007e00

08003f30 <MMA845X_sendData>:
  MMA845X_write(0x2D,0x00);
  return 0;
}

void MMA845X_sendData()
{
 8003f30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003f34:	b092      	sub	sp, #72	; 0x48
 8003f36:	af0a      	add	r7, sp, #40	; 0x28
	char hui[27];
	sprintf(hui, "%f%c%f%c%f%c",xg,';',yg,';',zg,';');
 8003f38:	4b1e      	ldr	r3, [pc, #120]	; (8003fb4 <MMA845X_sendData+0x84>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fc fa8b 	bl	8000458 <__aeabi_f2d>
 8003f42:	4680      	mov	r8, r0
 8003f44:	4689      	mov	r9, r1
 8003f46:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <MMA845X_sendData+0x88>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc fa84 	bl	8000458 <__aeabi_f2d>
 8003f50:	4604      	mov	r4, r0
 8003f52:	460d      	mov	r5, r1
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <MMA845X_sendData+0x8c>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f7fc fa7d 	bl	8000458 <__aeabi_f2d>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	1d38      	adds	r0, r7, #4
 8003f64:	213b      	movs	r1, #59	; 0x3b
 8003f66:	9108      	str	r1, [sp, #32]
 8003f68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003f6c:	233b      	movs	r3, #59	; 0x3b
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003f74:	233b      	movs	r3, #59	; 0x3b
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	4910      	ldr	r1, [pc, #64]	; (8003fc0 <MMA845X_sendData+0x90>)
 8003f7e:	f000 fffb 	bl	8004f78 <siprintf>
	HAL_UART_Transmit(&huart1,(uint8_t*)&hui,27,1000);
 8003f82:	1d39      	adds	r1, r7, #4
 8003f84:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f88:	221b      	movs	r2, #27
 8003f8a:	480e      	ldr	r0, [pc, #56]	; (8003fc4 <MMA845X_sendData+0x94>)
 8003f8c:	f7ff f9d9 	bl	8003342 <HAL_UART_Transmit>
	xg=0;
 8003f90:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <MMA845X_sendData+0x84>)
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	601a      	str	r2, [r3, #0]
	yg=0;
 8003f98:	4b07      	ldr	r3, [pc, #28]	; (8003fb8 <MMA845X_sendData+0x88>)
 8003f9a:	f04f 0200 	mov.w	r2, #0
 8003f9e:	601a      	str	r2, [r3, #0]
	zg=0;
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <MMA845X_sendData+0x8c>)
 8003fa2:	f04f 0200 	mov.w	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003fb2:	bf00      	nop
 8003fb4:	200002a8 	.word	0x200002a8
 8003fb8:	200002a4 	.word	0x200002a4
 8003fbc:	20000260 	.word	0x20000260
 8003fc0:	08007e50 	.word	0x08007e50
 8003fc4:	20000264 	.word	0x20000264

08003fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8003fce:	4b14      	ldr	r3, [pc, #80]	; (8004020 <HAL_MspInit+0x58>)
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	4a13      	ldr	r2, [pc, #76]	; (8004020 <HAL_MspInit+0x58>)
 8003fd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fd8:	6253      	str	r3, [r2, #36]	; 0x24
 8003fda:	4b11      	ldr	r3, [pc, #68]	; (8004020 <HAL_MspInit+0x58>)
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	; (8004020 <HAL_MspInit+0x58>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4a0d      	ldr	r2, [pc, #52]	; (8004020 <HAL_MspInit+0x58>)
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	6213      	str	r3, [r2, #32]
 8003ff2:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <HAL_MspInit+0x58>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	60bb      	str	r3, [r7, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ffe:	4b08      	ldr	r3, [pc, #32]	; (8004020 <HAL_MspInit+0x58>)
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	4a07      	ldr	r2, [pc, #28]	; (8004020 <HAL_MspInit+0x58>)
 8004004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004008:	6253      	str	r3, [r2, #36]	; 0x24
 800400a:	4b05      	ldr	r3, [pc, #20]	; (8004020 <HAL_MspInit+0x58>)
 800400c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004012:	607b      	str	r3, [r7, #4]
 8004014:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004016:	bf00      	nop
 8004018:	3714      	adds	r7, #20
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40023800 	.word	0x40023800

08004024 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	; 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0314 	add.w	r3, r7, #20
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a17      	ldr	r2, [pc, #92]	; (80040a0 <HAL_I2C_MspInit+0x7c>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d127      	bne.n	8004096 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004046:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <HAL_I2C_MspInit+0x80>)
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <HAL_I2C_MspInit+0x80>)
 800404c:	f043 0302 	orr.w	r3, r3, #2
 8004050:	61d3      	str	r3, [r2, #28]
 8004052:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <HAL_I2C_MspInit+0x80>)
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800405e:	23c0      	movs	r3, #192	; 0xc0
 8004060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004062:	2312      	movs	r3, #18
 8004064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004066:	2301      	movs	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800406a:	2303      	movs	r3, #3
 800406c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800406e:	2304      	movs	r3, #4
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004072:	f107 0314 	add.w	r3, r7, #20
 8004076:	4619      	mov	r1, r3
 8004078:	480b      	ldr	r0, [pc, #44]	; (80040a8 <HAL_I2C_MspInit+0x84>)
 800407a:	f7fd f989 	bl	8001390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_I2C_MspInit+0x80>)
 8004080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004082:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <HAL_I2C_MspInit+0x80>)
 8004084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004088:	6253      	str	r3, [r2, #36]	; 0x24
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_I2C_MspInit+0x80>)
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004096:	bf00      	nop
 8004098:	3728      	adds	r7, #40	; 0x28
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40005400 	.word	0x40005400
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40020400 	.word	0x40020400

080040ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b4:	f107 0314 	add.w	r3, r7, #20
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_UART_MspInit+0x7c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d128      	bne.n	8004120 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040ce:	4b17      	ldr	r3, [pc, #92]	; (800412c <HAL_UART_MspInit+0x80>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	4a16      	ldr	r2, [pc, #88]	; (800412c <HAL_UART_MspInit+0x80>)
 80040d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040d8:	6213      	str	r3, [r2, #32]
 80040da:	4b14      	ldr	r3, [pc, #80]	; (800412c <HAL_UART_MspInit+0x80>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e6:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_UART_MspInit+0x80>)
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	4a10      	ldr	r2, [pc, #64]	; (800412c <HAL_UART_MspInit+0x80>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	61d3      	str	r3, [r2, #28]
 80040f2:	4b0e      	ldr	r3, [pc, #56]	; (800412c <HAL_UART_MspInit+0x80>)
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80040fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004104:	2302      	movs	r3, #2
 8004106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004108:	2301      	movs	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800410c:	2303      	movs	r3, #3
 800410e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004110:	2307      	movs	r3, #7
 8004112:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004114:	f107 0314 	add.w	r3, r7, #20
 8004118:	4619      	mov	r1, r3
 800411a:	4805      	ldr	r0, [pc, #20]	; (8004130 <HAL_UART_MspInit+0x84>)
 800411c:	f7fd f938 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004120:	bf00      	nop
 8004122:	3728      	adds	r7, #40	; 0x28
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40013800 	.word	0x40013800
 800412c:	40023800 	.word	0x40023800
 8004130:	40020000 	.word	0x40020000

08004134 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	bc80      	pop	{r7}
 800413e:	4770      	bx	lr

08004140 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004144:	e7fe      	b.n	8004144 <HardFault_Handler+0x4>

08004146 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004146:	b480      	push	{r7}
 8004148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800414a:	e7fe      	b.n	800414a <MemManage_Handler+0x4>

0800414c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800414c:	b480      	push	{r7}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004150:	e7fe      	b.n	8004150 <BusFault_Handler+0x4>

08004152 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004156:	e7fe      	b.n	8004156 <UsageFault_Handler+0x4>

08004158 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004164:	b480      	push	{r7}
 8004166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr

08004170 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004174:	bf00      	nop
 8004176:	46bd      	mov	sp, r7
 8004178:	bc80      	pop	{r7}
 800417a:	4770      	bx	lr

0800417c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004180:	f7fc ffba 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004184:	bf00      	nop
 8004186:	bd80      	pop	{r7, pc}

08004188 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800418c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004190:	f7fd faa4 	bl	80016dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004194:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004198:	f7fd faa0 	bl	80016dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80041a8:	4b11      	ldr	r3, [pc, #68]	; (80041f0 <_sbrk+0x50>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <_sbrk+0x16>
		heap_end = &end;
 80041b0:	4b0f      	ldr	r3, [pc, #60]	; (80041f0 <_sbrk+0x50>)
 80041b2:	4a10      	ldr	r2, [pc, #64]	; (80041f4 <_sbrk+0x54>)
 80041b4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80041b6:	4b0e      	ldr	r3, [pc, #56]	; (80041f0 <_sbrk+0x50>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80041bc:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <_sbrk+0x50>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4413      	add	r3, r2
 80041c4:	466a      	mov	r2, sp
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d907      	bls.n	80041da <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80041ca:	f000 f86f 	bl	80042ac <__errno>
 80041ce:	4602      	mov	r2, r0
 80041d0:	230c      	movs	r3, #12
 80041d2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80041d4:	f04f 33ff 	mov.w	r3, #4294967295
 80041d8:	e006      	b.n	80041e8 <_sbrk+0x48>
	}

	heap_end += incr;
 80041da:	4b05      	ldr	r3, [pc, #20]	; (80041f0 <_sbrk+0x50>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	4a03      	ldr	r2, [pc, #12]	; (80041f0 <_sbrk+0x50>)
 80041e4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	200001fc 	.word	0x200001fc
 80041f4:	200002c0 	.word	0x200002c0

080041f8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80041fc:	4b15      	ldr	r3, [pc, #84]	; (8004254 <SystemInit+0x5c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a14      	ldr	r2, [pc, #80]	; (8004254 <SystemInit+0x5c>)
 8004202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004206:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <SystemInit+0x5c>)
 800420a:	689a      	ldr	r2, [r3, #8]
 800420c:	4911      	ldr	r1, [pc, #68]	; (8004254 <SystemInit+0x5c>)
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <SystemInit+0x60>)
 8004210:	4013      	ands	r3, r2
 8004212:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <SystemInit+0x5c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <SystemInit+0x5c>)
 800421a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800421e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8004222:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <SystemInit+0x5c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <SystemInit+0x5c>)
 800422a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800422e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8004230:	4b08      	ldr	r3, [pc, #32]	; (8004254 <SystemInit+0x5c>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a07      	ldr	r2, [pc, #28]	; (8004254 <SystemInit+0x5c>)
 8004236:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800423a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <SystemInit+0x5c>)
 800423e:	2200      	movs	r2, #0
 8004240:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004242:	4b06      	ldr	r3, [pc, #24]	; (800425c <SystemInit+0x64>)
 8004244:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004248:	609a      	str	r2, [r3, #8]
#endif
}
 800424a:	bf00      	nop
 800424c:	46bd      	mov	sp, r7
 800424e:	bc80      	pop	{r7}
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
 8004258:	88ffc00c 	.word	0x88ffc00c
 800425c:	e000ed00 	.word	0xe000ed00

08004260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004260:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004262:	e003      	b.n	800426c <LoopCopyDataInit>

08004264 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004264:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004266:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004268:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800426a:	3104      	adds	r1, #4

0800426c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800426c:	480a      	ldr	r0, [pc, #40]	; (8004298 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800426e:	4b0b      	ldr	r3, [pc, #44]	; (800429c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004270:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004272:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004274:	d3f6      	bcc.n	8004264 <CopyDataInit>
  ldr r2, =_sbss
 8004276:	4a0a      	ldr	r2, [pc, #40]	; (80042a0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004278:	e002      	b.n	8004280 <LoopFillZerobss>

0800427a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800427a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800427c:	f842 3b04 	str.w	r3, [r2], #4

08004280 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004280:	4b08      	ldr	r3, [pc, #32]	; (80042a4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004282:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004284:	d3f9      	bcc.n	800427a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004286:	f7ff ffb7 	bl	80041f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800428a:	f000 f815 	bl	80042b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800428e:	f7ff fac3 	bl	8003818 <main>
  bx lr
 8004292:	4770      	bx	lr
  ldr r3, =_sidata
 8004294:	08008140 	.word	0x08008140
  ldr r0, =_sdata
 8004298:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800429c:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80042a0:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80042a4:	200002bc 	.word	0x200002bc

080042a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80042a8:	e7fe      	b.n	80042a8 <ADC1_IRQHandler>
	...

080042ac <__errno>:
 80042ac:	4b01      	ldr	r3, [pc, #4]	; (80042b4 <__errno+0x8>)
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	20000010 	.word	0x20000010

080042b8 <__libc_init_array>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	2500      	movs	r5, #0
 80042bc:	4e0c      	ldr	r6, [pc, #48]	; (80042f0 <__libc_init_array+0x38>)
 80042be:	4c0d      	ldr	r4, [pc, #52]	; (80042f4 <__libc_init_array+0x3c>)
 80042c0:	1ba4      	subs	r4, r4, r6
 80042c2:	10a4      	asrs	r4, r4, #2
 80042c4:	42a5      	cmp	r5, r4
 80042c6:	d109      	bne.n	80042dc <__libc_init_array+0x24>
 80042c8:	f003 fd60 	bl	8007d8c <_init>
 80042cc:	2500      	movs	r5, #0
 80042ce:	4e0a      	ldr	r6, [pc, #40]	; (80042f8 <__libc_init_array+0x40>)
 80042d0:	4c0a      	ldr	r4, [pc, #40]	; (80042fc <__libc_init_array+0x44>)
 80042d2:	1ba4      	subs	r4, r4, r6
 80042d4:	10a4      	asrs	r4, r4, #2
 80042d6:	42a5      	cmp	r5, r4
 80042d8:	d105      	bne.n	80042e6 <__libc_init_array+0x2e>
 80042da:	bd70      	pop	{r4, r5, r6, pc}
 80042dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042e0:	4798      	blx	r3
 80042e2:	3501      	adds	r5, #1
 80042e4:	e7ee      	b.n	80042c4 <__libc_init_array+0xc>
 80042e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042ea:	4798      	blx	r3
 80042ec:	3501      	adds	r5, #1
 80042ee:	e7f2      	b.n	80042d6 <__libc_init_array+0x1e>
 80042f0:	08008138 	.word	0x08008138
 80042f4:	08008138 	.word	0x08008138
 80042f8:	08008138 	.word	0x08008138
 80042fc:	0800813c 	.word	0x0800813c

08004300 <memset>:
 8004300:	4603      	mov	r3, r0
 8004302:	4402      	add	r2, r0
 8004304:	4293      	cmp	r3, r2
 8004306:	d100      	bne.n	800430a <memset+0xa>
 8004308:	4770      	bx	lr
 800430a:	f803 1b01 	strb.w	r1, [r3], #1
 800430e:	e7f9      	b.n	8004304 <memset+0x4>

08004310 <__cvt>:
 8004310:	2b00      	cmp	r3, #0
 8004312:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004316:	461e      	mov	r6, r3
 8004318:	bfbb      	ittet	lt
 800431a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800431e:	461e      	movlt	r6, r3
 8004320:	2300      	movge	r3, #0
 8004322:	232d      	movlt	r3, #45	; 0x2d
 8004324:	b088      	sub	sp, #32
 8004326:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004328:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800432c:	f027 0720 	bic.w	r7, r7, #32
 8004330:	2f46      	cmp	r7, #70	; 0x46
 8004332:	4614      	mov	r4, r2
 8004334:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004336:	700b      	strb	r3, [r1, #0]
 8004338:	d004      	beq.n	8004344 <__cvt+0x34>
 800433a:	2f45      	cmp	r7, #69	; 0x45
 800433c:	d100      	bne.n	8004340 <__cvt+0x30>
 800433e:	3501      	adds	r5, #1
 8004340:	2302      	movs	r3, #2
 8004342:	e000      	b.n	8004346 <__cvt+0x36>
 8004344:	2303      	movs	r3, #3
 8004346:	aa07      	add	r2, sp, #28
 8004348:	9204      	str	r2, [sp, #16]
 800434a:	aa06      	add	r2, sp, #24
 800434c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004350:	e9cd 3500 	strd	r3, r5, [sp]
 8004354:	4622      	mov	r2, r4
 8004356:	4633      	mov	r3, r6
 8004358:	f001 fd7e 	bl	8005e58 <_dtoa_r>
 800435c:	2f47      	cmp	r7, #71	; 0x47
 800435e:	4680      	mov	r8, r0
 8004360:	d102      	bne.n	8004368 <__cvt+0x58>
 8004362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004364:	07db      	lsls	r3, r3, #31
 8004366:	d526      	bpl.n	80043b6 <__cvt+0xa6>
 8004368:	2f46      	cmp	r7, #70	; 0x46
 800436a:	eb08 0905 	add.w	r9, r8, r5
 800436e:	d111      	bne.n	8004394 <__cvt+0x84>
 8004370:	f898 3000 	ldrb.w	r3, [r8]
 8004374:	2b30      	cmp	r3, #48	; 0x30
 8004376:	d10a      	bne.n	800438e <__cvt+0x7e>
 8004378:	2200      	movs	r2, #0
 800437a:	2300      	movs	r3, #0
 800437c:	4620      	mov	r0, r4
 800437e:	4631      	mov	r1, r6
 8004380:	f7fc fb2a 	bl	80009d8 <__aeabi_dcmpeq>
 8004384:	b918      	cbnz	r0, 800438e <__cvt+0x7e>
 8004386:	f1c5 0501 	rsb	r5, r5, #1
 800438a:	f8ca 5000 	str.w	r5, [sl]
 800438e:	f8da 3000 	ldr.w	r3, [sl]
 8004392:	4499      	add	r9, r3
 8004394:	2200      	movs	r2, #0
 8004396:	2300      	movs	r3, #0
 8004398:	4620      	mov	r0, r4
 800439a:	4631      	mov	r1, r6
 800439c:	f7fc fb1c 	bl	80009d8 <__aeabi_dcmpeq>
 80043a0:	b938      	cbnz	r0, 80043b2 <__cvt+0xa2>
 80043a2:	2230      	movs	r2, #48	; 0x30
 80043a4:	9b07      	ldr	r3, [sp, #28]
 80043a6:	454b      	cmp	r3, r9
 80043a8:	d205      	bcs.n	80043b6 <__cvt+0xa6>
 80043aa:	1c59      	adds	r1, r3, #1
 80043ac:	9107      	str	r1, [sp, #28]
 80043ae:	701a      	strb	r2, [r3, #0]
 80043b0:	e7f8      	b.n	80043a4 <__cvt+0x94>
 80043b2:	f8cd 901c 	str.w	r9, [sp, #28]
 80043b6:	4640      	mov	r0, r8
 80043b8:	9b07      	ldr	r3, [sp, #28]
 80043ba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043bc:	eba3 0308 	sub.w	r3, r3, r8
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	b008      	add	sp, #32
 80043c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080043c8 <__exponent>:
 80043c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043ca:	2900      	cmp	r1, #0
 80043cc:	bfb4      	ite	lt
 80043ce:	232d      	movlt	r3, #45	; 0x2d
 80043d0:	232b      	movge	r3, #43	; 0x2b
 80043d2:	4604      	mov	r4, r0
 80043d4:	bfb8      	it	lt
 80043d6:	4249      	neglt	r1, r1
 80043d8:	2909      	cmp	r1, #9
 80043da:	f804 2b02 	strb.w	r2, [r4], #2
 80043de:	7043      	strb	r3, [r0, #1]
 80043e0:	dd21      	ble.n	8004426 <__exponent+0x5e>
 80043e2:	f10d 0307 	add.w	r3, sp, #7
 80043e6:	461f      	mov	r7, r3
 80043e8:	260a      	movs	r6, #10
 80043ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80043ee:	fb06 1115 	mls	r1, r6, r5, r1
 80043f2:	2d09      	cmp	r5, #9
 80043f4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 80043f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80043fc:	f103 32ff 	add.w	r2, r3, #4294967295
 8004400:	4629      	mov	r1, r5
 8004402:	dc09      	bgt.n	8004418 <__exponent+0x50>
 8004404:	3130      	adds	r1, #48	; 0x30
 8004406:	3b02      	subs	r3, #2
 8004408:	f802 1c01 	strb.w	r1, [r2, #-1]
 800440c:	42bb      	cmp	r3, r7
 800440e:	4622      	mov	r2, r4
 8004410:	d304      	bcc.n	800441c <__exponent+0x54>
 8004412:	1a10      	subs	r0, r2, r0
 8004414:	b003      	add	sp, #12
 8004416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004418:	4613      	mov	r3, r2
 800441a:	e7e6      	b.n	80043ea <__exponent+0x22>
 800441c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004420:	f804 2b01 	strb.w	r2, [r4], #1
 8004424:	e7f2      	b.n	800440c <__exponent+0x44>
 8004426:	2330      	movs	r3, #48	; 0x30
 8004428:	4419      	add	r1, r3
 800442a:	7083      	strb	r3, [r0, #2]
 800442c:	1d02      	adds	r2, r0, #4
 800442e:	70c1      	strb	r1, [r0, #3]
 8004430:	e7ef      	b.n	8004412 <__exponent+0x4a>
	...

08004434 <_printf_float>:
 8004434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004438:	b091      	sub	sp, #68	; 0x44
 800443a:	460c      	mov	r4, r1
 800443c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800443e:	4693      	mov	fp, r2
 8004440:	461e      	mov	r6, r3
 8004442:	4605      	mov	r5, r0
 8004444:	f002 fdea 	bl	800701c <_localeconv_r>
 8004448:	6803      	ldr	r3, [r0, #0]
 800444a:	4618      	mov	r0, r3
 800444c:	9309      	str	r3, [sp, #36]	; 0x24
 800444e:	f7fb fe97 	bl	8000180 <strlen>
 8004452:	2300      	movs	r3, #0
 8004454:	930e      	str	r3, [sp, #56]	; 0x38
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	900a      	str	r0, [sp, #40]	; 0x28
 800445a:	3307      	adds	r3, #7
 800445c:	f023 0307 	bic.w	r3, r3, #7
 8004460:	f103 0208 	add.w	r2, r3, #8
 8004464:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004468:	f8d4 a000 	ldr.w	sl, [r4]
 800446c:	603a      	str	r2, [r7, #0]
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004476:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800447a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800447e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004480:	f04f 32ff 	mov.w	r2, #4294967295
 8004484:	4ba6      	ldr	r3, [pc, #664]	; (8004720 <_printf_float+0x2ec>)
 8004486:	4638      	mov	r0, r7
 8004488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800448a:	f7fc fad7 	bl	8000a3c <__aeabi_dcmpun>
 800448e:	bb68      	cbnz	r0, 80044ec <_printf_float+0xb8>
 8004490:	f04f 32ff 	mov.w	r2, #4294967295
 8004494:	4ba2      	ldr	r3, [pc, #648]	; (8004720 <_printf_float+0x2ec>)
 8004496:	4638      	mov	r0, r7
 8004498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800449a:	f7fc fab1 	bl	8000a00 <__aeabi_dcmple>
 800449e:	bb28      	cbnz	r0, 80044ec <_printf_float+0xb8>
 80044a0:	2200      	movs	r2, #0
 80044a2:	2300      	movs	r3, #0
 80044a4:	4638      	mov	r0, r7
 80044a6:	4649      	mov	r1, r9
 80044a8:	f7fc faa0 	bl	80009ec <__aeabi_dcmplt>
 80044ac:	b110      	cbz	r0, 80044b4 <_printf_float+0x80>
 80044ae:	232d      	movs	r3, #45	; 0x2d
 80044b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b4:	4f9b      	ldr	r7, [pc, #620]	; (8004724 <_printf_float+0x2f0>)
 80044b6:	4b9c      	ldr	r3, [pc, #624]	; (8004728 <_printf_float+0x2f4>)
 80044b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80044bc:	bf98      	it	ls
 80044be:	461f      	movls	r7, r3
 80044c0:	2303      	movs	r3, #3
 80044c2:	f04f 0900 	mov.w	r9, #0
 80044c6:	6123      	str	r3, [r4, #16]
 80044c8:	f02a 0304 	bic.w	r3, sl, #4
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	9600      	str	r6, [sp, #0]
 80044d0:	465b      	mov	r3, fp
 80044d2:	aa0f      	add	r2, sp, #60	; 0x3c
 80044d4:	4621      	mov	r1, r4
 80044d6:	4628      	mov	r0, r5
 80044d8:	f000 f9e2 	bl	80048a0 <_printf_common>
 80044dc:	3001      	adds	r0, #1
 80044de:	f040 8090 	bne.w	8004602 <_printf_float+0x1ce>
 80044e2:	f04f 30ff 	mov.w	r0, #4294967295
 80044e6:	b011      	add	sp, #68	; 0x44
 80044e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044ec:	463a      	mov	r2, r7
 80044ee:	464b      	mov	r3, r9
 80044f0:	4638      	mov	r0, r7
 80044f2:	4649      	mov	r1, r9
 80044f4:	f7fc faa2 	bl	8000a3c <__aeabi_dcmpun>
 80044f8:	b110      	cbz	r0, 8004500 <_printf_float+0xcc>
 80044fa:	4f8c      	ldr	r7, [pc, #560]	; (800472c <_printf_float+0x2f8>)
 80044fc:	4b8c      	ldr	r3, [pc, #560]	; (8004730 <_printf_float+0x2fc>)
 80044fe:	e7db      	b.n	80044b8 <_printf_float+0x84>
 8004500:	6863      	ldr	r3, [r4, #4]
 8004502:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8004506:	1c59      	adds	r1, r3, #1
 8004508:	a80d      	add	r0, sp, #52	; 0x34
 800450a:	a90e      	add	r1, sp, #56	; 0x38
 800450c:	d140      	bne.n	8004590 <_printf_float+0x15c>
 800450e:	2306      	movs	r3, #6
 8004510:	6063      	str	r3, [r4, #4]
 8004512:	f04f 0c00 	mov.w	ip, #0
 8004516:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800451a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800451e:	6863      	ldr	r3, [r4, #4]
 8004520:	6022      	str	r2, [r4, #0]
 8004522:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8004526:	9300      	str	r3, [sp, #0]
 8004528:	463a      	mov	r2, r7
 800452a:	464b      	mov	r3, r9
 800452c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004530:	4628      	mov	r0, r5
 8004532:	f7ff feed 	bl	8004310 <__cvt>
 8004536:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800453a:	2b47      	cmp	r3, #71	; 0x47
 800453c:	4607      	mov	r7, r0
 800453e:	d109      	bne.n	8004554 <_printf_float+0x120>
 8004540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004542:	1cd8      	adds	r0, r3, #3
 8004544:	db02      	blt.n	800454c <_printf_float+0x118>
 8004546:	6862      	ldr	r2, [r4, #4]
 8004548:	4293      	cmp	r3, r2
 800454a:	dd47      	ble.n	80045dc <_printf_float+0x1a8>
 800454c:	f1a8 0802 	sub.w	r8, r8, #2
 8004550:	fa5f f888 	uxtb.w	r8, r8
 8004554:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004558:	990d      	ldr	r1, [sp, #52]	; 0x34
 800455a:	d824      	bhi.n	80045a6 <_printf_float+0x172>
 800455c:	3901      	subs	r1, #1
 800455e:	4642      	mov	r2, r8
 8004560:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004564:	910d      	str	r1, [sp, #52]	; 0x34
 8004566:	f7ff ff2f 	bl	80043c8 <__exponent>
 800456a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800456c:	4681      	mov	r9, r0
 800456e:	1813      	adds	r3, r2, r0
 8004570:	2a01      	cmp	r2, #1
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	dc02      	bgt.n	800457c <_printf_float+0x148>
 8004576:	6822      	ldr	r2, [r4, #0]
 8004578:	07d1      	lsls	r1, r2, #31
 800457a:	d501      	bpl.n	8004580 <_printf_float+0x14c>
 800457c:	3301      	adds	r3, #1
 800457e:	6123      	str	r3, [r4, #16]
 8004580:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004584:	2b00      	cmp	r3, #0
 8004586:	d0a2      	beq.n	80044ce <_printf_float+0x9a>
 8004588:	232d      	movs	r3, #45	; 0x2d
 800458a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800458e:	e79e      	b.n	80044ce <_printf_float+0x9a>
 8004590:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004594:	f000 816e 	beq.w	8004874 <_printf_float+0x440>
 8004598:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800459c:	d1b9      	bne.n	8004512 <_printf_float+0xde>
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1b7      	bne.n	8004512 <_printf_float+0xde>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e7b4      	b.n	8004510 <_printf_float+0xdc>
 80045a6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80045aa:	d119      	bne.n	80045e0 <_printf_float+0x1ac>
 80045ac:	2900      	cmp	r1, #0
 80045ae:	6863      	ldr	r3, [r4, #4]
 80045b0:	dd0c      	ble.n	80045cc <_printf_float+0x198>
 80045b2:	6121      	str	r1, [r4, #16]
 80045b4:	b913      	cbnz	r3, 80045bc <_printf_float+0x188>
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	07d2      	lsls	r2, r2, #31
 80045ba:	d502      	bpl.n	80045c2 <_printf_float+0x18e>
 80045bc:	3301      	adds	r3, #1
 80045be:	440b      	add	r3, r1
 80045c0:	6123      	str	r3, [r4, #16]
 80045c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045c4:	f04f 0900 	mov.w	r9, #0
 80045c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80045ca:	e7d9      	b.n	8004580 <_printf_float+0x14c>
 80045cc:	b913      	cbnz	r3, 80045d4 <_printf_float+0x1a0>
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	07d0      	lsls	r0, r2, #31
 80045d2:	d501      	bpl.n	80045d8 <_printf_float+0x1a4>
 80045d4:	3302      	adds	r3, #2
 80045d6:	e7f3      	b.n	80045c0 <_printf_float+0x18c>
 80045d8:	2301      	movs	r3, #1
 80045da:	e7f1      	b.n	80045c0 <_printf_float+0x18c>
 80045dc:	f04f 0867 	mov.w	r8, #103	; 0x67
 80045e0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80045e4:	4293      	cmp	r3, r2
 80045e6:	db05      	blt.n	80045f4 <_printf_float+0x1c0>
 80045e8:	6822      	ldr	r2, [r4, #0]
 80045ea:	6123      	str	r3, [r4, #16]
 80045ec:	07d1      	lsls	r1, r2, #31
 80045ee:	d5e8      	bpl.n	80045c2 <_printf_float+0x18e>
 80045f0:	3301      	adds	r3, #1
 80045f2:	e7e5      	b.n	80045c0 <_printf_float+0x18c>
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	bfcc      	ite	gt
 80045f8:	2301      	movgt	r3, #1
 80045fa:	f1c3 0302 	rsble	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	e7de      	b.n	80045c0 <_printf_float+0x18c>
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	055a      	lsls	r2, r3, #21
 8004606:	d407      	bmi.n	8004618 <_printf_float+0x1e4>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	463a      	mov	r2, r7
 800460c:	4659      	mov	r1, fp
 800460e:	4628      	mov	r0, r5
 8004610:	47b0      	blx	r6
 8004612:	3001      	adds	r0, #1
 8004614:	d129      	bne.n	800466a <_printf_float+0x236>
 8004616:	e764      	b.n	80044e2 <_printf_float+0xae>
 8004618:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800461c:	f240 80d7 	bls.w	80047ce <_printf_float+0x39a>
 8004620:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004624:	2200      	movs	r2, #0
 8004626:	2300      	movs	r3, #0
 8004628:	f7fc f9d6 	bl	80009d8 <__aeabi_dcmpeq>
 800462c:	b388      	cbz	r0, 8004692 <_printf_float+0x25e>
 800462e:	2301      	movs	r3, #1
 8004630:	4a40      	ldr	r2, [pc, #256]	; (8004734 <_printf_float+0x300>)
 8004632:	4659      	mov	r1, fp
 8004634:	4628      	mov	r0, r5
 8004636:	47b0      	blx	r6
 8004638:	3001      	adds	r0, #1
 800463a:	f43f af52 	beq.w	80044e2 <_printf_float+0xae>
 800463e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004642:	429a      	cmp	r2, r3
 8004644:	db02      	blt.n	800464c <_printf_float+0x218>
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	07d8      	lsls	r0, r3, #31
 800464a:	d50e      	bpl.n	800466a <_printf_float+0x236>
 800464c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004650:	4659      	mov	r1, fp
 8004652:	4628      	mov	r0, r5
 8004654:	47b0      	blx	r6
 8004656:	3001      	adds	r0, #1
 8004658:	f43f af43 	beq.w	80044e2 <_printf_float+0xae>
 800465c:	2700      	movs	r7, #0
 800465e:	f104 081a 	add.w	r8, r4, #26
 8004662:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004664:	3b01      	subs	r3, #1
 8004666:	42bb      	cmp	r3, r7
 8004668:	dc09      	bgt.n	800467e <_printf_float+0x24a>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	079f      	lsls	r7, r3, #30
 800466e:	f100 80fd 	bmi.w	800486c <_printf_float+0x438>
 8004672:	68e0      	ldr	r0, [r4, #12]
 8004674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004676:	4298      	cmp	r0, r3
 8004678:	bfb8      	it	lt
 800467a:	4618      	movlt	r0, r3
 800467c:	e733      	b.n	80044e6 <_printf_float+0xb2>
 800467e:	2301      	movs	r3, #1
 8004680:	4642      	mov	r2, r8
 8004682:	4659      	mov	r1, fp
 8004684:	4628      	mov	r0, r5
 8004686:	47b0      	blx	r6
 8004688:	3001      	adds	r0, #1
 800468a:	f43f af2a 	beq.w	80044e2 <_printf_float+0xae>
 800468e:	3701      	adds	r7, #1
 8004690:	e7e7      	b.n	8004662 <_printf_float+0x22e>
 8004692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004694:	2b00      	cmp	r3, #0
 8004696:	dc2b      	bgt.n	80046f0 <_printf_float+0x2bc>
 8004698:	2301      	movs	r3, #1
 800469a:	4a26      	ldr	r2, [pc, #152]	; (8004734 <_printf_float+0x300>)
 800469c:	4659      	mov	r1, fp
 800469e:	4628      	mov	r0, r5
 80046a0:	47b0      	blx	r6
 80046a2:	3001      	adds	r0, #1
 80046a4:	f43f af1d 	beq.w	80044e2 <_printf_float+0xae>
 80046a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046aa:	b923      	cbnz	r3, 80046b6 <_printf_float+0x282>
 80046ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046ae:	b913      	cbnz	r3, 80046b6 <_printf_float+0x282>
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	07d9      	lsls	r1, r3, #31
 80046b4:	d5d9      	bpl.n	800466a <_printf_float+0x236>
 80046b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046ba:	4659      	mov	r1, fp
 80046bc:	4628      	mov	r0, r5
 80046be:	47b0      	blx	r6
 80046c0:	3001      	adds	r0, #1
 80046c2:	f43f af0e 	beq.w	80044e2 <_printf_float+0xae>
 80046c6:	f04f 0800 	mov.w	r8, #0
 80046ca:	f104 091a 	add.w	r9, r4, #26
 80046ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046d0:	425b      	negs	r3, r3
 80046d2:	4543      	cmp	r3, r8
 80046d4:	dc01      	bgt.n	80046da <_printf_float+0x2a6>
 80046d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046d8:	e797      	b.n	800460a <_printf_float+0x1d6>
 80046da:	2301      	movs	r3, #1
 80046dc:	464a      	mov	r2, r9
 80046de:	4659      	mov	r1, fp
 80046e0:	4628      	mov	r0, r5
 80046e2:	47b0      	blx	r6
 80046e4:	3001      	adds	r0, #1
 80046e6:	f43f aefc 	beq.w	80044e2 <_printf_float+0xae>
 80046ea:	f108 0801 	add.w	r8, r8, #1
 80046ee:	e7ee      	b.n	80046ce <_printf_float+0x29a>
 80046f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046f4:	429a      	cmp	r2, r3
 80046f6:	bfa8      	it	ge
 80046f8:	461a      	movge	r2, r3
 80046fa:	2a00      	cmp	r2, #0
 80046fc:	4690      	mov	r8, r2
 80046fe:	dd07      	ble.n	8004710 <_printf_float+0x2dc>
 8004700:	4613      	mov	r3, r2
 8004702:	4659      	mov	r1, fp
 8004704:	463a      	mov	r2, r7
 8004706:	4628      	mov	r0, r5
 8004708:	47b0      	blx	r6
 800470a:	3001      	adds	r0, #1
 800470c:	f43f aee9 	beq.w	80044e2 <_printf_float+0xae>
 8004710:	f104 031a 	add.w	r3, r4, #26
 8004714:	f04f 0a00 	mov.w	sl, #0
 8004718:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800471c:	930b      	str	r3, [sp, #44]	; 0x2c
 800471e:	e015      	b.n	800474c <_printf_float+0x318>
 8004720:	7fefffff 	.word	0x7fefffff
 8004724:	08007e88 	.word	0x08007e88
 8004728:	08007e84 	.word	0x08007e84
 800472c:	08007e90 	.word	0x08007e90
 8004730:	08007e8c 	.word	0x08007e8c
 8004734:	08007e94 	.word	0x08007e94
 8004738:	2301      	movs	r3, #1
 800473a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800473c:	4659      	mov	r1, fp
 800473e:	4628      	mov	r0, r5
 8004740:	47b0      	blx	r6
 8004742:	3001      	adds	r0, #1
 8004744:	f43f aecd 	beq.w	80044e2 <_printf_float+0xae>
 8004748:	f10a 0a01 	add.w	sl, sl, #1
 800474c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8004750:	eba9 0308 	sub.w	r3, r9, r8
 8004754:	4553      	cmp	r3, sl
 8004756:	dcef      	bgt.n	8004738 <_printf_float+0x304>
 8004758:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800475c:	429a      	cmp	r2, r3
 800475e:	444f      	add	r7, r9
 8004760:	db14      	blt.n	800478c <_printf_float+0x358>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	07da      	lsls	r2, r3, #31
 8004766:	d411      	bmi.n	800478c <_printf_float+0x358>
 8004768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800476a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800476c:	eba3 0209 	sub.w	r2, r3, r9
 8004770:	eba3 0901 	sub.w	r9, r3, r1
 8004774:	4591      	cmp	r9, r2
 8004776:	bfa8      	it	ge
 8004778:	4691      	movge	r9, r2
 800477a:	f1b9 0f00 	cmp.w	r9, #0
 800477e:	dc0d      	bgt.n	800479c <_printf_float+0x368>
 8004780:	2700      	movs	r7, #0
 8004782:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004786:	f104 081a 	add.w	r8, r4, #26
 800478a:	e018      	b.n	80047be <_printf_float+0x38a>
 800478c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004790:	4659      	mov	r1, fp
 8004792:	4628      	mov	r0, r5
 8004794:	47b0      	blx	r6
 8004796:	3001      	adds	r0, #1
 8004798:	d1e6      	bne.n	8004768 <_printf_float+0x334>
 800479a:	e6a2      	b.n	80044e2 <_printf_float+0xae>
 800479c:	464b      	mov	r3, r9
 800479e:	463a      	mov	r2, r7
 80047a0:	4659      	mov	r1, fp
 80047a2:	4628      	mov	r0, r5
 80047a4:	47b0      	blx	r6
 80047a6:	3001      	adds	r0, #1
 80047a8:	d1ea      	bne.n	8004780 <_printf_float+0x34c>
 80047aa:	e69a      	b.n	80044e2 <_printf_float+0xae>
 80047ac:	2301      	movs	r3, #1
 80047ae:	4642      	mov	r2, r8
 80047b0:	4659      	mov	r1, fp
 80047b2:	4628      	mov	r0, r5
 80047b4:	47b0      	blx	r6
 80047b6:	3001      	adds	r0, #1
 80047b8:	f43f ae93 	beq.w	80044e2 <_printf_float+0xae>
 80047bc:	3701      	adds	r7, #1
 80047be:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	eba3 0309 	sub.w	r3, r3, r9
 80047c8:	42bb      	cmp	r3, r7
 80047ca:	dcef      	bgt.n	80047ac <_printf_float+0x378>
 80047cc:	e74d      	b.n	800466a <_printf_float+0x236>
 80047ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047d0:	2a01      	cmp	r2, #1
 80047d2:	dc01      	bgt.n	80047d8 <_printf_float+0x3a4>
 80047d4:	07db      	lsls	r3, r3, #31
 80047d6:	d538      	bpl.n	800484a <_printf_float+0x416>
 80047d8:	2301      	movs	r3, #1
 80047da:	463a      	mov	r2, r7
 80047dc:	4659      	mov	r1, fp
 80047de:	4628      	mov	r0, r5
 80047e0:	47b0      	blx	r6
 80047e2:	3001      	adds	r0, #1
 80047e4:	f43f ae7d 	beq.w	80044e2 <_printf_float+0xae>
 80047e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047ec:	4659      	mov	r1, fp
 80047ee:	4628      	mov	r0, r5
 80047f0:	47b0      	blx	r6
 80047f2:	3001      	adds	r0, #1
 80047f4:	f107 0701 	add.w	r7, r7, #1
 80047f8:	f43f ae73 	beq.w	80044e2 <_printf_float+0xae>
 80047fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004802:	2200      	movs	r2, #0
 8004804:	f103 38ff 	add.w	r8, r3, #4294967295
 8004808:	2300      	movs	r3, #0
 800480a:	f7fc f8e5 	bl	80009d8 <__aeabi_dcmpeq>
 800480e:	b9c0      	cbnz	r0, 8004842 <_printf_float+0x40e>
 8004810:	4643      	mov	r3, r8
 8004812:	463a      	mov	r2, r7
 8004814:	4659      	mov	r1, fp
 8004816:	4628      	mov	r0, r5
 8004818:	47b0      	blx	r6
 800481a:	3001      	adds	r0, #1
 800481c:	d10d      	bne.n	800483a <_printf_float+0x406>
 800481e:	e660      	b.n	80044e2 <_printf_float+0xae>
 8004820:	2301      	movs	r3, #1
 8004822:	4642      	mov	r2, r8
 8004824:	4659      	mov	r1, fp
 8004826:	4628      	mov	r0, r5
 8004828:	47b0      	blx	r6
 800482a:	3001      	adds	r0, #1
 800482c:	f43f ae59 	beq.w	80044e2 <_printf_float+0xae>
 8004830:	3701      	adds	r7, #1
 8004832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004834:	3b01      	subs	r3, #1
 8004836:	42bb      	cmp	r3, r7
 8004838:	dcf2      	bgt.n	8004820 <_printf_float+0x3ec>
 800483a:	464b      	mov	r3, r9
 800483c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004840:	e6e4      	b.n	800460c <_printf_float+0x1d8>
 8004842:	2700      	movs	r7, #0
 8004844:	f104 081a 	add.w	r8, r4, #26
 8004848:	e7f3      	b.n	8004832 <_printf_float+0x3fe>
 800484a:	2301      	movs	r3, #1
 800484c:	e7e1      	b.n	8004812 <_printf_float+0x3de>
 800484e:	2301      	movs	r3, #1
 8004850:	4642      	mov	r2, r8
 8004852:	4659      	mov	r1, fp
 8004854:	4628      	mov	r0, r5
 8004856:	47b0      	blx	r6
 8004858:	3001      	adds	r0, #1
 800485a:	f43f ae42 	beq.w	80044e2 <_printf_float+0xae>
 800485e:	3701      	adds	r7, #1
 8004860:	68e3      	ldr	r3, [r4, #12]
 8004862:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	42bb      	cmp	r3, r7
 8004868:	dcf1      	bgt.n	800484e <_printf_float+0x41a>
 800486a:	e702      	b.n	8004672 <_printf_float+0x23e>
 800486c:	2700      	movs	r7, #0
 800486e:	f104 0819 	add.w	r8, r4, #25
 8004872:	e7f5      	b.n	8004860 <_printf_float+0x42c>
 8004874:	2b00      	cmp	r3, #0
 8004876:	f43f ae94 	beq.w	80045a2 <_printf_float+0x16e>
 800487a:	f04f 0c00 	mov.w	ip, #0
 800487e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8004882:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004886:	6022      	str	r2, [r4, #0]
 8004888:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800488c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	463a      	mov	r2, r7
 8004894:	464b      	mov	r3, r9
 8004896:	4628      	mov	r0, r5
 8004898:	f7ff fd3a 	bl	8004310 <__cvt>
 800489c:	4607      	mov	r7, r0
 800489e:	e64f      	b.n	8004540 <_printf_float+0x10c>

080048a0 <_printf_common>:
 80048a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a4:	4691      	mov	r9, r2
 80048a6:	461f      	mov	r7, r3
 80048a8:	688a      	ldr	r2, [r1, #8]
 80048aa:	690b      	ldr	r3, [r1, #16]
 80048ac:	4606      	mov	r6, r0
 80048ae:	4293      	cmp	r3, r2
 80048b0:	bfb8      	it	lt
 80048b2:	4613      	movlt	r3, r2
 80048b4:	f8c9 3000 	str.w	r3, [r9]
 80048b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048bc:	460c      	mov	r4, r1
 80048be:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048c2:	b112      	cbz	r2, 80048ca <_printf_common+0x2a>
 80048c4:	3301      	adds	r3, #1
 80048c6:	f8c9 3000 	str.w	r3, [r9]
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	0699      	lsls	r1, r3, #26
 80048ce:	bf42      	ittt	mi
 80048d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80048d4:	3302      	addmi	r3, #2
 80048d6:	f8c9 3000 	strmi.w	r3, [r9]
 80048da:	6825      	ldr	r5, [r4, #0]
 80048dc:	f015 0506 	ands.w	r5, r5, #6
 80048e0:	d107      	bne.n	80048f2 <_printf_common+0x52>
 80048e2:	f104 0a19 	add.w	sl, r4, #25
 80048e6:	68e3      	ldr	r3, [r4, #12]
 80048e8:	f8d9 2000 	ldr.w	r2, [r9]
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	42ab      	cmp	r3, r5
 80048f0:	dc29      	bgt.n	8004946 <_printf_common+0xa6>
 80048f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80048f6:	6822      	ldr	r2, [r4, #0]
 80048f8:	3300      	adds	r3, #0
 80048fa:	bf18      	it	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	0692      	lsls	r2, r2, #26
 8004900:	d42e      	bmi.n	8004960 <_printf_common+0xc0>
 8004902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004906:	4639      	mov	r1, r7
 8004908:	4630      	mov	r0, r6
 800490a:	47c0      	blx	r8
 800490c:	3001      	adds	r0, #1
 800490e:	d021      	beq.n	8004954 <_printf_common+0xb4>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	68e5      	ldr	r5, [r4, #12]
 8004914:	f003 0306 	and.w	r3, r3, #6
 8004918:	2b04      	cmp	r3, #4
 800491a:	bf18      	it	ne
 800491c:	2500      	movne	r5, #0
 800491e:	f8d9 2000 	ldr.w	r2, [r9]
 8004922:	f04f 0900 	mov.w	r9, #0
 8004926:	bf08      	it	eq
 8004928:	1aad      	subeq	r5, r5, r2
 800492a:	68a3      	ldr	r3, [r4, #8]
 800492c:	6922      	ldr	r2, [r4, #16]
 800492e:	bf08      	it	eq
 8004930:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004934:	4293      	cmp	r3, r2
 8004936:	bfc4      	itt	gt
 8004938:	1a9b      	subgt	r3, r3, r2
 800493a:	18ed      	addgt	r5, r5, r3
 800493c:	341a      	adds	r4, #26
 800493e:	454d      	cmp	r5, r9
 8004940:	d11a      	bne.n	8004978 <_printf_common+0xd8>
 8004942:	2000      	movs	r0, #0
 8004944:	e008      	b.n	8004958 <_printf_common+0xb8>
 8004946:	2301      	movs	r3, #1
 8004948:	4652      	mov	r2, sl
 800494a:	4639      	mov	r1, r7
 800494c:	4630      	mov	r0, r6
 800494e:	47c0      	blx	r8
 8004950:	3001      	adds	r0, #1
 8004952:	d103      	bne.n	800495c <_printf_common+0xbc>
 8004954:	f04f 30ff 	mov.w	r0, #4294967295
 8004958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800495c:	3501      	adds	r5, #1
 800495e:	e7c2      	b.n	80048e6 <_printf_common+0x46>
 8004960:	2030      	movs	r0, #48	; 0x30
 8004962:	18e1      	adds	r1, r4, r3
 8004964:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800496e:	4422      	add	r2, r4
 8004970:	3302      	adds	r3, #2
 8004972:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004976:	e7c4      	b.n	8004902 <_printf_common+0x62>
 8004978:	2301      	movs	r3, #1
 800497a:	4622      	mov	r2, r4
 800497c:	4639      	mov	r1, r7
 800497e:	4630      	mov	r0, r6
 8004980:	47c0      	blx	r8
 8004982:	3001      	adds	r0, #1
 8004984:	d0e6      	beq.n	8004954 <_printf_common+0xb4>
 8004986:	f109 0901 	add.w	r9, r9, #1
 800498a:	e7d8      	b.n	800493e <_printf_common+0x9e>

0800498c <_printf_i>:
 800498c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004990:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004994:	460c      	mov	r4, r1
 8004996:	7e09      	ldrb	r1, [r1, #24]
 8004998:	b085      	sub	sp, #20
 800499a:	296e      	cmp	r1, #110	; 0x6e
 800499c:	4617      	mov	r7, r2
 800499e:	4606      	mov	r6, r0
 80049a0:	4698      	mov	r8, r3
 80049a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049a4:	f000 80b3 	beq.w	8004b0e <_printf_i+0x182>
 80049a8:	d822      	bhi.n	80049f0 <_printf_i+0x64>
 80049aa:	2963      	cmp	r1, #99	; 0x63
 80049ac:	d036      	beq.n	8004a1c <_printf_i+0x90>
 80049ae:	d80a      	bhi.n	80049c6 <_printf_i+0x3a>
 80049b0:	2900      	cmp	r1, #0
 80049b2:	f000 80b9 	beq.w	8004b28 <_printf_i+0x19c>
 80049b6:	2958      	cmp	r1, #88	; 0x58
 80049b8:	f000 8083 	beq.w	8004ac2 <_printf_i+0x136>
 80049bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80049c4:	e032      	b.n	8004a2c <_printf_i+0xa0>
 80049c6:	2964      	cmp	r1, #100	; 0x64
 80049c8:	d001      	beq.n	80049ce <_printf_i+0x42>
 80049ca:	2969      	cmp	r1, #105	; 0x69
 80049cc:	d1f6      	bne.n	80049bc <_printf_i+0x30>
 80049ce:	6820      	ldr	r0, [r4, #0]
 80049d0:	6813      	ldr	r3, [r2, #0]
 80049d2:	0605      	lsls	r5, r0, #24
 80049d4:	f103 0104 	add.w	r1, r3, #4
 80049d8:	d52a      	bpl.n	8004a30 <_printf_i+0xa4>
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6011      	str	r1, [r2, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	da03      	bge.n	80049ea <_printf_i+0x5e>
 80049e2:	222d      	movs	r2, #45	; 0x2d
 80049e4:	425b      	negs	r3, r3
 80049e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049ea:	486f      	ldr	r0, [pc, #444]	; (8004ba8 <_printf_i+0x21c>)
 80049ec:	220a      	movs	r2, #10
 80049ee:	e039      	b.n	8004a64 <_printf_i+0xd8>
 80049f0:	2973      	cmp	r1, #115	; 0x73
 80049f2:	f000 809d 	beq.w	8004b30 <_printf_i+0x1a4>
 80049f6:	d808      	bhi.n	8004a0a <_printf_i+0x7e>
 80049f8:	296f      	cmp	r1, #111	; 0x6f
 80049fa:	d020      	beq.n	8004a3e <_printf_i+0xb2>
 80049fc:	2970      	cmp	r1, #112	; 0x70
 80049fe:	d1dd      	bne.n	80049bc <_printf_i+0x30>
 8004a00:	6823      	ldr	r3, [r4, #0]
 8004a02:	f043 0320 	orr.w	r3, r3, #32
 8004a06:	6023      	str	r3, [r4, #0]
 8004a08:	e003      	b.n	8004a12 <_printf_i+0x86>
 8004a0a:	2975      	cmp	r1, #117	; 0x75
 8004a0c:	d017      	beq.n	8004a3e <_printf_i+0xb2>
 8004a0e:	2978      	cmp	r1, #120	; 0x78
 8004a10:	d1d4      	bne.n	80049bc <_printf_i+0x30>
 8004a12:	2378      	movs	r3, #120	; 0x78
 8004a14:	4865      	ldr	r0, [pc, #404]	; (8004bac <_printf_i+0x220>)
 8004a16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a1a:	e055      	b.n	8004ac8 <_printf_i+0x13c>
 8004a1c:	6813      	ldr	r3, [r2, #0]
 8004a1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a22:	1d19      	adds	r1, r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6011      	str	r1, [r2, #0]
 8004a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e08c      	b.n	8004b4a <_printf_i+0x1be>
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a36:	6011      	str	r1, [r2, #0]
 8004a38:	bf18      	it	ne
 8004a3a:	b21b      	sxthne	r3, r3
 8004a3c:	e7cf      	b.n	80049de <_printf_i+0x52>
 8004a3e:	6813      	ldr	r3, [r2, #0]
 8004a40:	6825      	ldr	r5, [r4, #0]
 8004a42:	1d18      	adds	r0, r3, #4
 8004a44:	6010      	str	r0, [r2, #0]
 8004a46:	0628      	lsls	r0, r5, #24
 8004a48:	d501      	bpl.n	8004a4e <_printf_i+0xc2>
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	e002      	b.n	8004a54 <_printf_i+0xc8>
 8004a4e:	0668      	lsls	r0, r5, #25
 8004a50:	d5fb      	bpl.n	8004a4a <_printf_i+0xbe>
 8004a52:	881b      	ldrh	r3, [r3, #0]
 8004a54:	296f      	cmp	r1, #111	; 0x6f
 8004a56:	bf14      	ite	ne
 8004a58:	220a      	movne	r2, #10
 8004a5a:	2208      	moveq	r2, #8
 8004a5c:	4852      	ldr	r0, [pc, #328]	; (8004ba8 <_printf_i+0x21c>)
 8004a5e:	2100      	movs	r1, #0
 8004a60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a64:	6865      	ldr	r5, [r4, #4]
 8004a66:	2d00      	cmp	r5, #0
 8004a68:	60a5      	str	r5, [r4, #8]
 8004a6a:	f2c0 8095 	blt.w	8004b98 <_printf_i+0x20c>
 8004a6e:	6821      	ldr	r1, [r4, #0]
 8004a70:	f021 0104 	bic.w	r1, r1, #4
 8004a74:	6021      	str	r1, [r4, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d13d      	bne.n	8004af6 <_printf_i+0x16a>
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	f040 808e 	bne.w	8004b9c <_printf_i+0x210>
 8004a80:	4665      	mov	r5, ip
 8004a82:	2a08      	cmp	r2, #8
 8004a84:	d10b      	bne.n	8004a9e <_printf_i+0x112>
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	07db      	lsls	r3, r3, #31
 8004a8a:	d508      	bpl.n	8004a9e <_printf_i+0x112>
 8004a8c:	6923      	ldr	r3, [r4, #16]
 8004a8e:	6862      	ldr	r2, [r4, #4]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	bfde      	ittt	le
 8004a94:	2330      	movle	r3, #48	; 0x30
 8004a96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a9e:	ebac 0305 	sub.w	r3, ip, r5
 8004aa2:	6123      	str	r3, [r4, #16]
 8004aa4:	f8cd 8000 	str.w	r8, [sp]
 8004aa8:	463b      	mov	r3, r7
 8004aaa:	aa03      	add	r2, sp, #12
 8004aac:	4621      	mov	r1, r4
 8004aae:	4630      	mov	r0, r6
 8004ab0:	f7ff fef6 	bl	80048a0 <_printf_common>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d14d      	bne.n	8004b54 <_printf_i+0x1c8>
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8004abc:	b005      	add	sp, #20
 8004abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ac2:	4839      	ldr	r0, [pc, #228]	; (8004ba8 <_printf_i+0x21c>)
 8004ac4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004ac8:	6813      	ldr	r3, [r2, #0]
 8004aca:	6821      	ldr	r1, [r4, #0]
 8004acc:	1d1d      	adds	r5, r3, #4
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6015      	str	r5, [r2, #0]
 8004ad2:	060a      	lsls	r2, r1, #24
 8004ad4:	d50b      	bpl.n	8004aee <_printf_i+0x162>
 8004ad6:	07ca      	lsls	r2, r1, #31
 8004ad8:	bf44      	itt	mi
 8004ada:	f041 0120 	orrmi.w	r1, r1, #32
 8004ade:	6021      	strmi	r1, [r4, #0]
 8004ae0:	b91b      	cbnz	r3, 8004aea <_printf_i+0x15e>
 8004ae2:	6822      	ldr	r2, [r4, #0]
 8004ae4:	f022 0220 	bic.w	r2, r2, #32
 8004ae8:	6022      	str	r2, [r4, #0]
 8004aea:	2210      	movs	r2, #16
 8004aec:	e7b7      	b.n	8004a5e <_printf_i+0xd2>
 8004aee:	064d      	lsls	r5, r1, #25
 8004af0:	bf48      	it	mi
 8004af2:	b29b      	uxthmi	r3, r3
 8004af4:	e7ef      	b.n	8004ad6 <_printf_i+0x14a>
 8004af6:	4665      	mov	r5, ip
 8004af8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004afc:	fb02 3311 	mls	r3, r2, r1, r3
 8004b00:	5cc3      	ldrb	r3, [r0, r3]
 8004b02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b06:	460b      	mov	r3, r1
 8004b08:	2900      	cmp	r1, #0
 8004b0a:	d1f5      	bne.n	8004af8 <_printf_i+0x16c>
 8004b0c:	e7b9      	b.n	8004a82 <_printf_i+0xf6>
 8004b0e:	6813      	ldr	r3, [r2, #0]
 8004b10:	6825      	ldr	r5, [r4, #0]
 8004b12:	1d18      	adds	r0, r3, #4
 8004b14:	6961      	ldr	r1, [r4, #20]
 8004b16:	6010      	str	r0, [r2, #0]
 8004b18:	0628      	lsls	r0, r5, #24
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	d501      	bpl.n	8004b22 <_printf_i+0x196>
 8004b1e:	6019      	str	r1, [r3, #0]
 8004b20:	e002      	b.n	8004b28 <_printf_i+0x19c>
 8004b22:	066a      	lsls	r2, r5, #25
 8004b24:	d5fb      	bpl.n	8004b1e <_printf_i+0x192>
 8004b26:	8019      	strh	r1, [r3, #0]
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4665      	mov	r5, ip
 8004b2c:	6123      	str	r3, [r4, #16]
 8004b2e:	e7b9      	b.n	8004aa4 <_printf_i+0x118>
 8004b30:	6813      	ldr	r3, [r2, #0]
 8004b32:	1d19      	adds	r1, r3, #4
 8004b34:	6011      	str	r1, [r2, #0]
 8004b36:	681d      	ldr	r5, [r3, #0]
 8004b38:	6862      	ldr	r2, [r4, #4]
 8004b3a:	2100      	movs	r1, #0
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f002 fa95 	bl	800706c <memchr>
 8004b42:	b108      	cbz	r0, 8004b48 <_printf_i+0x1bc>
 8004b44:	1b40      	subs	r0, r0, r5
 8004b46:	6060      	str	r0, [r4, #4]
 8004b48:	6863      	ldr	r3, [r4, #4]
 8004b4a:	6123      	str	r3, [r4, #16]
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b52:	e7a7      	b.n	8004aa4 <_printf_i+0x118>
 8004b54:	6923      	ldr	r3, [r4, #16]
 8004b56:	462a      	mov	r2, r5
 8004b58:	4639      	mov	r1, r7
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	47c0      	blx	r8
 8004b5e:	3001      	adds	r0, #1
 8004b60:	d0aa      	beq.n	8004ab8 <_printf_i+0x12c>
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	079b      	lsls	r3, r3, #30
 8004b66:	d413      	bmi.n	8004b90 <_printf_i+0x204>
 8004b68:	68e0      	ldr	r0, [r4, #12]
 8004b6a:	9b03      	ldr	r3, [sp, #12]
 8004b6c:	4298      	cmp	r0, r3
 8004b6e:	bfb8      	it	lt
 8004b70:	4618      	movlt	r0, r3
 8004b72:	e7a3      	b.n	8004abc <_printf_i+0x130>
 8004b74:	2301      	movs	r3, #1
 8004b76:	464a      	mov	r2, r9
 8004b78:	4639      	mov	r1, r7
 8004b7a:	4630      	mov	r0, r6
 8004b7c:	47c0      	blx	r8
 8004b7e:	3001      	adds	r0, #1
 8004b80:	d09a      	beq.n	8004ab8 <_printf_i+0x12c>
 8004b82:	3501      	adds	r5, #1
 8004b84:	68e3      	ldr	r3, [r4, #12]
 8004b86:	9a03      	ldr	r2, [sp, #12]
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	42ab      	cmp	r3, r5
 8004b8c:	dcf2      	bgt.n	8004b74 <_printf_i+0x1e8>
 8004b8e:	e7eb      	b.n	8004b68 <_printf_i+0x1dc>
 8004b90:	2500      	movs	r5, #0
 8004b92:	f104 0919 	add.w	r9, r4, #25
 8004b96:	e7f5      	b.n	8004b84 <_printf_i+0x1f8>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1ac      	bne.n	8004af6 <_printf_i+0x16a>
 8004b9c:	7803      	ldrb	r3, [r0, #0]
 8004b9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ba2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ba6:	e76c      	b.n	8004a82 <_printf_i+0xf6>
 8004ba8:	08007e96 	.word	0x08007e96
 8004bac:	08007ea7 	.word	0x08007ea7

08004bb0 <_scanf_float>:
 8004bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb4:	469a      	mov	sl, r3
 8004bb6:	688b      	ldr	r3, [r1, #8]
 8004bb8:	4616      	mov	r6, r2
 8004bba:	1e5a      	subs	r2, r3, #1
 8004bbc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004bc0:	bf88      	it	hi
 8004bc2:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	bf85      	ittet	hi
 8004bca:	189b      	addhi	r3, r3, r2
 8004bcc:	9301      	strhi	r3, [sp, #4]
 8004bce:	2300      	movls	r3, #0
 8004bd0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004bd4:	4688      	mov	r8, r1
 8004bd6:	f04f 0b00 	mov.w	fp, #0
 8004bda:	bf8c      	ite	hi
 8004bdc:	608b      	strhi	r3, [r1, #8]
 8004bde:	9301      	strls	r3, [sp, #4]
 8004be0:	680b      	ldr	r3, [r1, #0]
 8004be2:	4607      	mov	r7, r0
 8004be4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004be8:	f848 3b1c 	str.w	r3, [r8], #28
 8004bec:	460c      	mov	r4, r1
 8004bee:	4645      	mov	r5, r8
 8004bf0:	465a      	mov	r2, fp
 8004bf2:	46d9      	mov	r9, fp
 8004bf4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004bf8:	f8cd b008 	str.w	fp, [sp, #8]
 8004bfc:	68a1      	ldr	r1, [r4, #8]
 8004bfe:	b181      	cbz	r1, 8004c22 <_scanf_float+0x72>
 8004c00:	6833      	ldr	r3, [r6, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b49      	cmp	r3, #73	; 0x49
 8004c06:	d071      	beq.n	8004cec <_scanf_float+0x13c>
 8004c08:	d84d      	bhi.n	8004ca6 <_scanf_float+0xf6>
 8004c0a:	2b39      	cmp	r3, #57	; 0x39
 8004c0c:	d840      	bhi.n	8004c90 <_scanf_float+0xe0>
 8004c0e:	2b31      	cmp	r3, #49	; 0x31
 8004c10:	f080 8088 	bcs.w	8004d24 <_scanf_float+0x174>
 8004c14:	2b2d      	cmp	r3, #45	; 0x2d
 8004c16:	f000 8090 	beq.w	8004d3a <_scanf_float+0x18a>
 8004c1a:	d815      	bhi.n	8004c48 <_scanf_float+0x98>
 8004c1c:	2b2b      	cmp	r3, #43	; 0x2b
 8004c1e:	f000 808c 	beq.w	8004d3a <_scanf_float+0x18a>
 8004c22:	f1b9 0f00 	cmp.w	r9, #0
 8004c26:	d003      	beq.n	8004c30 <_scanf_float+0x80>
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c2e:	6023      	str	r3, [r4, #0]
 8004c30:	3a01      	subs	r2, #1
 8004c32:	2a01      	cmp	r2, #1
 8004c34:	f200 80ea 	bhi.w	8004e0c <_scanf_float+0x25c>
 8004c38:	4545      	cmp	r5, r8
 8004c3a:	f200 80dc 	bhi.w	8004df6 <_scanf_float+0x246>
 8004c3e:	2601      	movs	r6, #1
 8004c40:	4630      	mov	r0, r6
 8004c42:	b007      	add	sp, #28
 8004c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c48:	2b2e      	cmp	r3, #46	; 0x2e
 8004c4a:	f000 809f 	beq.w	8004d8c <_scanf_float+0x1dc>
 8004c4e:	2b30      	cmp	r3, #48	; 0x30
 8004c50:	d1e7      	bne.n	8004c22 <_scanf_float+0x72>
 8004c52:	6820      	ldr	r0, [r4, #0]
 8004c54:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004c58:	d064      	beq.n	8004d24 <_scanf_float+0x174>
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004c60:	6020      	str	r0, [r4, #0]
 8004c62:	f109 0901 	add.w	r9, r9, #1
 8004c66:	b11b      	cbz	r3, 8004c70 <_scanf_float+0xc0>
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	3101      	adds	r1, #1
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	60a1      	str	r1, [r4, #8]
 8004c70:	68a3      	ldr	r3, [r4, #8]
 8004c72:	3b01      	subs	r3, #1
 8004c74:	60a3      	str	r3, [r4, #8]
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	6123      	str	r3, [r4, #16]
 8004c7c:	6873      	ldr	r3, [r6, #4]
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	6073      	str	r3, [r6, #4]
 8004c84:	f340 80ac 	ble.w	8004de0 <_scanf_float+0x230>
 8004c88:	6833      	ldr	r3, [r6, #0]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	6033      	str	r3, [r6, #0]
 8004c8e:	e7b5      	b.n	8004bfc <_scanf_float+0x4c>
 8004c90:	2b45      	cmp	r3, #69	; 0x45
 8004c92:	f000 8085 	beq.w	8004da0 <_scanf_float+0x1f0>
 8004c96:	2b46      	cmp	r3, #70	; 0x46
 8004c98:	d06a      	beq.n	8004d70 <_scanf_float+0x1c0>
 8004c9a:	2b41      	cmp	r3, #65	; 0x41
 8004c9c:	d1c1      	bne.n	8004c22 <_scanf_float+0x72>
 8004c9e:	2a01      	cmp	r2, #1
 8004ca0:	d1bf      	bne.n	8004c22 <_scanf_float+0x72>
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	e046      	b.n	8004d34 <_scanf_float+0x184>
 8004ca6:	2b65      	cmp	r3, #101	; 0x65
 8004ca8:	d07a      	beq.n	8004da0 <_scanf_float+0x1f0>
 8004caa:	d818      	bhi.n	8004cde <_scanf_float+0x12e>
 8004cac:	2b54      	cmp	r3, #84	; 0x54
 8004cae:	d066      	beq.n	8004d7e <_scanf_float+0x1ce>
 8004cb0:	d811      	bhi.n	8004cd6 <_scanf_float+0x126>
 8004cb2:	2b4e      	cmp	r3, #78	; 0x4e
 8004cb4:	d1b5      	bne.n	8004c22 <_scanf_float+0x72>
 8004cb6:	2a00      	cmp	r2, #0
 8004cb8:	d146      	bne.n	8004d48 <_scanf_float+0x198>
 8004cba:	f1b9 0f00 	cmp.w	r9, #0
 8004cbe:	d145      	bne.n	8004d4c <_scanf_float+0x19c>
 8004cc0:	6821      	ldr	r1, [r4, #0]
 8004cc2:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004cc6:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004cca:	d13f      	bne.n	8004d4c <_scanf_float+0x19c>
 8004ccc:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004cd0:	6021      	str	r1, [r4, #0]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	e02e      	b.n	8004d34 <_scanf_float+0x184>
 8004cd6:	2b59      	cmp	r3, #89	; 0x59
 8004cd8:	d01e      	beq.n	8004d18 <_scanf_float+0x168>
 8004cda:	2b61      	cmp	r3, #97	; 0x61
 8004cdc:	e7de      	b.n	8004c9c <_scanf_float+0xec>
 8004cde:	2b6e      	cmp	r3, #110	; 0x6e
 8004ce0:	d0e9      	beq.n	8004cb6 <_scanf_float+0x106>
 8004ce2:	d815      	bhi.n	8004d10 <_scanf_float+0x160>
 8004ce4:	2b66      	cmp	r3, #102	; 0x66
 8004ce6:	d043      	beq.n	8004d70 <_scanf_float+0x1c0>
 8004ce8:	2b69      	cmp	r3, #105	; 0x69
 8004cea:	d19a      	bne.n	8004c22 <_scanf_float+0x72>
 8004cec:	f1bb 0f00 	cmp.w	fp, #0
 8004cf0:	d138      	bne.n	8004d64 <_scanf_float+0x1b4>
 8004cf2:	f1b9 0f00 	cmp.w	r9, #0
 8004cf6:	d197      	bne.n	8004c28 <_scanf_float+0x78>
 8004cf8:	6821      	ldr	r1, [r4, #0]
 8004cfa:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004cfe:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004d02:	d195      	bne.n	8004c30 <_scanf_float+0x80>
 8004d04:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004d08:	6021      	str	r1, [r4, #0]
 8004d0a:	f04f 0b01 	mov.w	fp, #1
 8004d0e:	e011      	b.n	8004d34 <_scanf_float+0x184>
 8004d10:	2b74      	cmp	r3, #116	; 0x74
 8004d12:	d034      	beq.n	8004d7e <_scanf_float+0x1ce>
 8004d14:	2b79      	cmp	r3, #121	; 0x79
 8004d16:	d184      	bne.n	8004c22 <_scanf_float+0x72>
 8004d18:	f1bb 0f07 	cmp.w	fp, #7
 8004d1c:	d181      	bne.n	8004c22 <_scanf_float+0x72>
 8004d1e:	f04f 0b08 	mov.w	fp, #8
 8004d22:	e007      	b.n	8004d34 <_scanf_float+0x184>
 8004d24:	eb12 0f0b 	cmn.w	r2, fp
 8004d28:	f47f af7b 	bne.w	8004c22 <_scanf_float+0x72>
 8004d2c:	6821      	ldr	r1, [r4, #0]
 8004d2e:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004d32:	6021      	str	r1, [r4, #0]
 8004d34:	702b      	strb	r3, [r5, #0]
 8004d36:	3501      	adds	r5, #1
 8004d38:	e79a      	b.n	8004c70 <_scanf_float+0xc0>
 8004d3a:	6821      	ldr	r1, [r4, #0]
 8004d3c:	0608      	lsls	r0, r1, #24
 8004d3e:	f57f af70 	bpl.w	8004c22 <_scanf_float+0x72>
 8004d42:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004d46:	e7f4      	b.n	8004d32 <_scanf_float+0x182>
 8004d48:	2a02      	cmp	r2, #2
 8004d4a:	d047      	beq.n	8004ddc <_scanf_float+0x22c>
 8004d4c:	f1bb 0f01 	cmp.w	fp, #1
 8004d50:	d003      	beq.n	8004d5a <_scanf_float+0x1aa>
 8004d52:	f1bb 0f04 	cmp.w	fp, #4
 8004d56:	f47f af64 	bne.w	8004c22 <_scanf_float+0x72>
 8004d5a:	f10b 0b01 	add.w	fp, fp, #1
 8004d5e:	fa5f fb8b 	uxtb.w	fp, fp
 8004d62:	e7e7      	b.n	8004d34 <_scanf_float+0x184>
 8004d64:	f1bb 0f03 	cmp.w	fp, #3
 8004d68:	d0f7      	beq.n	8004d5a <_scanf_float+0x1aa>
 8004d6a:	f1bb 0f05 	cmp.w	fp, #5
 8004d6e:	e7f2      	b.n	8004d56 <_scanf_float+0x1a6>
 8004d70:	f1bb 0f02 	cmp.w	fp, #2
 8004d74:	f47f af55 	bne.w	8004c22 <_scanf_float+0x72>
 8004d78:	f04f 0b03 	mov.w	fp, #3
 8004d7c:	e7da      	b.n	8004d34 <_scanf_float+0x184>
 8004d7e:	f1bb 0f06 	cmp.w	fp, #6
 8004d82:	f47f af4e 	bne.w	8004c22 <_scanf_float+0x72>
 8004d86:	f04f 0b07 	mov.w	fp, #7
 8004d8a:	e7d3      	b.n	8004d34 <_scanf_float+0x184>
 8004d8c:	6821      	ldr	r1, [r4, #0]
 8004d8e:	0588      	lsls	r0, r1, #22
 8004d90:	f57f af47 	bpl.w	8004c22 <_scanf_float+0x72>
 8004d94:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8004d98:	6021      	str	r1, [r4, #0]
 8004d9a:	f8cd 9008 	str.w	r9, [sp, #8]
 8004d9e:	e7c9      	b.n	8004d34 <_scanf_float+0x184>
 8004da0:	6821      	ldr	r1, [r4, #0]
 8004da2:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004da6:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004daa:	d006      	beq.n	8004dba <_scanf_float+0x20a>
 8004dac:	0548      	lsls	r0, r1, #21
 8004dae:	f57f af38 	bpl.w	8004c22 <_scanf_float+0x72>
 8004db2:	f1b9 0f00 	cmp.w	r9, #0
 8004db6:	f43f af3b 	beq.w	8004c30 <_scanf_float+0x80>
 8004dba:	0588      	lsls	r0, r1, #22
 8004dbc:	bf58      	it	pl
 8004dbe:	9802      	ldrpl	r0, [sp, #8]
 8004dc0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004dc4:	bf58      	it	pl
 8004dc6:	eba9 0000 	subpl.w	r0, r9, r0
 8004dca:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004dce:	bf58      	it	pl
 8004dd0:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004dd4:	6021      	str	r1, [r4, #0]
 8004dd6:	f04f 0900 	mov.w	r9, #0
 8004dda:	e7ab      	b.n	8004d34 <_scanf_float+0x184>
 8004ddc:	2203      	movs	r2, #3
 8004dde:	e7a9      	b.n	8004d34 <_scanf_float+0x184>
 8004de0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004de4:	4631      	mov	r1, r6
 8004de6:	4638      	mov	r0, r7
 8004de8:	9205      	str	r2, [sp, #20]
 8004dea:	4798      	blx	r3
 8004dec:	9a05      	ldr	r2, [sp, #20]
 8004dee:	2800      	cmp	r0, #0
 8004df0:	f43f af04 	beq.w	8004bfc <_scanf_float+0x4c>
 8004df4:	e715      	b.n	8004c22 <_scanf_float+0x72>
 8004df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004dfa:	4632      	mov	r2, r6
 8004dfc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004e00:	4638      	mov	r0, r7
 8004e02:	4798      	blx	r3
 8004e04:	6923      	ldr	r3, [r4, #16]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	6123      	str	r3, [r4, #16]
 8004e0a:	e715      	b.n	8004c38 <_scanf_float+0x88>
 8004e0c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004e10:	2b06      	cmp	r3, #6
 8004e12:	d80a      	bhi.n	8004e2a <_scanf_float+0x27a>
 8004e14:	f1bb 0f02 	cmp.w	fp, #2
 8004e18:	d967      	bls.n	8004eea <_scanf_float+0x33a>
 8004e1a:	f1ab 0b03 	sub.w	fp, fp, #3
 8004e1e:	fa5f fb8b 	uxtb.w	fp, fp
 8004e22:	eba5 0b0b 	sub.w	fp, r5, fp
 8004e26:	455d      	cmp	r5, fp
 8004e28:	d14a      	bne.n	8004ec0 <_scanf_float+0x310>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	05da      	lsls	r2, r3, #23
 8004e2e:	d51f      	bpl.n	8004e70 <_scanf_float+0x2c0>
 8004e30:	055b      	lsls	r3, r3, #21
 8004e32:	d467      	bmi.n	8004f04 <_scanf_float+0x354>
 8004e34:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004e38:	6923      	ldr	r3, [r4, #16]
 8004e3a:	2965      	cmp	r1, #101	; 0x65
 8004e3c:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e40:	f105 3bff 	add.w	fp, r5, #4294967295
 8004e44:	6123      	str	r3, [r4, #16]
 8004e46:	d00d      	beq.n	8004e64 <_scanf_float+0x2b4>
 8004e48:	2945      	cmp	r1, #69	; 0x45
 8004e4a:	d00b      	beq.n	8004e64 <_scanf_float+0x2b4>
 8004e4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e50:	4632      	mov	r2, r6
 8004e52:	4638      	mov	r0, r7
 8004e54:	4798      	blx	r3
 8004e56:	6923      	ldr	r3, [r4, #16]
 8004e58:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	f1a5 0b02 	sub.w	fp, r5, #2
 8004e62:	6123      	str	r3, [r4, #16]
 8004e64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004e68:	4632      	mov	r2, r6
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	4798      	blx	r3
 8004e6e:	465d      	mov	r5, fp
 8004e70:	6826      	ldr	r6, [r4, #0]
 8004e72:	f016 0610 	ands.w	r6, r6, #16
 8004e76:	d176      	bne.n	8004f66 <_scanf_float+0x3b6>
 8004e78:	702e      	strb	r6, [r5, #0]
 8004e7a:	6823      	ldr	r3, [r4, #0]
 8004e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e84:	d141      	bne.n	8004f0a <_scanf_float+0x35a>
 8004e86:	9b02      	ldr	r3, [sp, #8]
 8004e88:	eba9 0303 	sub.w	r3, r9, r3
 8004e8c:	425a      	negs	r2, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d148      	bne.n	8004f24 <_scanf_float+0x374>
 8004e92:	4641      	mov	r1, r8
 8004e94:	2200      	movs	r2, #0
 8004e96:	4638      	mov	r0, r7
 8004e98:	f000 feb2 	bl	8005c00 <_strtod_r>
 8004e9c:	6825      	ldr	r5, [r4, #0]
 8004e9e:	4680      	mov	r8, r0
 8004ea0:	f015 0f02 	tst.w	r5, #2
 8004ea4:	4689      	mov	r9, r1
 8004ea6:	f8da 3000 	ldr.w	r3, [sl]
 8004eaa:	d046      	beq.n	8004f3a <_scanf_float+0x38a>
 8004eac:	1d1a      	adds	r2, r3, #4
 8004eae:	f8ca 2000 	str.w	r2, [sl]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	e9c3 8900 	strd	r8, r9, [r3]
 8004eb8:	68e3      	ldr	r3, [r4, #12]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60e3      	str	r3, [r4, #12]
 8004ebe:	e6bf      	b.n	8004c40 <_scanf_float+0x90>
 8004ec0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ec4:	4632      	mov	r2, r6
 8004ec6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004eca:	4638      	mov	r0, r7
 8004ecc:	4798      	blx	r3
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	e7a7      	b.n	8004e26 <_scanf_float+0x276>
 8004ed6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004eda:	4632      	mov	r2, r6
 8004edc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	4798      	blx	r3
 8004ee4:	6923      	ldr	r3, [r4, #16]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	4545      	cmp	r5, r8
 8004eec:	d8f3      	bhi.n	8004ed6 <_scanf_float+0x326>
 8004eee:	e6a6      	b.n	8004c3e <_scanf_float+0x8e>
 8004ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004efa:	4638      	mov	r0, r7
 8004efc:	4798      	blx	r3
 8004efe:	6923      	ldr	r3, [r4, #16]
 8004f00:	3b01      	subs	r3, #1
 8004f02:	6123      	str	r3, [r4, #16]
 8004f04:	4545      	cmp	r5, r8
 8004f06:	d8f3      	bhi.n	8004ef0 <_scanf_float+0x340>
 8004f08:	e699      	b.n	8004c3e <_scanf_float+0x8e>
 8004f0a:	9b03      	ldr	r3, [sp, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d0c0      	beq.n	8004e92 <_scanf_float+0x2e2>
 8004f10:	9904      	ldr	r1, [sp, #16]
 8004f12:	230a      	movs	r3, #10
 8004f14:	4632      	mov	r2, r6
 8004f16:	3101      	adds	r1, #1
 8004f18:	4638      	mov	r0, r7
 8004f1a:	f000 fefd 	bl	8005d18 <_strtol_r>
 8004f1e:	9b03      	ldr	r3, [sp, #12]
 8004f20:	9d04      	ldr	r5, [sp, #16]
 8004f22:	1ac2      	subs	r2, r0, r3
 8004f24:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004f28:	429d      	cmp	r5, r3
 8004f2a:	bf28      	it	cs
 8004f2c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004f30:	490e      	ldr	r1, [pc, #56]	; (8004f6c <_scanf_float+0x3bc>)
 8004f32:	4628      	mov	r0, r5
 8004f34:	f000 f820 	bl	8004f78 <siprintf>
 8004f38:	e7ab      	b.n	8004e92 <_scanf_float+0x2e2>
 8004f3a:	1d1f      	adds	r7, r3, #4
 8004f3c:	f015 0504 	ands.w	r5, r5, #4
 8004f40:	f8ca 7000 	str.w	r7, [sl]
 8004f44:	d1b5      	bne.n	8004eb2 <_scanf_float+0x302>
 8004f46:	681f      	ldr	r7, [r3, #0]
 8004f48:	4602      	mov	r2, r0
 8004f4a:	460b      	mov	r3, r1
 8004f4c:	f7fb fd76 	bl	8000a3c <__aeabi_dcmpun>
 8004f50:	b120      	cbz	r0, 8004f5c <_scanf_float+0x3ac>
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 f80c 	bl	8004f70 <nanf>
 8004f58:	6038      	str	r0, [r7, #0]
 8004f5a:	e7ad      	b.n	8004eb8 <_scanf_float+0x308>
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	4649      	mov	r1, r9
 8004f60:	f7fb fdca 	bl	8000af8 <__aeabi_d2f>
 8004f64:	e7f8      	b.n	8004f58 <_scanf_float+0x3a8>
 8004f66:	2600      	movs	r6, #0
 8004f68:	e66a      	b.n	8004c40 <_scanf_float+0x90>
 8004f6a:	bf00      	nop
 8004f6c:	08007eb8 	.word	0x08007eb8

08004f70 <nanf>:
 8004f70:	4800      	ldr	r0, [pc, #0]	; (8004f74 <nanf+0x4>)
 8004f72:	4770      	bx	lr
 8004f74:	7fc00000 	.word	0x7fc00000

08004f78 <siprintf>:
 8004f78:	b40e      	push	{r1, r2, r3}
 8004f7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f7e:	b500      	push	{lr}
 8004f80:	b09c      	sub	sp, #112	; 0x70
 8004f82:	ab1d      	add	r3, sp, #116	; 0x74
 8004f84:	9002      	str	r0, [sp, #8]
 8004f86:	9006      	str	r0, [sp, #24]
 8004f88:	9107      	str	r1, [sp, #28]
 8004f8a:	9104      	str	r1, [sp, #16]
 8004f8c:	4808      	ldr	r0, [pc, #32]	; (8004fb0 <siprintf+0x38>)
 8004f8e:	4909      	ldr	r1, [pc, #36]	; (8004fb4 <siprintf+0x3c>)
 8004f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f94:	9105      	str	r1, [sp, #20]
 8004f96:	6800      	ldr	r0, [r0, #0]
 8004f98:	a902      	add	r1, sp, #8
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	f002 fd86 	bl	8007aac <_svfiprintf_r>
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	9b02      	ldr	r3, [sp, #8]
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	b01c      	add	sp, #112	; 0x70
 8004fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fac:	b003      	add	sp, #12
 8004fae:	4770      	bx	lr
 8004fb0:	20000010 	.word	0x20000010
 8004fb4:	ffff0208 	.word	0xffff0208

08004fb8 <sulp>:
 8004fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	4690      	mov	r8, r2
 8004fc0:	f002 fb38 	bl	8007634 <__ulp>
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	460d      	mov	r5, r1
 8004fc8:	f1b8 0f00 	cmp.w	r8, #0
 8004fcc:	d011      	beq.n	8004ff2 <sulp+0x3a>
 8004fce:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004fd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	dd0b      	ble.n	8004ff2 <sulp+0x3a>
 8004fda:	2400      	movs	r4, #0
 8004fdc:	051b      	lsls	r3, r3, #20
 8004fde:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004fe2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004fe6:	4622      	mov	r2, r4
 8004fe8:	462b      	mov	r3, r5
 8004fea:	f7fb fa8d 	bl	8000508 <__aeabi_dmul>
 8004fee:	4604      	mov	r4, r0
 8004ff0:	460d      	mov	r5, r1
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ffa:	0000      	movs	r0, r0
 8004ffc:	0000      	movs	r0, r0
	...

08005000 <_strtod_l>:
 8005000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005004:	461f      	mov	r7, r3
 8005006:	2300      	movs	r3, #0
 8005008:	b0a1      	sub	sp, #132	; 0x84
 800500a:	4683      	mov	fp, r0
 800500c:	4638      	mov	r0, r7
 800500e:	460e      	mov	r6, r1
 8005010:	9217      	str	r2, [sp, #92]	; 0x5c
 8005012:	931c      	str	r3, [sp, #112]	; 0x70
 8005014:	f001 ffff 	bl	8007016 <__localeconv_l>
 8005018:	4680      	mov	r8, r0
 800501a:	6800      	ldr	r0, [r0, #0]
 800501c:	f7fb f8b0 	bl	8000180 <strlen>
 8005020:	f04f 0900 	mov.w	r9, #0
 8005024:	4604      	mov	r4, r0
 8005026:	f04f 0a00 	mov.w	sl, #0
 800502a:	961b      	str	r6, [sp, #108]	; 0x6c
 800502c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800502e:	781a      	ldrb	r2, [r3, #0]
 8005030:	2a0d      	cmp	r2, #13
 8005032:	d832      	bhi.n	800509a <_strtod_l+0x9a>
 8005034:	2a09      	cmp	r2, #9
 8005036:	d236      	bcs.n	80050a6 <_strtod_l+0xa6>
 8005038:	2a00      	cmp	r2, #0
 800503a:	d03e      	beq.n	80050ba <_strtod_l+0xba>
 800503c:	2300      	movs	r3, #0
 800503e:	930d      	str	r3, [sp, #52]	; 0x34
 8005040:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005042:	782b      	ldrb	r3, [r5, #0]
 8005044:	2b30      	cmp	r3, #48	; 0x30
 8005046:	f040 80ac 	bne.w	80051a2 <_strtod_l+0x1a2>
 800504a:	786b      	ldrb	r3, [r5, #1]
 800504c:	2b58      	cmp	r3, #88	; 0x58
 800504e:	d001      	beq.n	8005054 <_strtod_l+0x54>
 8005050:	2b78      	cmp	r3, #120	; 0x78
 8005052:	d167      	bne.n	8005124 <_strtod_l+0x124>
 8005054:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005056:	9702      	str	r7, [sp, #8]
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	ab1c      	add	r3, sp, #112	; 0x70
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	4a89      	ldr	r2, [pc, #548]	; (8005284 <_strtod_l+0x284>)
 8005060:	ab1d      	add	r3, sp, #116	; 0x74
 8005062:	a91b      	add	r1, sp, #108	; 0x6c
 8005064:	4658      	mov	r0, fp
 8005066:	f001 fcfb 	bl	8006a60 <__gethex>
 800506a:	f010 0407 	ands.w	r4, r0, #7
 800506e:	4606      	mov	r6, r0
 8005070:	d005      	beq.n	800507e <_strtod_l+0x7e>
 8005072:	2c06      	cmp	r4, #6
 8005074:	d12b      	bne.n	80050ce <_strtod_l+0xce>
 8005076:	2300      	movs	r3, #0
 8005078:	3501      	adds	r5, #1
 800507a:	951b      	str	r5, [sp, #108]	; 0x6c
 800507c:	930d      	str	r3, [sp, #52]	; 0x34
 800507e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005080:	2b00      	cmp	r3, #0
 8005082:	f040 85a6 	bne.w	8005bd2 <_strtod_l+0xbd2>
 8005086:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005088:	b1e3      	cbz	r3, 80050c4 <_strtod_l+0xc4>
 800508a:	464a      	mov	r2, r9
 800508c:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 8005090:	4610      	mov	r0, r2
 8005092:	4619      	mov	r1, r3
 8005094:	b021      	add	sp, #132	; 0x84
 8005096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800509a:	2a2b      	cmp	r2, #43	; 0x2b
 800509c:	d015      	beq.n	80050ca <_strtod_l+0xca>
 800509e:	2a2d      	cmp	r2, #45	; 0x2d
 80050a0:	d004      	beq.n	80050ac <_strtod_l+0xac>
 80050a2:	2a20      	cmp	r2, #32
 80050a4:	d1ca      	bne.n	800503c <_strtod_l+0x3c>
 80050a6:	3301      	adds	r3, #1
 80050a8:	931b      	str	r3, [sp, #108]	; 0x6c
 80050aa:	e7bf      	b.n	800502c <_strtod_l+0x2c>
 80050ac:	2201      	movs	r2, #1
 80050ae:	920d      	str	r2, [sp, #52]	; 0x34
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80050b4:	785b      	ldrb	r3, [r3, #1]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1c2      	bne.n	8005040 <_strtod_l+0x40>
 80050ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80050bc:	961b      	str	r6, [sp, #108]	; 0x6c
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f040 8585 	bne.w	8005bce <_strtod_l+0xbce>
 80050c4:	464a      	mov	r2, r9
 80050c6:	4653      	mov	r3, sl
 80050c8:	e7e2      	b.n	8005090 <_strtod_l+0x90>
 80050ca:	2200      	movs	r2, #0
 80050cc:	e7ef      	b.n	80050ae <_strtod_l+0xae>
 80050ce:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80050d0:	b13a      	cbz	r2, 80050e2 <_strtod_l+0xe2>
 80050d2:	2135      	movs	r1, #53	; 0x35
 80050d4:	a81e      	add	r0, sp, #120	; 0x78
 80050d6:	f002 fba0 	bl	800781a <__copybits>
 80050da:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050dc:	4658      	mov	r0, fp
 80050de:	f002 f812 	bl	8007106 <_Bfree>
 80050e2:	3c01      	subs	r4, #1
 80050e4:	2c04      	cmp	r4, #4
 80050e6:	d806      	bhi.n	80050f6 <_strtod_l+0xf6>
 80050e8:	e8df f004 	tbb	[pc, r4]
 80050ec:	1714030a 	.word	0x1714030a
 80050f0:	0a          	.byte	0x0a
 80050f1:	00          	.byte	0x00
 80050f2:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 80050f6:	0731      	lsls	r1, r6, #28
 80050f8:	d5c1      	bpl.n	800507e <_strtod_l+0x7e>
 80050fa:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 80050fe:	e7be      	b.n	800507e <_strtod_l+0x7e>
 8005100:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8005102:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 8005106:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800510a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800510e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 8005112:	e7f0      	b.n	80050f6 <_strtod_l+0xf6>
 8005114:	f8df a170 	ldr.w	sl, [pc, #368]	; 8005288 <_strtod_l+0x288>
 8005118:	e7ed      	b.n	80050f6 <_strtod_l+0xf6>
 800511a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800511e:	f04f 39ff 	mov.w	r9, #4294967295
 8005122:	e7e8      	b.n	80050f6 <_strtod_l+0xf6>
 8005124:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	921b      	str	r2, [sp, #108]	; 0x6c
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	2b30      	cmp	r3, #48	; 0x30
 800512e:	d0f9      	beq.n	8005124 <_strtod_l+0x124>
 8005130:	2b00      	cmp	r3, #0
 8005132:	d0a4      	beq.n	800507e <_strtod_l+0x7e>
 8005134:	2301      	movs	r3, #1
 8005136:	2500      	movs	r5, #0
 8005138:	220a      	movs	r2, #10
 800513a:	9307      	str	r3, [sp, #28]
 800513c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800513e:	9506      	str	r5, [sp, #24]
 8005140:	9308      	str	r3, [sp, #32]
 8005142:	9504      	str	r5, [sp, #16]
 8005144:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005146:	7807      	ldrb	r7, [r0, #0]
 8005148:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800514c:	b2d9      	uxtb	r1, r3
 800514e:	2909      	cmp	r1, #9
 8005150:	d929      	bls.n	80051a6 <_strtod_l+0x1a6>
 8005152:	4622      	mov	r2, r4
 8005154:	f8d8 1000 	ldr.w	r1, [r8]
 8005158:	f002 fdb0 	bl	8007cbc <strncmp>
 800515c:	2800      	cmp	r0, #0
 800515e:	d031      	beq.n	80051c4 <_strtod_l+0x1c4>
 8005160:	2000      	movs	r0, #0
 8005162:	463b      	mov	r3, r7
 8005164:	4602      	mov	r2, r0
 8005166:	9c04      	ldr	r4, [sp, #16]
 8005168:	9005      	str	r0, [sp, #20]
 800516a:	2b65      	cmp	r3, #101	; 0x65
 800516c:	d001      	beq.n	8005172 <_strtod_l+0x172>
 800516e:	2b45      	cmp	r3, #69	; 0x45
 8005170:	d114      	bne.n	800519c <_strtod_l+0x19c>
 8005172:	b924      	cbnz	r4, 800517e <_strtod_l+0x17e>
 8005174:	b910      	cbnz	r0, 800517c <_strtod_l+0x17c>
 8005176:	9b07      	ldr	r3, [sp, #28]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d09e      	beq.n	80050ba <_strtod_l+0xba>
 800517c:	2400      	movs	r4, #0
 800517e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8005180:	1c73      	adds	r3, r6, #1
 8005182:	931b      	str	r3, [sp, #108]	; 0x6c
 8005184:	7873      	ldrb	r3, [r6, #1]
 8005186:	2b2b      	cmp	r3, #43	; 0x2b
 8005188:	d078      	beq.n	800527c <_strtod_l+0x27c>
 800518a:	2b2d      	cmp	r3, #45	; 0x2d
 800518c:	d070      	beq.n	8005270 <_strtod_l+0x270>
 800518e:	f04f 0c00 	mov.w	ip, #0
 8005192:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8005196:	2f09      	cmp	r7, #9
 8005198:	d97c      	bls.n	8005294 <_strtod_l+0x294>
 800519a:	961b      	str	r6, [sp, #108]	; 0x6c
 800519c:	f04f 0e00 	mov.w	lr, #0
 80051a0:	e09a      	b.n	80052d8 <_strtod_l+0x2d8>
 80051a2:	2300      	movs	r3, #0
 80051a4:	e7c7      	b.n	8005136 <_strtod_l+0x136>
 80051a6:	9904      	ldr	r1, [sp, #16]
 80051a8:	3001      	adds	r0, #1
 80051aa:	2908      	cmp	r1, #8
 80051ac:	bfd7      	itett	le
 80051ae:	9906      	ldrle	r1, [sp, #24]
 80051b0:	fb02 3505 	mlagt	r5, r2, r5, r3
 80051b4:	fb02 3301 	mlale	r3, r2, r1, r3
 80051b8:	9306      	strle	r3, [sp, #24]
 80051ba:	9b04      	ldr	r3, [sp, #16]
 80051bc:	901b      	str	r0, [sp, #108]	; 0x6c
 80051be:	3301      	adds	r3, #1
 80051c0:	9304      	str	r3, [sp, #16]
 80051c2:	e7bf      	b.n	8005144 <_strtod_l+0x144>
 80051c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051c6:	191a      	adds	r2, r3, r4
 80051c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80051ca:	9a04      	ldr	r2, [sp, #16]
 80051cc:	5d1b      	ldrb	r3, [r3, r4]
 80051ce:	2a00      	cmp	r2, #0
 80051d0:	d037      	beq.n	8005242 <_strtod_l+0x242>
 80051d2:	4602      	mov	r2, r0
 80051d4:	9c04      	ldr	r4, [sp, #16]
 80051d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80051da:	2909      	cmp	r1, #9
 80051dc:	d913      	bls.n	8005206 <_strtod_l+0x206>
 80051de:	2101      	movs	r1, #1
 80051e0:	9105      	str	r1, [sp, #20]
 80051e2:	e7c2      	b.n	800516a <_strtod_l+0x16a>
 80051e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80051e6:	3001      	adds	r0, #1
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80051ec:	785b      	ldrb	r3, [r3, #1]
 80051ee:	2b30      	cmp	r3, #48	; 0x30
 80051f0:	d0f8      	beq.n	80051e4 <_strtod_l+0x1e4>
 80051f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80051f6:	2a08      	cmp	r2, #8
 80051f8:	f200 84f0 	bhi.w	8005bdc <_strtod_l+0xbdc>
 80051fc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80051fe:	9208      	str	r2, [sp, #32]
 8005200:	4602      	mov	r2, r0
 8005202:	2000      	movs	r0, #0
 8005204:	4604      	mov	r4, r0
 8005206:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800520a:	f100 0101 	add.w	r1, r0, #1
 800520e:	d012      	beq.n	8005236 <_strtod_l+0x236>
 8005210:	440a      	add	r2, r1
 8005212:	270a      	movs	r7, #10
 8005214:	4621      	mov	r1, r4
 8005216:	eb00 0c04 	add.w	ip, r0, r4
 800521a:	458c      	cmp	ip, r1
 800521c:	d113      	bne.n	8005246 <_strtod_l+0x246>
 800521e:	1821      	adds	r1, r4, r0
 8005220:	2908      	cmp	r1, #8
 8005222:	f104 0401 	add.w	r4, r4, #1
 8005226:	4404      	add	r4, r0
 8005228:	dc19      	bgt.n	800525e <_strtod_l+0x25e>
 800522a:	210a      	movs	r1, #10
 800522c:	9b06      	ldr	r3, [sp, #24]
 800522e:	fb01 e303 	mla	r3, r1, r3, lr
 8005232:	9306      	str	r3, [sp, #24]
 8005234:	2100      	movs	r1, #0
 8005236:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005238:	1c58      	adds	r0, r3, #1
 800523a:	901b      	str	r0, [sp, #108]	; 0x6c
 800523c:	785b      	ldrb	r3, [r3, #1]
 800523e:	4608      	mov	r0, r1
 8005240:	e7c9      	b.n	80051d6 <_strtod_l+0x1d6>
 8005242:	9804      	ldr	r0, [sp, #16]
 8005244:	e7d3      	b.n	80051ee <_strtod_l+0x1ee>
 8005246:	2908      	cmp	r1, #8
 8005248:	f101 0101 	add.w	r1, r1, #1
 800524c:	dc03      	bgt.n	8005256 <_strtod_l+0x256>
 800524e:	9b06      	ldr	r3, [sp, #24]
 8005250:	437b      	muls	r3, r7
 8005252:	9306      	str	r3, [sp, #24]
 8005254:	e7e1      	b.n	800521a <_strtod_l+0x21a>
 8005256:	2910      	cmp	r1, #16
 8005258:	bfd8      	it	le
 800525a:	437d      	mulle	r5, r7
 800525c:	e7dd      	b.n	800521a <_strtod_l+0x21a>
 800525e:	2c10      	cmp	r4, #16
 8005260:	bfdc      	itt	le
 8005262:	210a      	movle	r1, #10
 8005264:	fb01 e505 	mlale	r5, r1, r5, lr
 8005268:	e7e4      	b.n	8005234 <_strtod_l+0x234>
 800526a:	2301      	movs	r3, #1
 800526c:	9305      	str	r3, [sp, #20]
 800526e:	e781      	b.n	8005174 <_strtod_l+0x174>
 8005270:	f04f 0c01 	mov.w	ip, #1
 8005274:	1cb3      	adds	r3, r6, #2
 8005276:	931b      	str	r3, [sp, #108]	; 0x6c
 8005278:	78b3      	ldrb	r3, [r6, #2]
 800527a:	e78a      	b.n	8005192 <_strtod_l+0x192>
 800527c:	f04f 0c00 	mov.w	ip, #0
 8005280:	e7f8      	b.n	8005274 <_strtod_l+0x274>
 8005282:	bf00      	nop
 8005284:	08007ec0 	.word	0x08007ec0
 8005288:	7ff00000 	.word	0x7ff00000
 800528c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800528e:	1c5f      	adds	r7, r3, #1
 8005290:	971b      	str	r7, [sp, #108]	; 0x6c
 8005292:	785b      	ldrb	r3, [r3, #1]
 8005294:	2b30      	cmp	r3, #48	; 0x30
 8005296:	d0f9      	beq.n	800528c <_strtod_l+0x28c>
 8005298:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800529c:	2f08      	cmp	r7, #8
 800529e:	f63f af7d 	bhi.w	800519c <_strtod_l+0x19c>
 80052a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80052a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052a8:	9309      	str	r3, [sp, #36]	; 0x24
 80052aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80052ac:	1c5f      	adds	r7, r3, #1
 80052ae:	971b      	str	r7, [sp, #108]	; 0x6c
 80052b0:	785b      	ldrb	r3, [r3, #1]
 80052b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80052b6:	f1b8 0f09 	cmp.w	r8, #9
 80052ba:	d937      	bls.n	800532c <_strtod_l+0x32c>
 80052bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052be:	1a7f      	subs	r7, r7, r1
 80052c0:	2f08      	cmp	r7, #8
 80052c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80052c6:	dc37      	bgt.n	8005338 <_strtod_l+0x338>
 80052c8:	45be      	cmp	lr, r7
 80052ca:	bfa8      	it	ge
 80052cc:	46be      	movge	lr, r7
 80052ce:	f1bc 0f00 	cmp.w	ip, #0
 80052d2:	d001      	beq.n	80052d8 <_strtod_l+0x2d8>
 80052d4:	f1ce 0e00 	rsb	lr, lr, #0
 80052d8:	2c00      	cmp	r4, #0
 80052da:	d151      	bne.n	8005380 <_strtod_l+0x380>
 80052dc:	2800      	cmp	r0, #0
 80052de:	f47f aece 	bne.w	800507e <_strtod_l+0x7e>
 80052e2:	9a07      	ldr	r2, [sp, #28]
 80052e4:	2a00      	cmp	r2, #0
 80052e6:	f47f aeca 	bne.w	800507e <_strtod_l+0x7e>
 80052ea:	9a05      	ldr	r2, [sp, #20]
 80052ec:	2a00      	cmp	r2, #0
 80052ee:	f47f aee4 	bne.w	80050ba <_strtod_l+0xba>
 80052f2:	2b4e      	cmp	r3, #78	; 0x4e
 80052f4:	d027      	beq.n	8005346 <_strtod_l+0x346>
 80052f6:	dc21      	bgt.n	800533c <_strtod_l+0x33c>
 80052f8:	2b49      	cmp	r3, #73	; 0x49
 80052fa:	f47f aede 	bne.w	80050ba <_strtod_l+0xba>
 80052fe:	49a4      	ldr	r1, [pc, #656]	; (8005590 <_strtod_l+0x590>)
 8005300:	a81b      	add	r0, sp, #108	; 0x6c
 8005302:	f001 fde1 	bl	8006ec8 <__match>
 8005306:	2800      	cmp	r0, #0
 8005308:	f43f aed7 	beq.w	80050ba <_strtod_l+0xba>
 800530c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800530e:	49a1      	ldr	r1, [pc, #644]	; (8005594 <_strtod_l+0x594>)
 8005310:	3b01      	subs	r3, #1
 8005312:	a81b      	add	r0, sp, #108	; 0x6c
 8005314:	931b      	str	r3, [sp, #108]	; 0x6c
 8005316:	f001 fdd7 	bl	8006ec8 <__match>
 800531a:	b910      	cbnz	r0, 8005322 <_strtod_l+0x322>
 800531c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800531e:	3301      	adds	r3, #1
 8005320:	931b      	str	r3, [sp, #108]	; 0x6c
 8005322:	f8df a284 	ldr.w	sl, [pc, #644]	; 80055a8 <_strtod_l+0x5a8>
 8005326:	f04f 0900 	mov.w	r9, #0
 800532a:	e6a8      	b.n	800507e <_strtod_l+0x7e>
 800532c:	210a      	movs	r1, #10
 800532e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8005332:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005336:	e7b8      	b.n	80052aa <_strtod_l+0x2aa>
 8005338:	46be      	mov	lr, r7
 800533a:	e7c8      	b.n	80052ce <_strtod_l+0x2ce>
 800533c:	2b69      	cmp	r3, #105	; 0x69
 800533e:	d0de      	beq.n	80052fe <_strtod_l+0x2fe>
 8005340:	2b6e      	cmp	r3, #110	; 0x6e
 8005342:	f47f aeba 	bne.w	80050ba <_strtod_l+0xba>
 8005346:	4994      	ldr	r1, [pc, #592]	; (8005598 <_strtod_l+0x598>)
 8005348:	a81b      	add	r0, sp, #108	; 0x6c
 800534a:	f001 fdbd 	bl	8006ec8 <__match>
 800534e:	2800      	cmp	r0, #0
 8005350:	f43f aeb3 	beq.w	80050ba <_strtod_l+0xba>
 8005354:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b28      	cmp	r3, #40	; 0x28
 800535a:	d10e      	bne.n	800537a <_strtod_l+0x37a>
 800535c:	aa1e      	add	r2, sp, #120	; 0x78
 800535e:	498f      	ldr	r1, [pc, #572]	; (800559c <_strtod_l+0x59c>)
 8005360:	a81b      	add	r0, sp, #108	; 0x6c
 8005362:	f001 fdc5 	bl	8006ef0 <__hexnan>
 8005366:	2805      	cmp	r0, #5
 8005368:	d107      	bne.n	800537a <_strtod_l+0x37a>
 800536a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800536c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 8005370:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 8005374:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 8005378:	e681      	b.n	800507e <_strtod_l+0x7e>
 800537a:	f8df a234 	ldr.w	sl, [pc, #564]	; 80055b0 <_strtod_l+0x5b0>
 800537e:	e7d2      	b.n	8005326 <_strtod_l+0x326>
 8005380:	ebae 0302 	sub.w	r3, lr, r2
 8005384:	9307      	str	r3, [sp, #28]
 8005386:	9b04      	ldr	r3, [sp, #16]
 8005388:	9806      	ldr	r0, [sp, #24]
 800538a:	2b00      	cmp	r3, #0
 800538c:	bf08      	it	eq
 800538e:	4623      	moveq	r3, r4
 8005390:	2c10      	cmp	r4, #16
 8005392:	9304      	str	r3, [sp, #16]
 8005394:	46a0      	mov	r8, r4
 8005396:	bfa8      	it	ge
 8005398:	f04f 0810 	movge.w	r8, #16
 800539c:	f7fb f83a 	bl	8000414 <__aeabi_ui2d>
 80053a0:	2c09      	cmp	r4, #9
 80053a2:	4681      	mov	r9, r0
 80053a4:	468a      	mov	sl, r1
 80053a6:	dc13      	bgt.n	80053d0 <_strtod_l+0x3d0>
 80053a8:	9b07      	ldr	r3, [sp, #28]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f43f ae67 	beq.w	800507e <_strtod_l+0x7e>
 80053b0:	9b07      	ldr	r3, [sp, #28]
 80053b2:	dd7e      	ble.n	80054b2 <_strtod_l+0x4b2>
 80053b4:	2b16      	cmp	r3, #22
 80053b6:	dc65      	bgt.n	8005484 <_strtod_l+0x484>
 80053b8:	4a79      	ldr	r2, [pc, #484]	; (80055a0 <_strtod_l+0x5a0>)
 80053ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80053be:	464a      	mov	r2, r9
 80053c0:	e9de 0100 	ldrd	r0, r1, [lr]
 80053c4:	4653      	mov	r3, sl
 80053c6:	f7fb f89f 	bl	8000508 <__aeabi_dmul>
 80053ca:	4681      	mov	r9, r0
 80053cc:	468a      	mov	sl, r1
 80053ce:	e656      	b.n	800507e <_strtod_l+0x7e>
 80053d0:	4b73      	ldr	r3, [pc, #460]	; (80055a0 <_strtod_l+0x5a0>)
 80053d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80053d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80053da:	f7fb f895 	bl	8000508 <__aeabi_dmul>
 80053de:	4606      	mov	r6, r0
 80053e0:	4628      	mov	r0, r5
 80053e2:	460f      	mov	r7, r1
 80053e4:	f7fb f816 	bl	8000414 <__aeabi_ui2d>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4630      	mov	r0, r6
 80053ee:	4639      	mov	r1, r7
 80053f0:	f7fa fed4 	bl	800019c <__adddf3>
 80053f4:	2c0f      	cmp	r4, #15
 80053f6:	4681      	mov	r9, r0
 80053f8:	468a      	mov	sl, r1
 80053fa:	ddd5      	ble.n	80053a8 <_strtod_l+0x3a8>
 80053fc:	9b07      	ldr	r3, [sp, #28]
 80053fe:	eba4 0808 	sub.w	r8, r4, r8
 8005402:	4498      	add	r8, r3
 8005404:	f1b8 0f00 	cmp.w	r8, #0
 8005408:	f340 809a 	ble.w	8005540 <_strtod_l+0x540>
 800540c:	f018 030f 	ands.w	r3, r8, #15
 8005410:	d00a      	beq.n	8005428 <_strtod_l+0x428>
 8005412:	4963      	ldr	r1, [pc, #396]	; (80055a0 <_strtod_l+0x5a0>)
 8005414:	464a      	mov	r2, r9
 8005416:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800541a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800541e:	4653      	mov	r3, sl
 8005420:	f7fb f872 	bl	8000508 <__aeabi_dmul>
 8005424:	4681      	mov	r9, r0
 8005426:	468a      	mov	sl, r1
 8005428:	f038 080f 	bics.w	r8, r8, #15
 800542c:	d077      	beq.n	800551e <_strtod_l+0x51e>
 800542e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005432:	dd4b      	ble.n	80054cc <_strtod_l+0x4cc>
 8005434:	f04f 0800 	mov.w	r8, #0
 8005438:	f8cd 8010 	str.w	r8, [sp, #16]
 800543c:	f8cd 8020 	str.w	r8, [sp, #32]
 8005440:	f8cd 8018 	str.w	r8, [sp, #24]
 8005444:	2322      	movs	r3, #34	; 0x22
 8005446:	f04f 0900 	mov.w	r9, #0
 800544a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 80055a8 <_strtod_l+0x5a8>
 800544e:	f8cb 3000 	str.w	r3, [fp]
 8005452:	9b08      	ldr	r3, [sp, #32]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f43f ae12 	beq.w	800507e <_strtod_l+0x7e>
 800545a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800545c:	4658      	mov	r0, fp
 800545e:	f001 fe52 	bl	8007106 <_Bfree>
 8005462:	9906      	ldr	r1, [sp, #24]
 8005464:	4658      	mov	r0, fp
 8005466:	f001 fe4e 	bl	8007106 <_Bfree>
 800546a:	9904      	ldr	r1, [sp, #16]
 800546c:	4658      	mov	r0, fp
 800546e:	f001 fe4a 	bl	8007106 <_Bfree>
 8005472:	9908      	ldr	r1, [sp, #32]
 8005474:	4658      	mov	r0, fp
 8005476:	f001 fe46 	bl	8007106 <_Bfree>
 800547a:	4641      	mov	r1, r8
 800547c:	4658      	mov	r0, fp
 800547e:	f001 fe42 	bl	8007106 <_Bfree>
 8005482:	e5fc      	b.n	800507e <_strtod_l+0x7e>
 8005484:	9a07      	ldr	r2, [sp, #28]
 8005486:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800548a:	4293      	cmp	r3, r2
 800548c:	dbb6      	blt.n	80053fc <_strtod_l+0x3fc>
 800548e:	4d44      	ldr	r5, [pc, #272]	; (80055a0 <_strtod_l+0x5a0>)
 8005490:	f1c4 040f 	rsb	r4, r4, #15
 8005494:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005498:	464a      	mov	r2, r9
 800549a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800549e:	4653      	mov	r3, sl
 80054a0:	f7fb f832 	bl	8000508 <__aeabi_dmul>
 80054a4:	9b07      	ldr	r3, [sp, #28]
 80054a6:	1b1c      	subs	r4, r3, r4
 80054a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80054ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054b0:	e789      	b.n	80053c6 <_strtod_l+0x3c6>
 80054b2:	f113 0f16 	cmn.w	r3, #22
 80054b6:	dba1      	blt.n	80053fc <_strtod_l+0x3fc>
 80054b8:	4a39      	ldr	r2, [pc, #228]	; (80055a0 <_strtod_l+0x5a0>)
 80054ba:	4648      	mov	r0, r9
 80054bc:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80054c0:	e9d2 2300 	ldrd	r2, r3, [r2]
 80054c4:	4651      	mov	r1, sl
 80054c6:	f7fb f949 	bl	800075c <__aeabi_ddiv>
 80054ca:	e77e      	b.n	80053ca <_strtod_l+0x3ca>
 80054cc:	2300      	movs	r3, #0
 80054ce:	4648      	mov	r0, r9
 80054d0:	4651      	mov	r1, sl
 80054d2:	461d      	mov	r5, r3
 80054d4:	4e33      	ldr	r6, [pc, #204]	; (80055a4 <_strtod_l+0x5a4>)
 80054d6:	ea4f 1828 	mov.w	r8, r8, asr #4
 80054da:	f1b8 0f01 	cmp.w	r8, #1
 80054de:	dc21      	bgt.n	8005524 <_strtod_l+0x524>
 80054e0:	b10b      	cbz	r3, 80054e6 <_strtod_l+0x4e6>
 80054e2:	4681      	mov	r9, r0
 80054e4:	468a      	mov	sl, r1
 80054e6:	4b2f      	ldr	r3, [pc, #188]	; (80055a4 <_strtod_l+0x5a4>)
 80054e8:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 80054ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80054f0:	464a      	mov	r2, r9
 80054f2:	e9d5 0100 	ldrd	r0, r1, [r5]
 80054f6:	4653      	mov	r3, sl
 80054f8:	f7fb f806 	bl	8000508 <__aeabi_dmul>
 80054fc:	4b2a      	ldr	r3, [pc, #168]	; (80055a8 <_strtod_l+0x5a8>)
 80054fe:	460a      	mov	r2, r1
 8005500:	400b      	ands	r3, r1
 8005502:	492a      	ldr	r1, [pc, #168]	; (80055ac <_strtod_l+0x5ac>)
 8005504:	4681      	mov	r9, r0
 8005506:	428b      	cmp	r3, r1
 8005508:	d894      	bhi.n	8005434 <_strtod_l+0x434>
 800550a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800550e:	428b      	cmp	r3, r1
 8005510:	bf86      	itte	hi
 8005512:	f04f 39ff 	movhi.w	r9, #4294967295
 8005516:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 80055b4 <_strtod_l+0x5b4>
 800551a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800551e:	2300      	movs	r3, #0
 8005520:	9305      	str	r3, [sp, #20]
 8005522:	e07b      	b.n	800561c <_strtod_l+0x61c>
 8005524:	f018 0f01 	tst.w	r8, #1
 8005528:	d006      	beq.n	8005538 <_strtod_l+0x538>
 800552a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005532:	f7fa ffe9 	bl	8000508 <__aeabi_dmul>
 8005536:	2301      	movs	r3, #1
 8005538:	3501      	adds	r5, #1
 800553a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800553e:	e7cc      	b.n	80054da <_strtod_l+0x4da>
 8005540:	d0ed      	beq.n	800551e <_strtod_l+0x51e>
 8005542:	f1c8 0800 	rsb	r8, r8, #0
 8005546:	f018 020f 	ands.w	r2, r8, #15
 800554a:	d00a      	beq.n	8005562 <_strtod_l+0x562>
 800554c:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <_strtod_l+0x5a0>)
 800554e:	4648      	mov	r0, r9
 8005550:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005554:	4651      	mov	r1, sl
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	f7fb f8ff 	bl	800075c <__aeabi_ddiv>
 800555e:	4681      	mov	r9, r0
 8005560:	468a      	mov	sl, r1
 8005562:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005566:	d0da      	beq.n	800551e <_strtod_l+0x51e>
 8005568:	f1b8 0f1f 	cmp.w	r8, #31
 800556c:	dd24      	ble.n	80055b8 <_strtod_l+0x5b8>
 800556e:	f04f 0800 	mov.w	r8, #0
 8005572:	f8cd 8010 	str.w	r8, [sp, #16]
 8005576:	f8cd 8020 	str.w	r8, [sp, #32]
 800557a:	f8cd 8018 	str.w	r8, [sp, #24]
 800557e:	2322      	movs	r3, #34	; 0x22
 8005580:	f04f 0900 	mov.w	r9, #0
 8005584:	f04f 0a00 	mov.w	sl, #0
 8005588:	f8cb 3000 	str.w	r3, [fp]
 800558c:	e761      	b.n	8005452 <_strtod_l+0x452>
 800558e:	bf00      	nop
 8005590:	08007e89 	.word	0x08007e89
 8005594:	08007f13 	.word	0x08007f13
 8005598:	08007e91 	.word	0x08007e91
 800559c:	08007ed4 	.word	0x08007ed4
 80055a0:	08007f50 	.word	0x08007f50
 80055a4:	08007f28 	.word	0x08007f28
 80055a8:	7ff00000 	.word	0x7ff00000
 80055ac:	7ca00000 	.word	0x7ca00000
 80055b0:	fff80000 	.word	0xfff80000
 80055b4:	7fefffff 	.word	0x7fefffff
 80055b8:	f018 0310 	ands.w	r3, r8, #16
 80055bc:	bf18      	it	ne
 80055be:	236a      	movne	r3, #106	; 0x6a
 80055c0:	4648      	mov	r0, r9
 80055c2:	9305      	str	r3, [sp, #20]
 80055c4:	4651      	mov	r1, sl
 80055c6:	2300      	movs	r3, #0
 80055c8:	4da1      	ldr	r5, [pc, #644]	; (8005850 <_strtod_l+0x850>)
 80055ca:	f1b8 0f00 	cmp.w	r8, #0
 80055ce:	f300 8113 	bgt.w	80057f8 <_strtod_l+0x7f8>
 80055d2:	b10b      	cbz	r3, 80055d8 <_strtod_l+0x5d8>
 80055d4:	4681      	mov	r9, r0
 80055d6:	468a      	mov	sl, r1
 80055d8:	9b05      	ldr	r3, [sp, #20]
 80055da:	b1bb      	cbz	r3, 800560c <_strtod_l+0x60c>
 80055dc:	f3ca 530a 	ubfx	r3, sl, #20, #11
 80055e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	4651      	mov	r1, sl
 80055e8:	dd10      	ble.n	800560c <_strtod_l+0x60c>
 80055ea:	2b1f      	cmp	r3, #31
 80055ec:	f340 8110 	ble.w	8005810 <_strtod_l+0x810>
 80055f0:	2b34      	cmp	r3, #52	; 0x34
 80055f2:	bfd8      	it	le
 80055f4:	f04f 32ff 	movle.w	r2, #4294967295
 80055f8:	f04f 0900 	mov.w	r9, #0
 80055fc:	bfcf      	iteee	gt
 80055fe:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 8005602:	3b20      	suble	r3, #32
 8005604:	fa02 f303 	lslle.w	r3, r2, r3
 8005608:	ea03 0a01 	andle.w	sl, r3, r1
 800560c:	2200      	movs	r2, #0
 800560e:	2300      	movs	r3, #0
 8005610:	4648      	mov	r0, r9
 8005612:	4651      	mov	r1, sl
 8005614:	f7fb f9e0 	bl	80009d8 <__aeabi_dcmpeq>
 8005618:	2800      	cmp	r0, #0
 800561a:	d1a8      	bne.n	800556e <_strtod_l+0x56e>
 800561c:	9b06      	ldr	r3, [sp, #24]
 800561e:	9a04      	ldr	r2, [sp, #16]
 8005620:	9300      	str	r3, [sp, #0]
 8005622:	9908      	ldr	r1, [sp, #32]
 8005624:	4623      	mov	r3, r4
 8005626:	4658      	mov	r0, fp
 8005628:	f001 fdbf 	bl	80071aa <__s2b>
 800562c:	9008      	str	r0, [sp, #32]
 800562e:	2800      	cmp	r0, #0
 8005630:	f43f af00 	beq.w	8005434 <_strtod_l+0x434>
 8005634:	9a07      	ldr	r2, [sp, #28]
 8005636:	9b07      	ldr	r3, [sp, #28]
 8005638:	2a00      	cmp	r2, #0
 800563a:	f1c3 0300 	rsb	r3, r3, #0
 800563e:	bfa8      	it	ge
 8005640:	2300      	movge	r3, #0
 8005642:	f04f 0800 	mov.w	r8, #0
 8005646:	930e      	str	r3, [sp, #56]	; 0x38
 8005648:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800564c:	9316      	str	r3, [sp, #88]	; 0x58
 800564e:	f8cd 8010 	str.w	r8, [sp, #16]
 8005652:	9b08      	ldr	r3, [sp, #32]
 8005654:	4658      	mov	r0, fp
 8005656:	6859      	ldr	r1, [r3, #4]
 8005658:	f001 fd21 	bl	800709e <_Balloc>
 800565c:	9006      	str	r0, [sp, #24]
 800565e:	2800      	cmp	r0, #0
 8005660:	f43f aef0 	beq.w	8005444 <_strtod_l+0x444>
 8005664:	9b08      	ldr	r3, [sp, #32]
 8005666:	300c      	adds	r0, #12
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	f103 010c 	add.w	r1, r3, #12
 800566e:	3202      	adds	r2, #2
 8005670:	0092      	lsls	r2, r2, #2
 8005672:	f001 fd09 	bl	8007088 <memcpy>
 8005676:	ab1e      	add	r3, sp, #120	; 0x78
 8005678:	9301      	str	r3, [sp, #4]
 800567a:	ab1d      	add	r3, sp, #116	; 0x74
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	464a      	mov	r2, r9
 8005680:	4653      	mov	r3, sl
 8005682:	4658      	mov	r0, fp
 8005684:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8005688:	f002 f84a 	bl	8007720 <__d2b>
 800568c:	901c      	str	r0, [sp, #112]	; 0x70
 800568e:	2800      	cmp	r0, #0
 8005690:	f43f aed8 	beq.w	8005444 <_strtod_l+0x444>
 8005694:	2101      	movs	r1, #1
 8005696:	4658      	mov	r0, fp
 8005698:	f001 fe13 	bl	80072c2 <__i2b>
 800569c:	9004      	str	r0, [sp, #16]
 800569e:	4603      	mov	r3, r0
 80056a0:	2800      	cmp	r0, #0
 80056a2:	f43f aecf 	beq.w	8005444 <_strtod_l+0x444>
 80056a6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80056a8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80056aa:	2d00      	cmp	r5, #0
 80056ac:	bfab      	itete	ge
 80056ae:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80056b0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80056b2:	18ee      	addge	r6, r5, r3
 80056b4:	1b5c      	sublt	r4, r3, r5
 80056b6:	9b05      	ldr	r3, [sp, #20]
 80056b8:	bfa8      	it	ge
 80056ba:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 80056bc:	eba5 0503 	sub.w	r5, r5, r3
 80056c0:	4415      	add	r5, r2
 80056c2:	4b64      	ldr	r3, [pc, #400]	; (8005854 <_strtod_l+0x854>)
 80056c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80056c8:	bfb8      	it	lt
 80056ca:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80056cc:	429d      	cmp	r5, r3
 80056ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80056d2:	f280 80af 	bge.w	8005834 <_strtod_l+0x834>
 80056d6:	1b5b      	subs	r3, r3, r5
 80056d8:	2b1f      	cmp	r3, #31
 80056da:	eba2 0203 	sub.w	r2, r2, r3
 80056de:	f04f 0701 	mov.w	r7, #1
 80056e2:	f300 809c 	bgt.w	800581e <_strtod_l+0x81e>
 80056e6:	2500      	movs	r5, #0
 80056e8:	fa07 f303 	lsl.w	r3, r7, r3
 80056ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80056ee:	18b7      	adds	r7, r6, r2
 80056f0:	9b05      	ldr	r3, [sp, #20]
 80056f2:	42be      	cmp	r6, r7
 80056f4:	4414      	add	r4, r2
 80056f6:	441c      	add	r4, r3
 80056f8:	4633      	mov	r3, r6
 80056fa:	bfa8      	it	ge
 80056fc:	463b      	movge	r3, r7
 80056fe:	42a3      	cmp	r3, r4
 8005700:	bfa8      	it	ge
 8005702:	4623      	movge	r3, r4
 8005704:	2b00      	cmp	r3, #0
 8005706:	bfc2      	ittt	gt
 8005708:	1aff      	subgt	r7, r7, r3
 800570a:	1ae4      	subgt	r4, r4, r3
 800570c:	1af6      	subgt	r6, r6, r3
 800570e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005710:	b1bb      	cbz	r3, 8005742 <_strtod_l+0x742>
 8005712:	461a      	mov	r2, r3
 8005714:	9904      	ldr	r1, [sp, #16]
 8005716:	4658      	mov	r0, fp
 8005718:	f001 fe72 	bl	8007400 <__pow5mult>
 800571c:	9004      	str	r0, [sp, #16]
 800571e:	2800      	cmp	r0, #0
 8005720:	f43f ae90 	beq.w	8005444 <_strtod_l+0x444>
 8005724:	4601      	mov	r1, r0
 8005726:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005728:	4658      	mov	r0, fp
 800572a:	f001 fdd3 	bl	80072d4 <__multiply>
 800572e:	9009      	str	r0, [sp, #36]	; 0x24
 8005730:	2800      	cmp	r0, #0
 8005732:	f43f ae87 	beq.w	8005444 <_strtod_l+0x444>
 8005736:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005738:	4658      	mov	r0, fp
 800573a:	f001 fce4 	bl	8007106 <_Bfree>
 800573e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005740:	931c      	str	r3, [sp, #112]	; 0x70
 8005742:	2f00      	cmp	r7, #0
 8005744:	dc7a      	bgt.n	800583c <_strtod_l+0x83c>
 8005746:	9b07      	ldr	r3, [sp, #28]
 8005748:	2b00      	cmp	r3, #0
 800574a:	dd08      	ble.n	800575e <_strtod_l+0x75e>
 800574c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800574e:	9906      	ldr	r1, [sp, #24]
 8005750:	4658      	mov	r0, fp
 8005752:	f001 fe55 	bl	8007400 <__pow5mult>
 8005756:	9006      	str	r0, [sp, #24]
 8005758:	2800      	cmp	r0, #0
 800575a:	f43f ae73 	beq.w	8005444 <_strtod_l+0x444>
 800575e:	2c00      	cmp	r4, #0
 8005760:	dd08      	ble.n	8005774 <_strtod_l+0x774>
 8005762:	4622      	mov	r2, r4
 8005764:	9906      	ldr	r1, [sp, #24]
 8005766:	4658      	mov	r0, fp
 8005768:	f001 fe98 	bl	800749c <__lshift>
 800576c:	9006      	str	r0, [sp, #24]
 800576e:	2800      	cmp	r0, #0
 8005770:	f43f ae68 	beq.w	8005444 <_strtod_l+0x444>
 8005774:	2e00      	cmp	r6, #0
 8005776:	dd08      	ble.n	800578a <_strtod_l+0x78a>
 8005778:	4632      	mov	r2, r6
 800577a:	9904      	ldr	r1, [sp, #16]
 800577c:	4658      	mov	r0, fp
 800577e:	f001 fe8d 	bl	800749c <__lshift>
 8005782:	9004      	str	r0, [sp, #16]
 8005784:	2800      	cmp	r0, #0
 8005786:	f43f ae5d 	beq.w	8005444 <_strtod_l+0x444>
 800578a:	9a06      	ldr	r2, [sp, #24]
 800578c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800578e:	4658      	mov	r0, fp
 8005790:	f001 fef2 	bl	8007578 <__mdiff>
 8005794:	4680      	mov	r8, r0
 8005796:	2800      	cmp	r0, #0
 8005798:	f43f ae54 	beq.w	8005444 <_strtod_l+0x444>
 800579c:	2400      	movs	r4, #0
 800579e:	68c3      	ldr	r3, [r0, #12]
 80057a0:	9904      	ldr	r1, [sp, #16]
 80057a2:	60c4      	str	r4, [r0, #12]
 80057a4:	930c      	str	r3, [sp, #48]	; 0x30
 80057a6:	f001 fecd 	bl	8007544 <__mcmp>
 80057aa:	42a0      	cmp	r0, r4
 80057ac:	da54      	bge.n	8005858 <_strtod_l+0x858>
 80057ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057b0:	b9f3      	cbnz	r3, 80057f0 <_strtod_l+0x7f0>
 80057b2:	f1b9 0f00 	cmp.w	r9, #0
 80057b6:	d11b      	bne.n	80057f0 <_strtod_l+0x7f0>
 80057b8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 80057bc:	b9c3      	cbnz	r3, 80057f0 <_strtod_l+0x7f0>
 80057be:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80057c2:	0d1b      	lsrs	r3, r3, #20
 80057c4:	051b      	lsls	r3, r3, #20
 80057c6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80057ca:	d911      	bls.n	80057f0 <_strtod_l+0x7f0>
 80057cc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80057d0:	b91b      	cbnz	r3, 80057da <_strtod_l+0x7da>
 80057d2:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	dd0a      	ble.n	80057f0 <_strtod_l+0x7f0>
 80057da:	4641      	mov	r1, r8
 80057dc:	2201      	movs	r2, #1
 80057de:	4658      	mov	r0, fp
 80057e0:	f001 fe5c 	bl	800749c <__lshift>
 80057e4:	9904      	ldr	r1, [sp, #16]
 80057e6:	4680      	mov	r8, r0
 80057e8:	f001 feac 	bl	8007544 <__mcmp>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	dc68      	bgt.n	80058c2 <_strtod_l+0x8c2>
 80057f0:	9b05      	ldr	r3, [sp, #20]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d172      	bne.n	80058dc <_strtod_l+0x8dc>
 80057f6:	e630      	b.n	800545a <_strtod_l+0x45a>
 80057f8:	f018 0f01 	tst.w	r8, #1
 80057fc:	d004      	beq.n	8005808 <_strtod_l+0x808>
 80057fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005802:	f7fa fe81 	bl	8000508 <__aeabi_dmul>
 8005806:	2301      	movs	r3, #1
 8005808:	ea4f 0868 	mov.w	r8, r8, asr #1
 800580c:	3508      	adds	r5, #8
 800580e:	e6dc      	b.n	80055ca <_strtod_l+0x5ca>
 8005810:	f04f 32ff 	mov.w	r2, #4294967295
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	ea03 0909 	and.w	r9, r3, r9
 800581c:	e6f6      	b.n	800560c <_strtod_l+0x60c>
 800581e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005822:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005826:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800582a:	35e2      	adds	r5, #226	; 0xe2
 800582c:	fa07 f505 	lsl.w	r5, r7, r5
 8005830:	970f      	str	r7, [sp, #60]	; 0x3c
 8005832:	e75c      	b.n	80056ee <_strtod_l+0x6ee>
 8005834:	2301      	movs	r3, #1
 8005836:	2500      	movs	r5, #0
 8005838:	930f      	str	r3, [sp, #60]	; 0x3c
 800583a:	e758      	b.n	80056ee <_strtod_l+0x6ee>
 800583c:	463a      	mov	r2, r7
 800583e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005840:	4658      	mov	r0, fp
 8005842:	f001 fe2b 	bl	800749c <__lshift>
 8005846:	901c      	str	r0, [sp, #112]	; 0x70
 8005848:	2800      	cmp	r0, #0
 800584a:	f47f af7c 	bne.w	8005746 <_strtod_l+0x746>
 800584e:	e5f9      	b.n	8005444 <_strtod_l+0x444>
 8005850:	08007ee8 	.word	0x08007ee8
 8005854:	fffffc02 	.word	0xfffffc02
 8005858:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800585c:	f040 8089 	bne.w	8005972 <_strtod_l+0x972>
 8005860:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005862:	f3ca 0313 	ubfx	r3, sl, #0, #20
 8005866:	b342      	cbz	r2, 80058ba <_strtod_l+0x8ba>
 8005868:	4aaf      	ldr	r2, [pc, #700]	; (8005b28 <_strtod_l+0xb28>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d156      	bne.n	800591c <_strtod_l+0x91c>
 800586e:	9b05      	ldr	r3, [sp, #20]
 8005870:	4648      	mov	r0, r9
 8005872:	b1eb      	cbz	r3, 80058b0 <_strtod_l+0x8b0>
 8005874:	4653      	mov	r3, sl
 8005876:	4aad      	ldr	r2, [pc, #692]	; (8005b2c <_strtod_l+0xb2c>)
 8005878:	f04f 31ff 	mov.w	r1, #4294967295
 800587c:	401a      	ands	r2, r3
 800587e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005882:	d818      	bhi.n	80058b6 <_strtod_l+0x8b6>
 8005884:	0d12      	lsrs	r2, r2, #20
 8005886:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800588a:	fa01 f303 	lsl.w	r3, r1, r3
 800588e:	4298      	cmp	r0, r3
 8005890:	d144      	bne.n	800591c <_strtod_l+0x91c>
 8005892:	4ba7      	ldr	r3, [pc, #668]	; (8005b30 <_strtod_l+0xb30>)
 8005894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005896:	429a      	cmp	r2, r3
 8005898:	d102      	bne.n	80058a0 <_strtod_l+0x8a0>
 800589a:	3001      	adds	r0, #1
 800589c:	f43f add2 	beq.w	8005444 <_strtod_l+0x444>
 80058a0:	4ba2      	ldr	r3, [pc, #648]	; (8005b2c <_strtod_l+0xb2c>)
 80058a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058a4:	f04f 0900 	mov.w	r9, #0
 80058a8:	401a      	ands	r2, r3
 80058aa:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 80058ae:	e79f      	b.n	80057f0 <_strtod_l+0x7f0>
 80058b0:	f04f 33ff 	mov.w	r3, #4294967295
 80058b4:	e7eb      	b.n	800588e <_strtod_l+0x88e>
 80058b6:	460b      	mov	r3, r1
 80058b8:	e7e9      	b.n	800588e <_strtod_l+0x88e>
 80058ba:	bb7b      	cbnz	r3, 800591c <_strtod_l+0x91c>
 80058bc:	f1b9 0f00 	cmp.w	r9, #0
 80058c0:	d12c      	bne.n	800591c <_strtod_l+0x91c>
 80058c2:	9905      	ldr	r1, [sp, #20]
 80058c4:	4653      	mov	r3, sl
 80058c6:	4a99      	ldr	r2, [pc, #612]	; (8005b2c <_strtod_l+0xb2c>)
 80058c8:	b1f1      	cbz	r1, 8005908 <_strtod_l+0x908>
 80058ca:	ea02 010a 	and.w	r1, r2, sl
 80058ce:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80058d2:	dc19      	bgt.n	8005908 <_strtod_l+0x908>
 80058d4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80058d8:	f77f ae51 	ble.w	800557e <_strtod_l+0x57e>
 80058dc:	2300      	movs	r3, #0
 80058de:	4a95      	ldr	r2, [pc, #596]	; (8005b34 <_strtod_l+0xb34>)
 80058e0:	4648      	mov	r0, r9
 80058e2:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80058e6:	4651      	mov	r1, sl
 80058e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80058ec:	f7fa fe0c 	bl	8000508 <__aeabi_dmul>
 80058f0:	4681      	mov	r9, r0
 80058f2:	468a      	mov	sl, r1
 80058f4:	2900      	cmp	r1, #0
 80058f6:	f47f adb0 	bne.w	800545a <_strtod_l+0x45a>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	f47f adad 	bne.w	800545a <_strtod_l+0x45a>
 8005900:	2322      	movs	r3, #34	; 0x22
 8005902:	f8cb 3000 	str.w	r3, [fp]
 8005906:	e5a8      	b.n	800545a <_strtod_l+0x45a>
 8005908:	4013      	ands	r3, r2
 800590a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800590e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 8005912:	f04f 39ff 	mov.w	r9, #4294967295
 8005916:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800591a:	e769      	b.n	80057f0 <_strtod_l+0x7f0>
 800591c:	b19d      	cbz	r5, 8005946 <_strtod_l+0x946>
 800591e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005920:	421d      	tst	r5, r3
 8005922:	f43f af65 	beq.w	80057f0 <_strtod_l+0x7f0>
 8005926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005928:	9a05      	ldr	r2, [sp, #20]
 800592a:	4648      	mov	r0, r9
 800592c:	4651      	mov	r1, sl
 800592e:	b173      	cbz	r3, 800594e <_strtod_l+0x94e>
 8005930:	f7ff fb42 	bl	8004fb8 <sulp>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800593c:	f7fa fc2e 	bl	800019c <__adddf3>
 8005940:	4681      	mov	r9, r0
 8005942:	468a      	mov	sl, r1
 8005944:	e754      	b.n	80057f0 <_strtod_l+0x7f0>
 8005946:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005948:	ea13 0f09 	tst.w	r3, r9
 800594c:	e7e9      	b.n	8005922 <_strtod_l+0x922>
 800594e:	f7ff fb33 	bl	8004fb8 <sulp>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800595a:	f7fa fc1d 	bl	8000198 <__aeabi_dsub>
 800595e:	2200      	movs	r2, #0
 8005960:	2300      	movs	r3, #0
 8005962:	4681      	mov	r9, r0
 8005964:	468a      	mov	sl, r1
 8005966:	f7fb f837 	bl	80009d8 <__aeabi_dcmpeq>
 800596a:	2800      	cmp	r0, #0
 800596c:	f47f ae07 	bne.w	800557e <_strtod_l+0x57e>
 8005970:	e73e      	b.n	80057f0 <_strtod_l+0x7f0>
 8005972:	9904      	ldr	r1, [sp, #16]
 8005974:	4640      	mov	r0, r8
 8005976:	f001 ff22 	bl	80077be <__ratio>
 800597a:	2200      	movs	r2, #0
 800597c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005980:	4606      	mov	r6, r0
 8005982:	460f      	mov	r7, r1
 8005984:	f7fb f83c 	bl	8000a00 <__aeabi_dcmple>
 8005988:	2800      	cmp	r0, #0
 800598a:	d075      	beq.n	8005a78 <_strtod_l+0xa78>
 800598c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800598e:	2b00      	cmp	r3, #0
 8005990:	d047      	beq.n	8005a22 <_strtod_l+0xa22>
 8005992:	2600      	movs	r6, #0
 8005994:	4f68      	ldr	r7, [pc, #416]	; (8005b38 <_strtod_l+0xb38>)
 8005996:	4d68      	ldr	r5, [pc, #416]	; (8005b38 <_strtod_l+0xb38>)
 8005998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800599e:	0d1b      	lsrs	r3, r3, #20
 80059a0:	051b      	lsls	r3, r3, #20
 80059a2:	930f      	str	r3, [sp, #60]	; 0x3c
 80059a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059a6:	4b65      	ldr	r3, [pc, #404]	; (8005b3c <_strtod_l+0xb3c>)
 80059a8:	429a      	cmp	r2, r3
 80059aa:	f040 80cf 	bne.w	8005b4c <_strtod_l+0xb4c>
 80059ae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80059b2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80059b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059b8:	4648      	mov	r0, r9
 80059ba:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 80059be:	4651      	mov	r1, sl
 80059c0:	f001 fe38 	bl	8007634 <__ulp>
 80059c4:	4602      	mov	r2, r0
 80059c6:	460b      	mov	r3, r1
 80059c8:	4630      	mov	r0, r6
 80059ca:	4639      	mov	r1, r7
 80059cc:	f7fa fd9c 	bl	8000508 <__aeabi_dmul>
 80059d0:	464a      	mov	r2, r9
 80059d2:	4653      	mov	r3, sl
 80059d4:	f7fa fbe2 	bl	800019c <__adddf3>
 80059d8:	460b      	mov	r3, r1
 80059da:	4954      	ldr	r1, [pc, #336]	; (8005b2c <_strtod_l+0xb2c>)
 80059dc:	4a58      	ldr	r2, [pc, #352]	; (8005b40 <_strtod_l+0xb40>)
 80059de:	4019      	ands	r1, r3
 80059e0:	4291      	cmp	r1, r2
 80059e2:	4681      	mov	r9, r0
 80059e4:	d95e      	bls.n	8005aa4 <_strtod_l+0xaa4>
 80059e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d103      	bne.n	80059f8 <_strtod_l+0x9f8>
 80059f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f2:	3301      	adds	r3, #1
 80059f4:	f43f ad26 	beq.w	8005444 <_strtod_l+0x444>
 80059f8:	f04f 39ff 	mov.w	r9, #4294967295
 80059fc:	f8df a130 	ldr.w	sl, [pc, #304]	; 8005b30 <_strtod_l+0xb30>
 8005a00:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005a02:	4658      	mov	r0, fp
 8005a04:	f001 fb7f 	bl	8007106 <_Bfree>
 8005a08:	9906      	ldr	r1, [sp, #24]
 8005a0a:	4658      	mov	r0, fp
 8005a0c:	f001 fb7b 	bl	8007106 <_Bfree>
 8005a10:	9904      	ldr	r1, [sp, #16]
 8005a12:	4658      	mov	r0, fp
 8005a14:	f001 fb77 	bl	8007106 <_Bfree>
 8005a18:	4641      	mov	r1, r8
 8005a1a:	4658      	mov	r0, fp
 8005a1c:	f001 fb73 	bl	8007106 <_Bfree>
 8005a20:	e617      	b.n	8005652 <_strtod_l+0x652>
 8005a22:	f1b9 0f00 	cmp.w	r9, #0
 8005a26:	d119      	bne.n	8005a5c <_strtod_l+0xa5c>
 8005a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a2e:	b9e3      	cbnz	r3, 8005a6a <_strtod_l+0xa6a>
 8005a30:	2200      	movs	r2, #0
 8005a32:	4b41      	ldr	r3, [pc, #260]	; (8005b38 <_strtod_l+0xb38>)
 8005a34:	4630      	mov	r0, r6
 8005a36:	4639      	mov	r1, r7
 8005a38:	f7fa ffd8 	bl	80009ec <__aeabi_dcmplt>
 8005a3c:	b9c8      	cbnz	r0, 8005a72 <_strtod_l+0xa72>
 8005a3e:	2200      	movs	r2, #0
 8005a40:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <_strtod_l+0xb44>)
 8005a42:	4630      	mov	r0, r6
 8005a44:	4639      	mov	r1, r7
 8005a46:	f7fa fd5f 	bl	8000508 <__aeabi_dmul>
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	460d      	mov	r5, r1
 8005a4e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005a52:	9418      	str	r4, [sp, #96]	; 0x60
 8005a54:	9319      	str	r3, [sp, #100]	; 0x64
 8005a56:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 8005a5a:	e79d      	b.n	8005998 <_strtod_l+0x998>
 8005a5c:	f1b9 0f01 	cmp.w	r9, #1
 8005a60:	d103      	bne.n	8005a6a <_strtod_l+0xa6a>
 8005a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f43f ad8a 	beq.w	800557e <_strtod_l+0x57e>
 8005a6a:	2600      	movs	r6, #0
 8005a6c:	4f36      	ldr	r7, [pc, #216]	; (8005b48 <_strtod_l+0xb48>)
 8005a6e:	2400      	movs	r4, #0
 8005a70:	e791      	b.n	8005996 <_strtod_l+0x996>
 8005a72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005a74:	4d33      	ldr	r5, [pc, #204]	; (8005b44 <_strtod_l+0xb44>)
 8005a76:	e7ea      	b.n	8005a4e <_strtod_l+0xa4e>
 8005a78:	4b32      	ldr	r3, [pc, #200]	; (8005b44 <_strtod_l+0xb44>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	4630      	mov	r0, r6
 8005a7e:	4639      	mov	r1, r7
 8005a80:	f7fa fd42 	bl	8000508 <__aeabi_dmul>
 8005a84:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a86:	4604      	mov	r4, r0
 8005a88:	460d      	mov	r5, r1
 8005a8a:	b933      	cbnz	r3, 8005a9a <_strtod_l+0xa9a>
 8005a8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a90:	9010      	str	r0, [sp, #64]	; 0x40
 8005a92:	9311      	str	r3, [sp, #68]	; 0x44
 8005a94:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005a98:	e77e      	b.n	8005998 <_strtod_l+0x998>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005aa2:	e7f7      	b.n	8005a94 <_strtod_l+0xa94>
 8005aa4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 8005aa8:	9b05      	ldr	r3, [sp, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1a8      	bne.n	8005a00 <_strtod_l+0xa00>
 8005aae:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005ab2:	0d1b      	lsrs	r3, r3, #20
 8005ab4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ab6:	051b      	lsls	r3, r3, #20
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	4656      	mov	r6, sl
 8005abc:	d1a0      	bne.n	8005a00 <_strtod_l+0xa00>
 8005abe:	4629      	mov	r1, r5
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f7fa ffd1 	bl	8000a68 <__aeabi_d2iz>
 8005ac6:	f7fa fcb5 	bl	8000434 <__aeabi_i2d>
 8005aca:	460b      	mov	r3, r1
 8005acc:	4602      	mov	r2, r0
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f7fa fb61 	bl	8000198 <__aeabi_dsub>
 8005ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ad8:	4604      	mov	r4, r0
 8005ada:	460d      	mov	r5, r1
 8005adc:	b933      	cbnz	r3, 8005aec <_strtod_l+0xaec>
 8005ade:	f1b9 0f00 	cmp.w	r9, #0
 8005ae2:	d103      	bne.n	8005aec <_strtod_l+0xaec>
 8005ae4:	f3ca 0613 	ubfx	r6, sl, #0, #20
 8005ae8:	2e00      	cmp	r6, #0
 8005aea:	d06a      	beq.n	8005bc2 <_strtod_l+0xbc2>
 8005aec:	a30a      	add	r3, pc, #40	; (adr r3, 8005b18 <_strtod_l+0xb18>)
 8005aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af2:	4620      	mov	r0, r4
 8005af4:	4629      	mov	r1, r5
 8005af6:	f7fa ff79 	bl	80009ec <__aeabi_dcmplt>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	f47f acad 	bne.w	800545a <_strtod_l+0x45a>
 8005b00:	a307      	add	r3, pc, #28	; (adr r3, 8005b20 <_strtod_l+0xb20>)
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa ff8d 	bl	8000a28 <__aeabi_dcmpgt>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f43f af76 	beq.w	8005a00 <_strtod_l+0xa00>
 8005b14:	e4a1      	b.n	800545a <_strtod_l+0x45a>
 8005b16:	bf00      	nop
 8005b18:	94a03595 	.word	0x94a03595
 8005b1c:	3fdfffff 	.word	0x3fdfffff
 8005b20:	35afe535 	.word	0x35afe535
 8005b24:	3fe00000 	.word	0x3fe00000
 8005b28:	000fffff 	.word	0x000fffff
 8005b2c:	7ff00000 	.word	0x7ff00000
 8005b30:	7fefffff 	.word	0x7fefffff
 8005b34:	39500000 	.word	0x39500000
 8005b38:	3ff00000 	.word	0x3ff00000
 8005b3c:	7fe00000 	.word	0x7fe00000
 8005b40:	7c9fffff 	.word	0x7c9fffff
 8005b44:	3fe00000 	.word	0x3fe00000
 8005b48:	bff00000 	.word	0xbff00000
 8005b4c:	9b05      	ldr	r3, [sp, #20]
 8005b4e:	b313      	cbz	r3, 8005b96 <_strtod_l+0xb96>
 8005b50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005b52:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005b56:	d81e      	bhi.n	8005b96 <_strtod_l+0xb96>
 8005b58:	a325      	add	r3, pc, #148	; (adr r3, 8005bf0 <_strtod_l+0xbf0>)
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	4620      	mov	r0, r4
 8005b60:	4629      	mov	r1, r5
 8005b62:	f7fa ff4d 	bl	8000a00 <__aeabi_dcmple>
 8005b66:	b190      	cbz	r0, 8005b8e <_strtod_l+0xb8e>
 8005b68:	4629      	mov	r1, r5
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f7fa ffa4 	bl	8000ab8 <__aeabi_d2uiz>
 8005b70:	2800      	cmp	r0, #0
 8005b72:	bf08      	it	eq
 8005b74:	2001      	moveq	r0, #1
 8005b76:	f7fa fc4d 	bl	8000414 <__aeabi_ui2d>
 8005b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b7c:	4604      	mov	r4, r0
 8005b7e:	460d      	mov	r5, r1
 8005b80:	b9d3      	cbnz	r3, 8005bb8 <_strtod_l+0xbb8>
 8005b82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b86:	9012      	str	r0, [sp, #72]	; 0x48
 8005b88:	9313      	str	r3, [sp, #76]	; 0x4c
 8005b8a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8005b8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005b90:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8005b94:	1a9f      	subs	r7, r3, r2
 8005b96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b9a:	f001 fd4b 	bl	8007634 <__ulp>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4630      	mov	r0, r6
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	f7fa fcaf 	bl	8000508 <__aeabi_dmul>
 8005baa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bae:	f7fa faf5 	bl	800019c <__adddf3>
 8005bb2:	4681      	mov	r9, r0
 8005bb4:	468a      	mov	sl, r1
 8005bb6:	e777      	b.n	8005aa8 <_strtod_l+0xaa8>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005bc0:	e7e3      	b.n	8005b8a <_strtod_l+0xb8a>
 8005bc2:	a30d      	add	r3, pc, #52	; (adr r3, 8005bf8 <_strtod_l+0xbf8>)
 8005bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc8:	f7fa ff10 	bl	80009ec <__aeabi_dcmplt>
 8005bcc:	e79f      	b.n	8005b0e <_strtod_l+0xb0e>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	930d      	str	r3, [sp, #52]	; 0x34
 8005bd2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005bd4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	f7ff ba55 	b.w	8005086 <_strtod_l+0x86>
 8005bdc:	2b65      	cmp	r3, #101	; 0x65
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	f43f ab42 	beq.w	800526a <_strtod_l+0x26a>
 8005be6:	2101      	movs	r1, #1
 8005be8:	4614      	mov	r4, r2
 8005bea:	9105      	str	r1, [sp, #20]
 8005bec:	f7ff babf 	b.w	800516e <_strtod_l+0x16e>
 8005bf0:	ffc00000 	.word	0xffc00000
 8005bf4:	41dfffff 	.word	0x41dfffff
 8005bf8:	94a03595 	.word	0x94a03595
 8005bfc:	3fcfffff 	.word	0x3fcfffff

08005c00 <_strtod_r>:
 8005c00:	4b05      	ldr	r3, [pc, #20]	; (8005c18 <_strtod_r+0x18>)
 8005c02:	b410      	push	{r4}
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4c05      	ldr	r4, [pc, #20]	; (8005c1c <_strtod_r+0x1c>)
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	bf08      	it	eq
 8005c0e:	4623      	moveq	r3, r4
 8005c10:	bc10      	pop	{r4}
 8005c12:	f7ff b9f5 	b.w	8005000 <_strtod_l>
 8005c16:	bf00      	nop
 8005c18:	20000010 	.word	0x20000010
 8005c1c:	20000074 	.word	0x20000074

08005c20 <_strtol_l.isra.0>:
 8005c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c24:	4680      	mov	r8, r0
 8005c26:	4689      	mov	r9, r1
 8005c28:	4692      	mov	sl, r2
 8005c2a:	461e      	mov	r6, r3
 8005c2c:	460f      	mov	r7, r1
 8005c2e:	463d      	mov	r5, r7
 8005c30:	9808      	ldr	r0, [sp, #32]
 8005c32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c36:	f001 f9eb 	bl	8007010 <__locale_ctype_ptr_l>
 8005c3a:	4420      	add	r0, r4
 8005c3c:	7843      	ldrb	r3, [r0, #1]
 8005c3e:	f013 0308 	ands.w	r3, r3, #8
 8005c42:	d132      	bne.n	8005caa <_strtol_l.isra.0+0x8a>
 8005c44:	2c2d      	cmp	r4, #45	; 0x2d
 8005c46:	d132      	bne.n	8005cae <_strtol_l.isra.0+0x8e>
 8005c48:	2201      	movs	r2, #1
 8005c4a:	787c      	ldrb	r4, [r7, #1]
 8005c4c:	1cbd      	adds	r5, r7, #2
 8005c4e:	2e00      	cmp	r6, #0
 8005c50:	d05d      	beq.n	8005d0e <_strtol_l.isra.0+0xee>
 8005c52:	2e10      	cmp	r6, #16
 8005c54:	d109      	bne.n	8005c6a <_strtol_l.isra.0+0x4a>
 8005c56:	2c30      	cmp	r4, #48	; 0x30
 8005c58:	d107      	bne.n	8005c6a <_strtol_l.isra.0+0x4a>
 8005c5a:	782b      	ldrb	r3, [r5, #0]
 8005c5c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005c60:	2b58      	cmp	r3, #88	; 0x58
 8005c62:	d14f      	bne.n	8005d04 <_strtol_l.isra.0+0xe4>
 8005c64:	2610      	movs	r6, #16
 8005c66:	786c      	ldrb	r4, [r5, #1]
 8005c68:	3502      	adds	r5, #2
 8005c6a:	2a00      	cmp	r2, #0
 8005c6c:	bf14      	ite	ne
 8005c6e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005c72:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005c76:	2700      	movs	r7, #0
 8005c78:	fbb1 fcf6 	udiv	ip, r1, r6
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005c82:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005c86:	2b09      	cmp	r3, #9
 8005c88:	d817      	bhi.n	8005cba <_strtol_l.isra.0+0x9a>
 8005c8a:	461c      	mov	r4, r3
 8005c8c:	42a6      	cmp	r6, r4
 8005c8e:	dd23      	ble.n	8005cd8 <_strtol_l.isra.0+0xb8>
 8005c90:	1c7b      	adds	r3, r7, #1
 8005c92:	d007      	beq.n	8005ca4 <_strtol_l.isra.0+0x84>
 8005c94:	4584      	cmp	ip, r0
 8005c96:	d31c      	bcc.n	8005cd2 <_strtol_l.isra.0+0xb2>
 8005c98:	d101      	bne.n	8005c9e <_strtol_l.isra.0+0x7e>
 8005c9a:	45a6      	cmp	lr, r4
 8005c9c:	db19      	blt.n	8005cd2 <_strtol_l.isra.0+0xb2>
 8005c9e:	2701      	movs	r7, #1
 8005ca0:	fb00 4006 	mla	r0, r0, r6, r4
 8005ca4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ca8:	e7eb      	b.n	8005c82 <_strtol_l.isra.0+0x62>
 8005caa:	462f      	mov	r7, r5
 8005cac:	e7bf      	b.n	8005c2e <_strtol_l.isra.0+0xe>
 8005cae:	2c2b      	cmp	r4, #43	; 0x2b
 8005cb0:	bf04      	itt	eq
 8005cb2:	1cbd      	addeq	r5, r7, #2
 8005cb4:	787c      	ldrbeq	r4, [r7, #1]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	e7c9      	b.n	8005c4e <_strtol_l.isra.0+0x2e>
 8005cba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005cbe:	2b19      	cmp	r3, #25
 8005cc0:	d801      	bhi.n	8005cc6 <_strtol_l.isra.0+0xa6>
 8005cc2:	3c37      	subs	r4, #55	; 0x37
 8005cc4:	e7e2      	b.n	8005c8c <_strtol_l.isra.0+0x6c>
 8005cc6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005cca:	2b19      	cmp	r3, #25
 8005ccc:	d804      	bhi.n	8005cd8 <_strtol_l.isra.0+0xb8>
 8005cce:	3c57      	subs	r4, #87	; 0x57
 8005cd0:	e7dc      	b.n	8005c8c <_strtol_l.isra.0+0x6c>
 8005cd2:	f04f 37ff 	mov.w	r7, #4294967295
 8005cd6:	e7e5      	b.n	8005ca4 <_strtol_l.isra.0+0x84>
 8005cd8:	1c7b      	adds	r3, r7, #1
 8005cda:	d108      	bne.n	8005cee <_strtol_l.isra.0+0xce>
 8005cdc:	2322      	movs	r3, #34	; 0x22
 8005cde:	4608      	mov	r0, r1
 8005ce0:	f8c8 3000 	str.w	r3, [r8]
 8005ce4:	f1ba 0f00 	cmp.w	sl, #0
 8005ce8:	d107      	bne.n	8005cfa <_strtol_l.isra.0+0xda>
 8005cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cee:	b102      	cbz	r2, 8005cf2 <_strtol_l.isra.0+0xd2>
 8005cf0:	4240      	negs	r0, r0
 8005cf2:	f1ba 0f00 	cmp.w	sl, #0
 8005cf6:	d0f8      	beq.n	8005cea <_strtol_l.isra.0+0xca>
 8005cf8:	b10f      	cbz	r7, 8005cfe <_strtol_l.isra.0+0xde>
 8005cfa:	f105 39ff 	add.w	r9, r5, #4294967295
 8005cfe:	f8ca 9000 	str.w	r9, [sl]
 8005d02:	e7f2      	b.n	8005cea <_strtol_l.isra.0+0xca>
 8005d04:	2430      	movs	r4, #48	; 0x30
 8005d06:	2e00      	cmp	r6, #0
 8005d08:	d1af      	bne.n	8005c6a <_strtol_l.isra.0+0x4a>
 8005d0a:	2608      	movs	r6, #8
 8005d0c:	e7ad      	b.n	8005c6a <_strtol_l.isra.0+0x4a>
 8005d0e:	2c30      	cmp	r4, #48	; 0x30
 8005d10:	d0a3      	beq.n	8005c5a <_strtol_l.isra.0+0x3a>
 8005d12:	260a      	movs	r6, #10
 8005d14:	e7a9      	b.n	8005c6a <_strtol_l.isra.0+0x4a>
	...

08005d18 <_strtol_r>:
 8005d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d1a:	4c06      	ldr	r4, [pc, #24]	; (8005d34 <_strtol_r+0x1c>)
 8005d1c:	4d06      	ldr	r5, [pc, #24]	; (8005d38 <_strtol_r+0x20>)
 8005d1e:	6824      	ldr	r4, [r4, #0]
 8005d20:	6a24      	ldr	r4, [r4, #32]
 8005d22:	2c00      	cmp	r4, #0
 8005d24:	bf08      	it	eq
 8005d26:	462c      	moveq	r4, r5
 8005d28:	9400      	str	r4, [sp, #0]
 8005d2a:	f7ff ff79 	bl	8005c20 <_strtol_l.isra.0>
 8005d2e:	b003      	add	sp, #12
 8005d30:	bd30      	pop	{r4, r5, pc}
 8005d32:	bf00      	nop
 8005d34:	20000010 	.word	0x20000010
 8005d38:	20000074 	.word	0x20000074

08005d3c <quorem>:
 8005d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d40:	6903      	ldr	r3, [r0, #16]
 8005d42:	690c      	ldr	r4, [r1, #16]
 8005d44:	4680      	mov	r8, r0
 8005d46:	42a3      	cmp	r3, r4
 8005d48:	f2c0 8084 	blt.w	8005e54 <quorem+0x118>
 8005d4c:	3c01      	subs	r4, #1
 8005d4e:	f101 0714 	add.w	r7, r1, #20
 8005d52:	f100 0614 	add.w	r6, r0, #20
 8005d56:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005d5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005d5e:	3501      	adds	r5, #1
 8005d60:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d64:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005d68:	eb06 030c 	add.w	r3, r6, ip
 8005d6c:	eb07 090c 	add.w	r9, r7, ip
 8005d70:	9301      	str	r3, [sp, #4]
 8005d72:	b39d      	cbz	r5, 8005ddc <quorem+0xa0>
 8005d74:	f04f 0a00 	mov.w	sl, #0
 8005d78:	4638      	mov	r0, r7
 8005d7a:	46b6      	mov	lr, r6
 8005d7c:	46d3      	mov	fp, sl
 8005d7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d82:	b293      	uxth	r3, r2
 8005d84:	fb05 a303 	mla	r3, r5, r3, sl
 8005d88:	0c12      	lsrs	r2, r2, #16
 8005d8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d8e:	fb05 a202 	mla	r2, r5, r2, sl
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	ebab 0303 	sub.w	r3, fp, r3
 8005d98:	f8de b000 	ldr.w	fp, [lr]
 8005d9c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005da0:	fa1f fb8b 	uxth.w	fp, fp
 8005da4:	445b      	add	r3, fp
 8005da6:	fa1f fb82 	uxth.w	fp, r2
 8005daa:	f8de 2000 	ldr.w	r2, [lr]
 8005dae:	4581      	cmp	r9, r0
 8005db0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005db4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dbe:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005dc2:	f84e 3b04 	str.w	r3, [lr], #4
 8005dc6:	d2da      	bcs.n	8005d7e <quorem+0x42>
 8005dc8:	f856 300c 	ldr.w	r3, [r6, ip]
 8005dcc:	b933      	cbnz	r3, 8005ddc <quorem+0xa0>
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	3b04      	subs	r3, #4
 8005dd2:	429e      	cmp	r6, r3
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	d331      	bcc.n	8005e3c <quorem+0x100>
 8005dd8:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ddc:	4640      	mov	r0, r8
 8005dde:	f001 fbb1 	bl	8007544 <__mcmp>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	db26      	blt.n	8005e34 <quorem+0xf8>
 8005de6:	4630      	mov	r0, r6
 8005de8:	f04f 0c00 	mov.w	ip, #0
 8005dec:	3501      	adds	r5, #1
 8005dee:	f857 1b04 	ldr.w	r1, [r7], #4
 8005df2:	f8d0 e000 	ldr.w	lr, [r0]
 8005df6:	b28b      	uxth	r3, r1
 8005df8:	ebac 0303 	sub.w	r3, ip, r3
 8005dfc:	fa1f f28e 	uxth.w	r2, lr
 8005e00:	4413      	add	r3, r2
 8005e02:	0c0a      	lsrs	r2, r1, #16
 8005e04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e12:	45b9      	cmp	r9, r7
 8005e14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e18:	f840 3b04 	str.w	r3, [r0], #4
 8005e1c:	d2e7      	bcs.n	8005dee <quorem+0xb2>
 8005e1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005e22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005e26:	b92a      	cbnz	r2, 8005e34 <quorem+0xf8>
 8005e28:	3b04      	subs	r3, #4
 8005e2a:	429e      	cmp	r6, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	d30b      	bcc.n	8005e48 <quorem+0x10c>
 8005e30:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e34:	4628      	mov	r0, r5
 8005e36:	b003      	add	sp, #12
 8005e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e3c:	6812      	ldr	r2, [r2, #0]
 8005e3e:	3b04      	subs	r3, #4
 8005e40:	2a00      	cmp	r2, #0
 8005e42:	d1c9      	bne.n	8005dd8 <quorem+0x9c>
 8005e44:	3c01      	subs	r4, #1
 8005e46:	e7c4      	b.n	8005dd2 <quorem+0x96>
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	3b04      	subs	r3, #4
 8005e4c:	2a00      	cmp	r2, #0
 8005e4e:	d1ef      	bne.n	8005e30 <quorem+0xf4>
 8005e50:	3c01      	subs	r4, #1
 8005e52:	e7ea      	b.n	8005e2a <quorem+0xee>
 8005e54:	2000      	movs	r0, #0
 8005e56:	e7ee      	b.n	8005e36 <quorem+0xfa>

08005e58 <_dtoa_r>:
 8005e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	4616      	mov	r6, r2
 8005e5e:	461f      	mov	r7, r3
 8005e60:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e62:	b095      	sub	sp, #84	; 0x54
 8005e64:	4604      	mov	r4, r0
 8005e66:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8005e6a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005e6e:	b93d      	cbnz	r5, 8005e80 <_dtoa_r+0x28>
 8005e70:	2010      	movs	r0, #16
 8005e72:	f001 f8e1 	bl	8007038 <malloc>
 8005e76:	6260      	str	r0, [r4, #36]	; 0x24
 8005e78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e7c:	6005      	str	r5, [r0, #0]
 8005e7e:	60c5      	str	r5, [r0, #12]
 8005e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e82:	6819      	ldr	r1, [r3, #0]
 8005e84:	b151      	cbz	r1, 8005e9c <_dtoa_r+0x44>
 8005e86:	685a      	ldr	r2, [r3, #4]
 8005e88:	2301      	movs	r3, #1
 8005e8a:	4093      	lsls	r3, r2
 8005e8c:	604a      	str	r2, [r1, #4]
 8005e8e:	608b      	str	r3, [r1, #8]
 8005e90:	4620      	mov	r0, r4
 8005e92:	f001 f938 	bl	8007106 <_Bfree>
 8005e96:	2200      	movs	r2, #0
 8005e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e9a:	601a      	str	r2, [r3, #0]
 8005e9c:	1e3b      	subs	r3, r7, #0
 8005e9e:	bfaf      	iteee	ge
 8005ea0:	2300      	movge	r3, #0
 8005ea2:	2201      	movlt	r2, #1
 8005ea4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ea8:	9303      	strlt	r3, [sp, #12]
 8005eaa:	bfac      	ite	ge
 8005eac:	f8c8 3000 	strge.w	r3, [r8]
 8005eb0:	f8c8 2000 	strlt.w	r2, [r8]
 8005eb4:	4bae      	ldr	r3, [pc, #696]	; (8006170 <_dtoa_r+0x318>)
 8005eb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005eba:	ea33 0308 	bics.w	r3, r3, r8
 8005ebe:	d11b      	bne.n	8005ef8 <_dtoa_r+0xa0>
 8005ec0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ec4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ec6:	6013      	str	r3, [r2, #0]
 8005ec8:	9b02      	ldr	r3, [sp, #8]
 8005eca:	b923      	cbnz	r3, 8005ed6 <_dtoa_r+0x7e>
 8005ecc:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	f000 8545 	beq.w	8006960 <_dtoa_r+0xb08>
 8005ed6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ed8:	b953      	cbnz	r3, 8005ef0 <_dtoa_r+0x98>
 8005eda:	4ba6      	ldr	r3, [pc, #664]	; (8006174 <_dtoa_r+0x31c>)
 8005edc:	e021      	b.n	8005f22 <_dtoa_r+0xca>
 8005ede:	4ba6      	ldr	r3, [pc, #664]	; (8006178 <_dtoa_r+0x320>)
 8005ee0:	9306      	str	r3, [sp, #24]
 8005ee2:	3308      	adds	r3, #8
 8005ee4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005ee6:	6013      	str	r3, [r2, #0]
 8005ee8:	9806      	ldr	r0, [sp, #24]
 8005eea:	b015      	add	sp, #84	; 0x54
 8005eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef0:	4ba0      	ldr	r3, [pc, #640]	; (8006174 <_dtoa_r+0x31c>)
 8005ef2:	9306      	str	r3, [sp, #24]
 8005ef4:	3303      	adds	r3, #3
 8005ef6:	e7f5      	b.n	8005ee4 <_dtoa_r+0x8c>
 8005ef8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005efc:	2200      	movs	r2, #0
 8005efe:	2300      	movs	r3, #0
 8005f00:	4630      	mov	r0, r6
 8005f02:	4639      	mov	r1, r7
 8005f04:	f7fa fd68 	bl	80009d8 <__aeabi_dcmpeq>
 8005f08:	4682      	mov	sl, r0
 8005f0a:	b160      	cbz	r0, 8005f26 <_dtoa_r+0xce>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005f10:	6013      	str	r3, [r2, #0]
 8005f12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 8520 	beq.w	800695a <_dtoa_r+0xb02>
 8005f1a:	4b98      	ldr	r3, [pc, #608]	; (800617c <_dtoa_r+0x324>)
 8005f1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	9306      	str	r3, [sp, #24]
 8005f24:	e7e0      	b.n	8005ee8 <_dtoa_r+0x90>
 8005f26:	ab12      	add	r3, sp, #72	; 0x48
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	ab13      	add	r3, sp, #76	; 0x4c
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	4632      	mov	r2, r6
 8005f30:	463b      	mov	r3, r7
 8005f32:	4620      	mov	r0, r4
 8005f34:	f001 fbf4 	bl	8007720 <__d2b>
 8005f38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005f3c:	4683      	mov	fp, r0
 8005f3e:	2d00      	cmp	r5, #0
 8005f40:	d07d      	beq.n	800603e <_dtoa_r+0x1e6>
 8005f42:	46b0      	mov	r8, r6
 8005f44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f48:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8005f4c:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8005f50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f54:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4b89      	ldr	r3, [pc, #548]	; (8006180 <_dtoa_r+0x328>)
 8005f5c:	4640      	mov	r0, r8
 8005f5e:	4649      	mov	r1, r9
 8005f60:	f7fa f91a 	bl	8000198 <__aeabi_dsub>
 8005f64:	a37c      	add	r3, pc, #496	; (adr r3, 8006158 <_dtoa_r+0x300>)
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	f7fa facd 	bl	8000508 <__aeabi_dmul>
 8005f6e:	a37c      	add	r3, pc, #496	; (adr r3, 8006160 <_dtoa_r+0x308>)
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f7fa f912 	bl	800019c <__adddf3>
 8005f78:	4606      	mov	r6, r0
 8005f7a:	4628      	mov	r0, r5
 8005f7c:	460f      	mov	r7, r1
 8005f7e:	f7fa fa59 	bl	8000434 <__aeabi_i2d>
 8005f82:	a379      	add	r3, pc, #484	; (adr r3, 8006168 <_dtoa_r+0x310>)
 8005f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f88:	f7fa fabe 	bl	8000508 <__aeabi_dmul>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	460b      	mov	r3, r1
 8005f90:	4630      	mov	r0, r6
 8005f92:	4639      	mov	r1, r7
 8005f94:	f7fa f902 	bl	800019c <__adddf3>
 8005f98:	4606      	mov	r6, r0
 8005f9a:	460f      	mov	r7, r1
 8005f9c:	f7fa fd64 	bl	8000a68 <__aeabi_d2iz>
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	4682      	mov	sl, r0
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4630      	mov	r0, r6
 8005fa8:	4639      	mov	r1, r7
 8005faa:	f7fa fd1f 	bl	80009ec <__aeabi_dcmplt>
 8005fae:	b148      	cbz	r0, 8005fc4 <_dtoa_r+0x16c>
 8005fb0:	4650      	mov	r0, sl
 8005fb2:	f7fa fa3f 	bl	8000434 <__aeabi_i2d>
 8005fb6:	4632      	mov	r2, r6
 8005fb8:	463b      	mov	r3, r7
 8005fba:	f7fa fd0d 	bl	80009d8 <__aeabi_dcmpeq>
 8005fbe:	b908      	cbnz	r0, 8005fc4 <_dtoa_r+0x16c>
 8005fc0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fc4:	f1ba 0f16 	cmp.w	sl, #22
 8005fc8:	d85a      	bhi.n	8006080 <_dtoa_r+0x228>
 8005fca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fce:	496d      	ldr	r1, [pc, #436]	; (8006184 <_dtoa_r+0x32c>)
 8005fd0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fd8:	f7fa fd26 	bl	8000a28 <__aeabi_dcmpgt>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	d051      	beq.n	8006084 <_dtoa_r+0x22c>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fe6:	930d      	str	r3, [sp, #52]	; 0x34
 8005fe8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005fea:	1b5d      	subs	r5, r3, r5
 8005fec:	1e6b      	subs	r3, r5, #1
 8005fee:	9307      	str	r3, [sp, #28]
 8005ff0:	bf43      	ittte	mi
 8005ff2:	2300      	movmi	r3, #0
 8005ff4:	f1c5 0901 	rsbmi	r9, r5, #1
 8005ff8:	9307      	strmi	r3, [sp, #28]
 8005ffa:	f04f 0900 	movpl.w	r9, #0
 8005ffe:	f1ba 0f00 	cmp.w	sl, #0
 8006002:	db41      	blt.n	8006088 <_dtoa_r+0x230>
 8006004:	9b07      	ldr	r3, [sp, #28]
 8006006:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800600a:	4453      	add	r3, sl
 800600c:	9307      	str	r3, [sp, #28]
 800600e:	2300      	movs	r3, #0
 8006010:	9308      	str	r3, [sp, #32]
 8006012:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006014:	2b09      	cmp	r3, #9
 8006016:	f200 808f 	bhi.w	8006138 <_dtoa_r+0x2e0>
 800601a:	2b05      	cmp	r3, #5
 800601c:	bfc4      	itt	gt
 800601e:	3b04      	subgt	r3, #4
 8006020:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006022:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006024:	bfc8      	it	gt
 8006026:	2500      	movgt	r5, #0
 8006028:	f1a3 0302 	sub.w	r3, r3, #2
 800602c:	bfd8      	it	le
 800602e:	2501      	movle	r5, #1
 8006030:	2b03      	cmp	r3, #3
 8006032:	f200 808d 	bhi.w	8006150 <_dtoa_r+0x2f8>
 8006036:	e8df f003 	tbb	[pc, r3]
 800603a:	7d7b      	.short	0x7d7b
 800603c:	6f2f      	.short	0x6f2f
 800603e:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8006042:	441d      	add	r5, r3
 8006044:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006048:	2820      	cmp	r0, #32
 800604a:	dd13      	ble.n	8006074 <_dtoa_r+0x21c>
 800604c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006050:	9b02      	ldr	r3, [sp, #8]
 8006052:	fa08 f800 	lsl.w	r8, r8, r0
 8006056:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800605a:	fa23 f000 	lsr.w	r0, r3, r0
 800605e:	ea48 0000 	orr.w	r0, r8, r0
 8006062:	f7fa f9d7 	bl	8000414 <__aeabi_ui2d>
 8006066:	2301      	movs	r3, #1
 8006068:	4680      	mov	r8, r0
 800606a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800606e:	3d01      	subs	r5, #1
 8006070:	9310      	str	r3, [sp, #64]	; 0x40
 8006072:	e771      	b.n	8005f58 <_dtoa_r+0x100>
 8006074:	9b02      	ldr	r3, [sp, #8]
 8006076:	f1c0 0020 	rsb	r0, r0, #32
 800607a:	fa03 f000 	lsl.w	r0, r3, r0
 800607e:	e7f0      	b.n	8006062 <_dtoa_r+0x20a>
 8006080:	2301      	movs	r3, #1
 8006082:	e7b0      	b.n	8005fe6 <_dtoa_r+0x18e>
 8006084:	900d      	str	r0, [sp, #52]	; 0x34
 8006086:	e7af      	b.n	8005fe8 <_dtoa_r+0x190>
 8006088:	f1ca 0300 	rsb	r3, sl, #0
 800608c:	9308      	str	r3, [sp, #32]
 800608e:	2300      	movs	r3, #0
 8006090:	eba9 090a 	sub.w	r9, r9, sl
 8006094:	930c      	str	r3, [sp, #48]	; 0x30
 8006096:	e7bc      	b.n	8006012 <_dtoa_r+0x1ba>
 8006098:	2301      	movs	r3, #1
 800609a:	9309      	str	r3, [sp, #36]	; 0x24
 800609c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800609e:	2b00      	cmp	r3, #0
 80060a0:	dd74      	ble.n	800618c <_dtoa_r+0x334>
 80060a2:	4698      	mov	r8, r3
 80060a4:	9304      	str	r3, [sp, #16]
 80060a6:	2200      	movs	r2, #0
 80060a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060aa:	6072      	str	r2, [r6, #4]
 80060ac:	2204      	movs	r2, #4
 80060ae:	f102 0014 	add.w	r0, r2, #20
 80060b2:	4298      	cmp	r0, r3
 80060b4:	6871      	ldr	r1, [r6, #4]
 80060b6:	d96e      	bls.n	8006196 <_dtoa_r+0x33e>
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 fff0 	bl	800709e <_Balloc>
 80060be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060c0:	6030      	str	r0, [r6, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f1b8 0f0e 	cmp.w	r8, #14
 80060c8:	9306      	str	r3, [sp, #24]
 80060ca:	f200 80ed 	bhi.w	80062a8 <_dtoa_r+0x450>
 80060ce:	2d00      	cmp	r5, #0
 80060d0:	f000 80ea 	beq.w	80062a8 <_dtoa_r+0x450>
 80060d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060d8:	f1ba 0f00 	cmp.w	sl, #0
 80060dc:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80060e0:	dd77      	ble.n	80061d2 <_dtoa_r+0x37a>
 80060e2:	4a28      	ldr	r2, [pc, #160]	; (8006184 <_dtoa_r+0x32c>)
 80060e4:	f00a 030f 	and.w	r3, sl, #15
 80060e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80060ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060f0:	06f0      	lsls	r0, r6, #27
 80060f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060f6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80060fa:	d568      	bpl.n	80061ce <_dtoa_r+0x376>
 80060fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006100:	4b21      	ldr	r3, [pc, #132]	; (8006188 <_dtoa_r+0x330>)
 8006102:	2503      	movs	r5, #3
 8006104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006108:	f7fa fb28 	bl	800075c <__aeabi_ddiv>
 800610c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006110:	f006 060f 	and.w	r6, r6, #15
 8006114:	4f1c      	ldr	r7, [pc, #112]	; (8006188 <_dtoa_r+0x330>)
 8006116:	e04f      	b.n	80061b8 <_dtoa_r+0x360>
 8006118:	2301      	movs	r3, #1
 800611a:	9309      	str	r3, [sp, #36]	; 0x24
 800611c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800611e:	4453      	add	r3, sl
 8006120:	f103 0801 	add.w	r8, r3, #1
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	4643      	mov	r3, r8
 8006128:	2b01      	cmp	r3, #1
 800612a:	bfb8      	it	lt
 800612c:	2301      	movlt	r3, #1
 800612e:	e7ba      	b.n	80060a6 <_dtoa_r+0x24e>
 8006130:	2300      	movs	r3, #0
 8006132:	e7b2      	b.n	800609a <_dtoa_r+0x242>
 8006134:	2300      	movs	r3, #0
 8006136:	e7f0      	b.n	800611a <_dtoa_r+0x2c2>
 8006138:	2501      	movs	r5, #1
 800613a:	2300      	movs	r3, #0
 800613c:	9509      	str	r5, [sp, #36]	; 0x24
 800613e:	931e      	str	r3, [sp, #120]	; 0x78
 8006140:	f04f 33ff 	mov.w	r3, #4294967295
 8006144:	2200      	movs	r2, #0
 8006146:	9304      	str	r3, [sp, #16]
 8006148:	4698      	mov	r8, r3
 800614a:	2312      	movs	r3, #18
 800614c:	921f      	str	r2, [sp, #124]	; 0x7c
 800614e:	e7aa      	b.n	80060a6 <_dtoa_r+0x24e>
 8006150:	2301      	movs	r3, #1
 8006152:	9309      	str	r3, [sp, #36]	; 0x24
 8006154:	e7f4      	b.n	8006140 <_dtoa_r+0x2e8>
 8006156:	bf00      	nop
 8006158:	636f4361 	.word	0x636f4361
 800615c:	3fd287a7 	.word	0x3fd287a7
 8006160:	8b60c8b3 	.word	0x8b60c8b3
 8006164:	3fc68a28 	.word	0x3fc68a28
 8006168:	509f79fb 	.word	0x509f79fb
 800616c:	3fd34413 	.word	0x3fd34413
 8006170:	7ff00000 	.word	0x7ff00000
 8006174:	08007f19 	.word	0x08007f19
 8006178:	08007f10 	.word	0x08007f10
 800617c:	08007e95 	.word	0x08007e95
 8006180:	3ff80000 	.word	0x3ff80000
 8006184:	08007f50 	.word	0x08007f50
 8006188:	08007f28 	.word	0x08007f28
 800618c:	2301      	movs	r3, #1
 800618e:	9304      	str	r3, [sp, #16]
 8006190:	4698      	mov	r8, r3
 8006192:	461a      	mov	r2, r3
 8006194:	e7da      	b.n	800614c <_dtoa_r+0x2f4>
 8006196:	3101      	adds	r1, #1
 8006198:	6071      	str	r1, [r6, #4]
 800619a:	0052      	lsls	r2, r2, #1
 800619c:	e787      	b.n	80060ae <_dtoa_r+0x256>
 800619e:	07f1      	lsls	r1, r6, #31
 80061a0:	d508      	bpl.n	80061b4 <_dtoa_r+0x35c>
 80061a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061aa:	f7fa f9ad 	bl	8000508 <__aeabi_dmul>
 80061ae:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80061b2:	3501      	adds	r5, #1
 80061b4:	1076      	asrs	r6, r6, #1
 80061b6:	3708      	adds	r7, #8
 80061b8:	2e00      	cmp	r6, #0
 80061ba:	d1f0      	bne.n	800619e <_dtoa_r+0x346>
 80061bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061c4:	f7fa faca 	bl	800075c <__aeabi_ddiv>
 80061c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061cc:	e01b      	b.n	8006206 <_dtoa_r+0x3ae>
 80061ce:	2502      	movs	r5, #2
 80061d0:	e7a0      	b.n	8006114 <_dtoa_r+0x2bc>
 80061d2:	f000 80a4 	beq.w	800631e <_dtoa_r+0x4c6>
 80061d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80061da:	f1ca 0600 	rsb	r6, sl, #0
 80061de:	4ba0      	ldr	r3, [pc, #640]	; (8006460 <_dtoa_r+0x608>)
 80061e0:	f006 020f 	and.w	r2, r6, #15
 80061e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	f7fa f98c 	bl	8000508 <__aeabi_dmul>
 80061f0:	2502      	movs	r5, #2
 80061f2:	2300      	movs	r3, #0
 80061f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f8:	4f9a      	ldr	r7, [pc, #616]	; (8006464 <_dtoa_r+0x60c>)
 80061fa:	1136      	asrs	r6, r6, #4
 80061fc:	2e00      	cmp	r6, #0
 80061fe:	f040 8083 	bne.w	8006308 <_dtoa_r+0x4b0>
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e0      	bne.n	80061c8 <_dtoa_r+0x370>
 8006206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 808a 	beq.w	8006322 <_dtoa_r+0x4ca>
 800620e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006212:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006216:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800621a:	2200      	movs	r2, #0
 800621c:	4b92      	ldr	r3, [pc, #584]	; (8006468 <_dtoa_r+0x610>)
 800621e:	f7fa fbe5 	bl	80009ec <__aeabi_dcmplt>
 8006222:	2800      	cmp	r0, #0
 8006224:	d07d      	beq.n	8006322 <_dtoa_r+0x4ca>
 8006226:	f1b8 0f00 	cmp.w	r8, #0
 800622a:	d07a      	beq.n	8006322 <_dtoa_r+0x4ca>
 800622c:	9b04      	ldr	r3, [sp, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	dd36      	ble.n	80062a0 <_dtoa_r+0x448>
 8006232:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006236:	2200      	movs	r2, #0
 8006238:	4b8c      	ldr	r3, [pc, #560]	; (800646c <_dtoa_r+0x614>)
 800623a:	f7fa f965 	bl	8000508 <__aeabi_dmul>
 800623e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006242:	9e04      	ldr	r6, [sp, #16]
 8006244:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006248:	3501      	adds	r5, #1
 800624a:	4628      	mov	r0, r5
 800624c:	f7fa f8f2 	bl	8000434 <__aeabi_i2d>
 8006250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006254:	f7fa f958 	bl	8000508 <__aeabi_dmul>
 8006258:	2200      	movs	r2, #0
 800625a:	4b85      	ldr	r3, [pc, #532]	; (8006470 <_dtoa_r+0x618>)
 800625c:	f7f9 ff9e 	bl	800019c <__adddf3>
 8006260:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006264:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006268:	950b      	str	r5, [sp, #44]	; 0x2c
 800626a:	2e00      	cmp	r6, #0
 800626c:	d15c      	bne.n	8006328 <_dtoa_r+0x4d0>
 800626e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006272:	2200      	movs	r2, #0
 8006274:	4b7f      	ldr	r3, [pc, #508]	; (8006474 <_dtoa_r+0x61c>)
 8006276:	f7f9 ff8f 	bl	8000198 <__aeabi_dsub>
 800627a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800627c:	462b      	mov	r3, r5
 800627e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006282:	f7fa fbd1 	bl	8000a28 <__aeabi_dcmpgt>
 8006286:	2800      	cmp	r0, #0
 8006288:	f040 8281 	bne.w	800678e <_dtoa_r+0x936>
 800628c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006292:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006296:	f7fa fba9 	bl	80009ec <__aeabi_dcmplt>
 800629a:	2800      	cmp	r0, #0
 800629c:	f040 8275 	bne.w	800678a <_dtoa_r+0x932>
 80062a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80062a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	f2c0 814b 	blt.w	8006546 <_dtoa_r+0x6ee>
 80062b0:	f1ba 0f0e 	cmp.w	sl, #14
 80062b4:	f300 8147 	bgt.w	8006546 <_dtoa_r+0x6ee>
 80062b8:	4b69      	ldr	r3, [pc, #420]	; (8006460 <_dtoa_r+0x608>)
 80062ba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062c6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f280 80d7 	bge.w	800647c <_dtoa_r+0x624>
 80062ce:	f1b8 0f00 	cmp.w	r8, #0
 80062d2:	f300 80d3 	bgt.w	800647c <_dtoa_r+0x624>
 80062d6:	f040 8257 	bne.w	8006788 <_dtoa_r+0x930>
 80062da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062de:	2200      	movs	r2, #0
 80062e0:	4b64      	ldr	r3, [pc, #400]	; (8006474 <_dtoa_r+0x61c>)
 80062e2:	f7fa f911 	bl	8000508 <__aeabi_dmul>
 80062e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062ea:	f7fa fb93 	bl	8000a14 <__aeabi_dcmpge>
 80062ee:	4646      	mov	r6, r8
 80062f0:	4647      	mov	r7, r8
 80062f2:	2800      	cmp	r0, #0
 80062f4:	f040 822d 	bne.w	8006752 <_dtoa_r+0x8fa>
 80062f8:	9b06      	ldr	r3, [sp, #24]
 80062fa:	9a06      	ldr	r2, [sp, #24]
 80062fc:	1c5d      	adds	r5, r3, #1
 80062fe:	2331      	movs	r3, #49	; 0x31
 8006300:	f10a 0a01 	add.w	sl, sl, #1
 8006304:	7013      	strb	r3, [r2, #0]
 8006306:	e228      	b.n	800675a <_dtoa_r+0x902>
 8006308:	07f2      	lsls	r2, r6, #31
 800630a:	d505      	bpl.n	8006318 <_dtoa_r+0x4c0>
 800630c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006310:	f7fa f8fa 	bl	8000508 <__aeabi_dmul>
 8006314:	2301      	movs	r3, #1
 8006316:	3501      	adds	r5, #1
 8006318:	1076      	asrs	r6, r6, #1
 800631a:	3708      	adds	r7, #8
 800631c:	e76e      	b.n	80061fc <_dtoa_r+0x3a4>
 800631e:	2502      	movs	r5, #2
 8006320:	e771      	b.n	8006206 <_dtoa_r+0x3ae>
 8006322:	4657      	mov	r7, sl
 8006324:	4646      	mov	r6, r8
 8006326:	e790      	b.n	800624a <_dtoa_r+0x3f2>
 8006328:	4b4d      	ldr	r3, [pc, #308]	; (8006460 <_dtoa_r+0x608>)
 800632a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800632e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006332:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006334:	2b00      	cmp	r3, #0
 8006336:	d048      	beq.n	80063ca <_dtoa_r+0x572>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	2000      	movs	r0, #0
 800633e:	494e      	ldr	r1, [pc, #312]	; (8006478 <_dtoa_r+0x620>)
 8006340:	f7fa fa0c 	bl	800075c <__aeabi_ddiv>
 8006344:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006348:	f7f9 ff26 	bl	8000198 <__aeabi_dsub>
 800634c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006350:	9d06      	ldr	r5, [sp, #24]
 8006352:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006356:	f7fa fb87 	bl	8000a68 <__aeabi_d2iz>
 800635a:	9011      	str	r0, [sp, #68]	; 0x44
 800635c:	f7fa f86a 	bl	8000434 <__aeabi_i2d>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006368:	f7f9 ff16 	bl	8000198 <__aeabi_dsub>
 800636c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800636e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006372:	3330      	adds	r3, #48	; 0x30
 8006374:	f805 3b01 	strb.w	r3, [r5], #1
 8006378:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800637c:	f7fa fb36 	bl	80009ec <__aeabi_dcmplt>
 8006380:	2800      	cmp	r0, #0
 8006382:	d163      	bne.n	800644c <_dtoa_r+0x5f4>
 8006384:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006388:	2000      	movs	r0, #0
 800638a:	4937      	ldr	r1, [pc, #220]	; (8006468 <_dtoa_r+0x610>)
 800638c:	f7f9 ff04 	bl	8000198 <__aeabi_dsub>
 8006390:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006394:	f7fa fb2a 	bl	80009ec <__aeabi_dcmplt>
 8006398:	2800      	cmp	r0, #0
 800639a:	f040 80b5 	bne.w	8006508 <_dtoa_r+0x6b0>
 800639e:	9b06      	ldr	r3, [sp, #24]
 80063a0:	1aeb      	subs	r3, r5, r3
 80063a2:	429e      	cmp	r6, r3
 80063a4:	f77f af7c 	ble.w	80062a0 <_dtoa_r+0x448>
 80063a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063ac:	2200      	movs	r2, #0
 80063ae:	4b2f      	ldr	r3, [pc, #188]	; (800646c <_dtoa_r+0x614>)
 80063b0:	f7fa f8aa 	bl	8000508 <__aeabi_dmul>
 80063b4:	2200      	movs	r2, #0
 80063b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063be:	4b2b      	ldr	r3, [pc, #172]	; (800646c <_dtoa_r+0x614>)
 80063c0:	f7fa f8a2 	bl	8000508 <__aeabi_dmul>
 80063c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063c8:	e7c3      	b.n	8006352 <_dtoa_r+0x4fa>
 80063ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80063ce:	f7fa f89b 	bl	8000508 <__aeabi_dmul>
 80063d2:	9b06      	ldr	r3, [sp, #24]
 80063d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063d8:	199d      	adds	r5, r3, r6
 80063da:	461e      	mov	r6, r3
 80063dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063e0:	f7fa fb42 	bl	8000a68 <__aeabi_d2iz>
 80063e4:	9011      	str	r0, [sp, #68]	; 0x44
 80063e6:	f7fa f825 	bl	8000434 <__aeabi_i2d>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063f2:	f7f9 fed1 	bl	8000198 <__aeabi_dsub>
 80063f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063fc:	3330      	adds	r3, #48	; 0x30
 80063fe:	f806 3b01 	strb.w	r3, [r6], #1
 8006402:	42ae      	cmp	r6, r5
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	d124      	bne.n	8006454 <_dtoa_r+0x5fc>
 800640a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800640e:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <_dtoa_r+0x620>)
 8006410:	f7f9 fec4 	bl	800019c <__adddf3>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800641c:	f7fa fb04 	bl	8000a28 <__aeabi_dcmpgt>
 8006420:	2800      	cmp	r0, #0
 8006422:	d171      	bne.n	8006508 <_dtoa_r+0x6b0>
 8006424:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006428:	2000      	movs	r0, #0
 800642a:	4913      	ldr	r1, [pc, #76]	; (8006478 <_dtoa_r+0x620>)
 800642c:	f7f9 feb4 	bl	8000198 <__aeabi_dsub>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006438:	f7fa fad8 	bl	80009ec <__aeabi_dcmplt>
 800643c:	2800      	cmp	r0, #0
 800643e:	f43f af2f 	beq.w	80062a0 <_dtoa_r+0x448>
 8006442:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006446:	1e6a      	subs	r2, r5, #1
 8006448:	2b30      	cmp	r3, #48	; 0x30
 800644a:	d001      	beq.n	8006450 <_dtoa_r+0x5f8>
 800644c:	46ba      	mov	sl, r7
 800644e:	e04a      	b.n	80064e6 <_dtoa_r+0x68e>
 8006450:	4615      	mov	r5, r2
 8006452:	e7f6      	b.n	8006442 <_dtoa_r+0x5ea>
 8006454:	4b05      	ldr	r3, [pc, #20]	; (800646c <_dtoa_r+0x614>)
 8006456:	f7fa f857 	bl	8000508 <__aeabi_dmul>
 800645a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800645e:	e7bd      	b.n	80063dc <_dtoa_r+0x584>
 8006460:	08007f50 	.word	0x08007f50
 8006464:	08007f28 	.word	0x08007f28
 8006468:	3ff00000 	.word	0x3ff00000
 800646c:	40240000 	.word	0x40240000
 8006470:	401c0000 	.word	0x401c0000
 8006474:	40140000 	.word	0x40140000
 8006478:	3fe00000 	.word	0x3fe00000
 800647c:	9d06      	ldr	r5, [sp, #24]
 800647e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006486:	4630      	mov	r0, r6
 8006488:	4639      	mov	r1, r7
 800648a:	f7fa f967 	bl	800075c <__aeabi_ddiv>
 800648e:	f7fa faeb 	bl	8000a68 <__aeabi_d2iz>
 8006492:	4681      	mov	r9, r0
 8006494:	f7f9 ffce 	bl	8000434 <__aeabi_i2d>
 8006498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800649c:	f7fa f834 	bl	8000508 <__aeabi_dmul>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4630      	mov	r0, r6
 80064a6:	4639      	mov	r1, r7
 80064a8:	f7f9 fe76 	bl	8000198 <__aeabi_dsub>
 80064ac:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80064b0:	f805 6b01 	strb.w	r6, [r5], #1
 80064b4:	9e06      	ldr	r6, [sp, #24]
 80064b6:	4602      	mov	r2, r0
 80064b8:	1bae      	subs	r6, r5, r6
 80064ba:	45b0      	cmp	r8, r6
 80064bc:	460b      	mov	r3, r1
 80064be:	d135      	bne.n	800652c <_dtoa_r+0x6d4>
 80064c0:	f7f9 fe6c 	bl	800019c <__adddf3>
 80064c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064c8:	4606      	mov	r6, r0
 80064ca:	460f      	mov	r7, r1
 80064cc:	f7fa faac 	bl	8000a28 <__aeabi_dcmpgt>
 80064d0:	b9c8      	cbnz	r0, 8006506 <_dtoa_r+0x6ae>
 80064d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064d6:	4630      	mov	r0, r6
 80064d8:	4639      	mov	r1, r7
 80064da:	f7fa fa7d 	bl	80009d8 <__aeabi_dcmpeq>
 80064de:	b110      	cbz	r0, 80064e6 <_dtoa_r+0x68e>
 80064e0:	f019 0f01 	tst.w	r9, #1
 80064e4:	d10f      	bne.n	8006506 <_dtoa_r+0x6ae>
 80064e6:	4659      	mov	r1, fp
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 fe0c 	bl	8007106 <_Bfree>
 80064ee:	2300      	movs	r3, #0
 80064f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80064f2:	702b      	strb	r3, [r5, #0]
 80064f4:	f10a 0301 	add.w	r3, sl, #1
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f43f acf3 	beq.w	8005ee8 <_dtoa_r+0x90>
 8006502:	601d      	str	r5, [r3, #0]
 8006504:	e4f0      	b.n	8005ee8 <_dtoa_r+0x90>
 8006506:	4657      	mov	r7, sl
 8006508:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800650c:	1e6b      	subs	r3, r5, #1
 800650e:	2a39      	cmp	r2, #57	; 0x39
 8006510:	d106      	bne.n	8006520 <_dtoa_r+0x6c8>
 8006512:	9a06      	ldr	r2, [sp, #24]
 8006514:	429a      	cmp	r2, r3
 8006516:	d107      	bne.n	8006528 <_dtoa_r+0x6d0>
 8006518:	2330      	movs	r3, #48	; 0x30
 800651a:	7013      	strb	r3, [r2, #0]
 800651c:	4613      	mov	r3, r2
 800651e:	3701      	adds	r7, #1
 8006520:	781a      	ldrb	r2, [r3, #0]
 8006522:	3201      	adds	r2, #1
 8006524:	701a      	strb	r2, [r3, #0]
 8006526:	e791      	b.n	800644c <_dtoa_r+0x5f4>
 8006528:	461d      	mov	r5, r3
 800652a:	e7ed      	b.n	8006508 <_dtoa_r+0x6b0>
 800652c:	2200      	movs	r2, #0
 800652e:	4b99      	ldr	r3, [pc, #612]	; (8006794 <_dtoa_r+0x93c>)
 8006530:	f7f9 ffea 	bl	8000508 <__aeabi_dmul>
 8006534:	2200      	movs	r2, #0
 8006536:	2300      	movs	r3, #0
 8006538:	4606      	mov	r6, r0
 800653a:	460f      	mov	r7, r1
 800653c:	f7fa fa4c 	bl	80009d8 <__aeabi_dcmpeq>
 8006540:	2800      	cmp	r0, #0
 8006542:	d09e      	beq.n	8006482 <_dtoa_r+0x62a>
 8006544:	e7cf      	b.n	80064e6 <_dtoa_r+0x68e>
 8006546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006548:	2a00      	cmp	r2, #0
 800654a:	f000 8088 	beq.w	800665e <_dtoa_r+0x806>
 800654e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006550:	2a01      	cmp	r2, #1
 8006552:	dc6d      	bgt.n	8006630 <_dtoa_r+0x7d8>
 8006554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006556:	2a00      	cmp	r2, #0
 8006558:	d066      	beq.n	8006628 <_dtoa_r+0x7d0>
 800655a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800655e:	464d      	mov	r5, r9
 8006560:	9e08      	ldr	r6, [sp, #32]
 8006562:	9a07      	ldr	r2, [sp, #28]
 8006564:	2101      	movs	r1, #1
 8006566:	441a      	add	r2, r3
 8006568:	4620      	mov	r0, r4
 800656a:	4499      	add	r9, r3
 800656c:	9207      	str	r2, [sp, #28]
 800656e:	f000 fea8 	bl	80072c2 <__i2b>
 8006572:	4607      	mov	r7, r0
 8006574:	2d00      	cmp	r5, #0
 8006576:	dd0b      	ble.n	8006590 <_dtoa_r+0x738>
 8006578:	9b07      	ldr	r3, [sp, #28]
 800657a:	2b00      	cmp	r3, #0
 800657c:	dd08      	ble.n	8006590 <_dtoa_r+0x738>
 800657e:	42ab      	cmp	r3, r5
 8006580:	bfa8      	it	ge
 8006582:	462b      	movge	r3, r5
 8006584:	9a07      	ldr	r2, [sp, #28]
 8006586:	eba9 0903 	sub.w	r9, r9, r3
 800658a:	1aed      	subs	r5, r5, r3
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	9307      	str	r3, [sp, #28]
 8006590:	9b08      	ldr	r3, [sp, #32]
 8006592:	b1eb      	cbz	r3, 80065d0 <_dtoa_r+0x778>
 8006594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006596:	2b00      	cmp	r3, #0
 8006598:	d065      	beq.n	8006666 <_dtoa_r+0x80e>
 800659a:	b18e      	cbz	r6, 80065c0 <_dtoa_r+0x768>
 800659c:	4639      	mov	r1, r7
 800659e:	4632      	mov	r2, r6
 80065a0:	4620      	mov	r0, r4
 80065a2:	f000 ff2d 	bl	8007400 <__pow5mult>
 80065a6:	465a      	mov	r2, fp
 80065a8:	4601      	mov	r1, r0
 80065aa:	4607      	mov	r7, r0
 80065ac:	4620      	mov	r0, r4
 80065ae:	f000 fe91 	bl	80072d4 <__multiply>
 80065b2:	4659      	mov	r1, fp
 80065b4:	900a      	str	r0, [sp, #40]	; 0x28
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 fda5 	bl	8007106 <_Bfree>
 80065bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065be:	469b      	mov	fp, r3
 80065c0:	9b08      	ldr	r3, [sp, #32]
 80065c2:	1b9a      	subs	r2, r3, r6
 80065c4:	d004      	beq.n	80065d0 <_dtoa_r+0x778>
 80065c6:	4659      	mov	r1, fp
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 ff19 	bl	8007400 <__pow5mult>
 80065ce:	4683      	mov	fp, r0
 80065d0:	2101      	movs	r1, #1
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 fe75 	bl	80072c2 <__i2b>
 80065d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80065da:	4606      	mov	r6, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f000 81c6 	beq.w	800696e <_dtoa_r+0xb16>
 80065e2:	461a      	mov	r2, r3
 80065e4:	4601      	mov	r1, r0
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 ff0a 	bl	8007400 <__pow5mult>
 80065ec:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80065ee:	4606      	mov	r6, r0
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	dc3e      	bgt.n	8006672 <_dtoa_r+0x81a>
 80065f4:	9b02      	ldr	r3, [sp, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d137      	bne.n	800666a <_dtoa_r+0x812>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006600:	2b00      	cmp	r3, #0
 8006602:	d134      	bne.n	800666e <_dtoa_r+0x816>
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800660a:	0d1b      	lsrs	r3, r3, #20
 800660c:	051b      	lsls	r3, r3, #20
 800660e:	b12b      	cbz	r3, 800661c <_dtoa_r+0x7c4>
 8006610:	9b07      	ldr	r3, [sp, #28]
 8006612:	f109 0901 	add.w	r9, r9, #1
 8006616:	3301      	adds	r3, #1
 8006618:	9307      	str	r3, [sp, #28]
 800661a:	2301      	movs	r3, #1
 800661c:	9308      	str	r3, [sp, #32]
 800661e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006620:	2b00      	cmp	r3, #0
 8006622:	d128      	bne.n	8006676 <_dtoa_r+0x81e>
 8006624:	2001      	movs	r0, #1
 8006626:	e02e      	b.n	8006686 <_dtoa_r+0x82e>
 8006628:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800662a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800662e:	e796      	b.n	800655e <_dtoa_r+0x706>
 8006630:	9b08      	ldr	r3, [sp, #32]
 8006632:	f108 36ff 	add.w	r6, r8, #4294967295
 8006636:	42b3      	cmp	r3, r6
 8006638:	bfb7      	itett	lt
 800663a:	9b08      	ldrlt	r3, [sp, #32]
 800663c:	1b9e      	subge	r6, r3, r6
 800663e:	1af2      	sublt	r2, r6, r3
 8006640:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006642:	bfbf      	itttt	lt
 8006644:	9608      	strlt	r6, [sp, #32]
 8006646:	189b      	addlt	r3, r3, r2
 8006648:	930c      	strlt	r3, [sp, #48]	; 0x30
 800664a:	2600      	movlt	r6, #0
 800664c:	f1b8 0f00 	cmp.w	r8, #0
 8006650:	bfb9      	ittee	lt
 8006652:	eba9 0508 	sublt.w	r5, r9, r8
 8006656:	2300      	movlt	r3, #0
 8006658:	464d      	movge	r5, r9
 800665a:	4643      	movge	r3, r8
 800665c:	e781      	b.n	8006562 <_dtoa_r+0x70a>
 800665e:	9e08      	ldr	r6, [sp, #32]
 8006660:	464d      	mov	r5, r9
 8006662:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006664:	e786      	b.n	8006574 <_dtoa_r+0x71c>
 8006666:	9a08      	ldr	r2, [sp, #32]
 8006668:	e7ad      	b.n	80065c6 <_dtoa_r+0x76e>
 800666a:	2300      	movs	r3, #0
 800666c:	e7d6      	b.n	800661c <_dtoa_r+0x7c4>
 800666e:	9b02      	ldr	r3, [sp, #8]
 8006670:	e7d4      	b.n	800661c <_dtoa_r+0x7c4>
 8006672:	2300      	movs	r3, #0
 8006674:	9308      	str	r3, [sp, #32]
 8006676:	6933      	ldr	r3, [r6, #16]
 8006678:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800667c:	6918      	ldr	r0, [r3, #16]
 800667e:	f000 fdd2 	bl	8007226 <__hi0bits>
 8006682:	f1c0 0020 	rsb	r0, r0, #32
 8006686:	9b07      	ldr	r3, [sp, #28]
 8006688:	4418      	add	r0, r3
 800668a:	f010 001f 	ands.w	r0, r0, #31
 800668e:	d047      	beq.n	8006720 <_dtoa_r+0x8c8>
 8006690:	f1c0 0320 	rsb	r3, r0, #32
 8006694:	2b04      	cmp	r3, #4
 8006696:	dd3b      	ble.n	8006710 <_dtoa_r+0x8b8>
 8006698:	9b07      	ldr	r3, [sp, #28]
 800669a:	f1c0 001c 	rsb	r0, r0, #28
 800669e:	4481      	add	r9, r0
 80066a0:	4405      	add	r5, r0
 80066a2:	4403      	add	r3, r0
 80066a4:	9307      	str	r3, [sp, #28]
 80066a6:	f1b9 0f00 	cmp.w	r9, #0
 80066aa:	dd05      	ble.n	80066b8 <_dtoa_r+0x860>
 80066ac:	4659      	mov	r1, fp
 80066ae:	464a      	mov	r2, r9
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 fef3 	bl	800749c <__lshift>
 80066b6:	4683      	mov	fp, r0
 80066b8:	9b07      	ldr	r3, [sp, #28]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	dd05      	ble.n	80066ca <_dtoa_r+0x872>
 80066be:	4631      	mov	r1, r6
 80066c0:	461a      	mov	r2, r3
 80066c2:	4620      	mov	r0, r4
 80066c4:	f000 feea 	bl	800749c <__lshift>
 80066c8:	4606      	mov	r6, r0
 80066ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066cc:	b353      	cbz	r3, 8006724 <_dtoa_r+0x8cc>
 80066ce:	4631      	mov	r1, r6
 80066d0:	4658      	mov	r0, fp
 80066d2:	f000 ff37 	bl	8007544 <__mcmp>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	da24      	bge.n	8006724 <_dtoa_r+0x8cc>
 80066da:	2300      	movs	r3, #0
 80066dc:	4659      	mov	r1, fp
 80066de:	220a      	movs	r2, #10
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 fd27 	bl	8007134 <__multadd>
 80066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066ec:	4683      	mov	fp, r0
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8144 	beq.w	800697c <_dtoa_r+0xb24>
 80066f4:	2300      	movs	r3, #0
 80066f6:	4639      	mov	r1, r7
 80066f8:	220a      	movs	r2, #10
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 fd1a 	bl	8007134 <__multadd>
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	4607      	mov	r7, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	dc4d      	bgt.n	80067a4 <_dtoa_r+0x94c>
 8006708:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800670a:	2b02      	cmp	r3, #2
 800670c:	dd4a      	ble.n	80067a4 <_dtoa_r+0x94c>
 800670e:	e011      	b.n	8006734 <_dtoa_r+0x8dc>
 8006710:	d0c9      	beq.n	80066a6 <_dtoa_r+0x84e>
 8006712:	9a07      	ldr	r2, [sp, #28]
 8006714:	331c      	adds	r3, #28
 8006716:	441a      	add	r2, r3
 8006718:	4499      	add	r9, r3
 800671a:	441d      	add	r5, r3
 800671c:	4613      	mov	r3, r2
 800671e:	e7c1      	b.n	80066a4 <_dtoa_r+0x84c>
 8006720:	4603      	mov	r3, r0
 8006722:	e7f6      	b.n	8006712 <_dtoa_r+0x8ba>
 8006724:	f1b8 0f00 	cmp.w	r8, #0
 8006728:	dc36      	bgt.n	8006798 <_dtoa_r+0x940>
 800672a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800672c:	2b02      	cmp	r3, #2
 800672e:	dd33      	ble.n	8006798 <_dtoa_r+0x940>
 8006730:	f8cd 8010 	str.w	r8, [sp, #16]
 8006734:	9b04      	ldr	r3, [sp, #16]
 8006736:	b963      	cbnz	r3, 8006752 <_dtoa_r+0x8fa>
 8006738:	4631      	mov	r1, r6
 800673a:	2205      	movs	r2, #5
 800673c:	4620      	mov	r0, r4
 800673e:	f000 fcf9 	bl	8007134 <__multadd>
 8006742:	4601      	mov	r1, r0
 8006744:	4606      	mov	r6, r0
 8006746:	4658      	mov	r0, fp
 8006748:	f000 fefc 	bl	8007544 <__mcmp>
 800674c:	2800      	cmp	r0, #0
 800674e:	f73f add3 	bgt.w	80062f8 <_dtoa_r+0x4a0>
 8006752:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006754:	9d06      	ldr	r5, [sp, #24]
 8006756:	ea6f 0a03 	mvn.w	sl, r3
 800675a:	f04f 0900 	mov.w	r9, #0
 800675e:	4631      	mov	r1, r6
 8006760:	4620      	mov	r0, r4
 8006762:	f000 fcd0 	bl	8007106 <_Bfree>
 8006766:	2f00      	cmp	r7, #0
 8006768:	f43f aebd 	beq.w	80064e6 <_dtoa_r+0x68e>
 800676c:	f1b9 0f00 	cmp.w	r9, #0
 8006770:	d005      	beq.n	800677e <_dtoa_r+0x926>
 8006772:	45b9      	cmp	r9, r7
 8006774:	d003      	beq.n	800677e <_dtoa_r+0x926>
 8006776:	4649      	mov	r1, r9
 8006778:	4620      	mov	r0, r4
 800677a:	f000 fcc4 	bl	8007106 <_Bfree>
 800677e:	4639      	mov	r1, r7
 8006780:	4620      	mov	r0, r4
 8006782:	f000 fcc0 	bl	8007106 <_Bfree>
 8006786:	e6ae      	b.n	80064e6 <_dtoa_r+0x68e>
 8006788:	2600      	movs	r6, #0
 800678a:	4637      	mov	r7, r6
 800678c:	e7e1      	b.n	8006752 <_dtoa_r+0x8fa>
 800678e:	46ba      	mov	sl, r7
 8006790:	4637      	mov	r7, r6
 8006792:	e5b1      	b.n	80062f8 <_dtoa_r+0x4a0>
 8006794:	40240000 	.word	0x40240000
 8006798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679a:	f8cd 8010 	str.w	r8, [sp, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80f3 	beq.w	800698a <_dtoa_r+0xb32>
 80067a4:	2d00      	cmp	r5, #0
 80067a6:	dd05      	ble.n	80067b4 <_dtoa_r+0x95c>
 80067a8:	4639      	mov	r1, r7
 80067aa:	462a      	mov	r2, r5
 80067ac:	4620      	mov	r0, r4
 80067ae:	f000 fe75 	bl	800749c <__lshift>
 80067b2:	4607      	mov	r7, r0
 80067b4:	9b08      	ldr	r3, [sp, #32]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d04c      	beq.n	8006854 <_dtoa_r+0x9fc>
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	4620      	mov	r0, r4
 80067be:	f000 fc6e 	bl	800709e <_Balloc>
 80067c2:	4605      	mov	r5, r0
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	f107 010c 	add.w	r1, r7, #12
 80067ca:	3202      	adds	r2, #2
 80067cc:	0092      	lsls	r2, r2, #2
 80067ce:	300c      	adds	r0, #12
 80067d0:	f000 fc5a 	bl	8007088 <memcpy>
 80067d4:	2201      	movs	r2, #1
 80067d6:	4629      	mov	r1, r5
 80067d8:	4620      	mov	r0, r4
 80067da:	f000 fe5f 	bl	800749c <__lshift>
 80067de:	46b9      	mov	r9, r7
 80067e0:	4607      	mov	r7, r0
 80067e2:	9b06      	ldr	r3, [sp, #24]
 80067e4:	9307      	str	r3, [sp, #28]
 80067e6:	9b02      	ldr	r3, [sp, #8]
 80067e8:	f003 0301 	and.w	r3, r3, #1
 80067ec:	9308      	str	r3, [sp, #32]
 80067ee:	4631      	mov	r1, r6
 80067f0:	4658      	mov	r0, fp
 80067f2:	f7ff faa3 	bl	8005d3c <quorem>
 80067f6:	4649      	mov	r1, r9
 80067f8:	4605      	mov	r5, r0
 80067fa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80067fe:	4658      	mov	r0, fp
 8006800:	f000 fea0 	bl	8007544 <__mcmp>
 8006804:	463a      	mov	r2, r7
 8006806:	9002      	str	r0, [sp, #8]
 8006808:	4631      	mov	r1, r6
 800680a:	4620      	mov	r0, r4
 800680c:	f000 feb4 	bl	8007578 <__mdiff>
 8006810:	68c3      	ldr	r3, [r0, #12]
 8006812:	4602      	mov	r2, r0
 8006814:	bb03      	cbnz	r3, 8006858 <_dtoa_r+0xa00>
 8006816:	4601      	mov	r1, r0
 8006818:	9009      	str	r0, [sp, #36]	; 0x24
 800681a:	4658      	mov	r0, fp
 800681c:	f000 fe92 	bl	8007544 <__mcmp>
 8006820:	4603      	mov	r3, r0
 8006822:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006824:	4611      	mov	r1, r2
 8006826:	4620      	mov	r0, r4
 8006828:	9309      	str	r3, [sp, #36]	; 0x24
 800682a:	f000 fc6c 	bl	8007106 <_Bfree>
 800682e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006830:	b9a3      	cbnz	r3, 800685c <_dtoa_r+0xa04>
 8006832:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006834:	b992      	cbnz	r2, 800685c <_dtoa_r+0xa04>
 8006836:	9a08      	ldr	r2, [sp, #32]
 8006838:	b982      	cbnz	r2, 800685c <_dtoa_r+0xa04>
 800683a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800683e:	d029      	beq.n	8006894 <_dtoa_r+0xa3c>
 8006840:	9b02      	ldr	r3, [sp, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	dd01      	ble.n	800684a <_dtoa_r+0x9f2>
 8006846:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800684a:	9b07      	ldr	r3, [sp, #28]
 800684c:	1c5d      	adds	r5, r3, #1
 800684e:	f883 8000 	strb.w	r8, [r3]
 8006852:	e784      	b.n	800675e <_dtoa_r+0x906>
 8006854:	4638      	mov	r0, r7
 8006856:	e7c2      	b.n	80067de <_dtoa_r+0x986>
 8006858:	2301      	movs	r3, #1
 800685a:	e7e3      	b.n	8006824 <_dtoa_r+0x9cc>
 800685c:	9a02      	ldr	r2, [sp, #8]
 800685e:	2a00      	cmp	r2, #0
 8006860:	db04      	blt.n	800686c <_dtoa_r+0xa14>
 8006862:	d123      	bne.n	80068ac <_dtoa_r+0xa54>
 8006864:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006866:	bb0a      	cbnz	r2, 80068ac <_dtoa_r+0xa54>
 8006868:	9a08      	ldr	r2, [sp, #32]
 800686a:	b9fa      	cbnz	r2, 80068ac <_dtoa_r+0xa54>
 800686c:	2b00      	cmp	r3, #0
 800686e:	ddec      	ble.n	800684a <_dtoa_r+0x9f2>
 8006870:	4659      	mov	r1, fp
 8006872:	2201      	movs	r2, #1
 8006874:	4620      	mov	r0, r4
 8006876:	f000 fe11 	bl	800749c <__lshift>
 800687a:	4631      	mov	r1, r6
 800687c:	4683      	mov	fp, r0
 800687e:	f000 fe61 	bl	8007544 <__mcmp>
 8006882:	2800      	cmp	r0, #0
 8006884:	dc03      	bgt.n	800688e <_dtoa_r+0xa36>
 8006886:	d1e0      	bne.n	800684a <_dtoa_r+0x9f2>
 8006888:	f018 0f01 	tst.w	r8, #1
 800688c:	d0dd      	beq.n	800684a <_dtoa_r+0x9f2>
 800688e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006892:	d1d8      	bne.n	8006846 <_dtoa_r+0x9ee>
 8006894:	9b07      	ldr	r3, [sp, #28]
 8006896:	9a07      	ldr	r2, [sp, #28]
 8006898:	1c5d      	adds	r5, r3, #1
 800689a:	2339      	movs	r3, #57	; 0x39
 800689c:	7013      	strb	r3, [r2, #0]
 800689e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068a2:	1e6a      	subs	r2, r5, #1
 80068a4:	2b39      	cmp	r3, #57	; 0x39
 80068a6:	d04d      	beq.n	8006944 <_dtoa_r+0xaec>
 80068a8:	3301      	adds	r3, #1
 80068aa:	e052      	b.n	8006952 <_dtoa_r+0xafa>
 80068ac:	9a07      	ldr	r2, [sp, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f102 0501 	add.w	r5, r2, #1
 80068b4:	dd06      	ble.n	80068c4 <_dtoa_r+0xa6c>
 80068b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068ba:	d0eb      	beq.n	8006894 <_dtoa_r+0xa3c>
 80068bc:	f108 0801 	add.w	r8, r8, #1
 80068c0:	9b07      	ldr	r3, [sp, #28]
 80068c2:	e7c4      	b.n	800684e <_dtoa_r+0x9f6>
 80068c4:	9b06      	ldr	r3, [sp, #24]
 80068c6:	9a04      	ldr	r2, [sp, #16]
 80068c8:	1aeb      	subs	r3, r5, r3
 80068ca:	4293      	cmp	r3, r2
 80068cc:	f805 8c01 	strb.w	r8, [r5, #-1]
 80068d0:	d021      	beq.n	8006916 <_dtoa_r+0xabe>
 80068d2:	4659      	mov	r1, fp
 80068d4:	2300      	movs	r3, #0
 80068d6:	220a      	movs	r2, #10
 80068d8:	4620      	mov	r0, r4
 80068da:	f000 fc2b 	bl	8007134 <__multadd>
 80068de:	45b9      	cmp	r9, r7
 80068e0:	4683      	mov	fp, r0
 80068e2:	f04f 0300 	mov.w	r3, #0
 80068e6:	f04f 020a 	mov.w	r2, #10
 80068ea:	4649      	mov	r1, r9
 80068ec:	4620      	mov	r0, r4
 80068ee:	d105      	bne.n	80068fc <_dtoa_r+0xaa4>
 80068f0:	f000 fc20 	bl	8007134 <__multadd>
 80068f4:	4681      	mov	r9, r0
 80068f6:	4607      	mov	r7, r0
 80068f8:	9507      	str	r5, [sp, #28]
 80068fa:	e778      	b.n	80067ee <_dtoa_r+0x996>
 80068fc:	f000 fc1a 	bl	8007134 <__multadd>
 8006900:	4639      	mov	r1, r7
 8006902:	4681      	mov	r9, r0
 8006904:	2300      	movs	r3, #0
 8006906:	220a      	movs	r2, #10
 8006908:	4620      	mov	r0, r4
 800690a:	f000 fc13 	bl	8007134 <__multadd>
 800690e:	4607      	mov	r7, r0
 8006910:	e7f2      	b.n	80068f8 <_dtoa_r+0xaa0>
 8006912:	f04f 0900 	mov.w	r9, #0
 8006916:	4659      	mov	r1, fp
 8006918:	2201      	movs	r2, #1
 800691a:	4620      	mov	r0, r4
 800691c:	f000 fdbe 	bl	800749c <__lshift>
 8006920:	4631      	mov	r1, r6
 8006922:	4683      	mov	fp, r0
 8006924:	f000 fe0e 	bl	8007544 <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	dcb8      	bgt.n	800689e <_dtoa_r+0xa46>
 800692c:	d102      	bne.n	8006934 <_dtoa_r+0xadc>
 800692e:	f018 0f01 	tst.w	r8, #1
 8006932:	d1b4      	bne.n	800689e <_dtoa_r+0xa46>
 8006934:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006938:	1e6a      	subs	r2, r5, #1
 800693a:	2b30      	cmp	r3, #48	; 0x30
 800693c:	f47f af0f 	bne.w	800675e <_dtoa_r+0x906>
 8006940:	4615      	mov	r5, r2
 8006942:	e7f7      	b.n	8006934 <_dtoa_r+0xadc>
 8006944:	9b06      	ldr	r3, [sp, #24]
 8006946:	4293      	cmp	r3, r2
 8006948:	d105      	bne.n	8006956 <_dtoa_r+0xafe>
 800694a:	2331      	movs	r3, #49	; 0x31
 800694c:	9a06      	ldr	r2, [sp, #24]
 800694e:	f10a 0a01 	add.w	sl, sl, #1
 8006952:	7013      	strb	r3, [r2, #0]
 8006954:	e703      	b.n	800675e <_dtoa_r+0x906>
 8006956:	4615      	mov	r5, r2
 8006958:	e7a1      	b.n	800689e <_dtoa_r+0xa46>
 800695a:	4b17      	ldr	r3, [pc, #92]	; (80069b8 <_dtoa_r+0xb60>)
 800695c:	f7ff bae1 	b.w	8005f22 <_dtoa_r+0xca>
 8006960:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006962:	2b00      	cmp	r3, #0
 8006964:	f47f aabb 	bne.w	8005ede <_dtoa_r+0x86>
 8006968:	4b14      	ldr	r3, [pc, #80]	; (80069bc <_dtoa_r+0xb64>)
 800696a:	f7ff bada 	b.w	8005f22 <_dtoa_r+0xca>
 800696e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006970:	2b01      	cmp	r3, #1
 8006972:	f77f ae3f 	ble.w	80065f4 <_dtoa_r+0x79c>
 8006976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006978:	9308      	str	r3, [sp, #32]
 800697a:	e653      	b.n	8006624 <_dtoa_r+0x7cc>
 800697c:	9b04      	ldr	r3, [sp, #16]
 800697e:	2b00      	cmp	r3, #0
 8006980:	dc03      	bgt.n	800698a <_dtoa_r+0xb32>
 8006982:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006984:	2b02      	cmp	r3, #2
 8006986:	f73f aed5 	bgt.w	8006734 <_dtoa_r+0x8dc>
 800698a:	9d06      	ldr	r5, [sp, #24]
 800698c:	4631      	mov	r1, r6
 800698e:	4658      	mov	r0, fp
 8006990:	f7ff f9d4 	bl	8005d3c <quorem>
 8006994:	9b06      	ldr	r3, [sp, #24]
 8006996:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800699a:	f805 8b01 	strb.w	r8, [r5], #1
 800699e:	9a04      	ldr	r2, [sp, #16]
 80069a0:	1aeb      	subs	r3, r5, r3
 80069a2:	429a      	cmp	r2, r3
 80069a4:	ddb5      	ble.n	8006912 <_dtoa_r+0xaba>
 80069a6:	4659      	mov	r1, fp
 80069a8:	2300      	movs	r3, #0
 80069aa:	220a      	movs	r2, #10
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 fbc1 	bl	8007134 <__multadd>
 80069b2:	4683      	mov	fp, r0
 80069b4:	e7ea      	b.n	800698c <_dtoa_r+0xb34>
 80069b6:	bf00      	nop
 80069b8:	08007e94 	.word	0x08007e94
 80069bc:	08007f10 	.word	0x08007f10

080069c0 <rshift>:
 80069c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c2:	6906      	ldr	r6, [r0, #16]
 80069c4:	114b      	asrs	r3, r1, #5
 80069c6:	429e      	cmp	r6, r3
 80069c8:	f100 0414 	add.w	r4, r0, #20
 80069cc:	dd31      	ble.n	8006a32 <rshift+0x72>
 80069ce:	f011 011f 	ands.w	r1, r1, #31
 80069d2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80069d6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80069da:	d108      	bne.n	80069ee <rshift+0x2e>
 80069dc:	4621      	mov	r1, r4
 80069de:	42b2      	cmp	r2, r6
 80069e0:	460b      	mov	r3, r1
 80069e2:	d211      	bcs.n	8006a08 <rshift+0x48>
 80069e4:	f852 3b04 	ldr.w	r3, [r2], #4
 80069e8:	f841 3b04 	str.w	r3, [r1], #4
 80069ec:	e7f7      	b.n	80069de <rshift+0x1e>
 80069ee:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80069f2:	4623      	mov	r3, r4
 80069f4:	f1c1 0c20 	rsb	ip, r1, #32
 80069f8:	40cd      	lsrs	r5, r1
 80069fa:	3204      	adds	r2, #4
 80069fc:	42b2      	cmp	r2, r6
 80069fe:	4617      	mov	r7, r2
 8006a00:	d30d      	bcc.n	8006a1e <rshift+0x5e>
 8006a02:	601d      	str	r5, [r3, #0]
 8006a04:	b105      	cbz	r5, 8006a08 <rshift+0x48>
 8006a06:	3304      	adds	r3, #4
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	eba3 0204 	sub.w	r2, r3, r4
 8006a0e:	bf08      	it	eq
 8006a10:	2300      	moveq	r3, #0
 8006a12:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006a16:	6102      	str	r2, [r0, #16]
 8006a18:	bf08      	it	eq
 8006a1a:	6143      	streq	r3, [r0, #20]
 8006a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a1e:	683f      	ldr	r7, [r7, #0]
 8006a20:	fa07 f70c 	lsl.w	r7, r7, ip
 8006a24:	433d      	orrs	r5, r7
 8006a26:	f843 5b04 	str.w	r5, [r3], #4
 8006a2a:	f852 5b04 	ldr.w	r5, [r2], #4
 8006a2e:	40cd      	lsrs	r5, r1
 8006a30:	e7e4      	b.n	80069fc <rshift+0x3c>
 8006a32:	4623      	mov	r3, r4
 8006a34:	e7e8      	b.n	8006a08 <rshift+0x48>

08006a36 <__hexdig_fun>:
 8006a36:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006a3a:	2b09      	cmp	r3, #9
 8006a3c:	d802      	bhi.n	8006a44 <__hexdig_fun+0xe>
 8006a3e:	3820      	subs	r0, #32
 8006a40:	b2c0      	uxtb	r0, r0
 8006a42:	4770      	bx	lr
 8006a44:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006a48:	2b05      	cmp	r3, #5
 8006a4a:	d801      	bhi.n	8006a50 <__hexdig_fun+0x1a>
 8006a4c:	3847      	subs	r0, #71	; 0x47
 8006a4e:	e7f7      	b.n	8006a40 <__hexdig_fun+0xa>
 8006a50:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006a54:	2b05      	cmp	r3, #5
 8006a56:	d801      	bhi.n	8006a5c <__hexdig_fun+0x26>
 8006a58:	3827      	subs	r0, #39	; 0x27
 8006a5a:	e7f1      	b.n	8006a40 <__hexdig_fun+0xa>
 8006a5c:	2000      	movs	r0, #0
 8006a5e:	4770      	bx	lr

08006a60 <__gethex>:
 8006a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a64:	b08b      	sub	sp, #44	; 0x2c
 8006a66:	9002      	str	r0, [sp, #8]
 8006a68:	9816      	ldr	r0, [sp, #88]	; 0x58
 8006a6a:	468a      	mov	sl, r1
 8006a6c:	4690      	mov	r8, r2
 8006a6e:	9306      	str	r3, [sp, #24]
 8006a70:	f000 fad1 	bl	8007016 <__localeconv_l>
 8006a74:	6803      	ldr	r3, [r0, #0]
 8006a76:	f04f 0b00 	mov.w	fp, #0
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	9303      	str	r3, [sp, #12]
 8006a7e:	f7f9 fb7f 	bl	8000180 <strlen>
 8006a82:	9b03      	ldr	r3, [sp, #12]
 8006a84:	9001      	str	r0, [sp, #4]
 8006a86:	4403      	add	r3, r0
 8006a88:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006a8c:	9307      	str	r3, [sp, #28]
 8006a8e:	f8da 3000 	ldr.w	r3, [sl]
 8006a92:	3302      	adds	r3, #2
 8006a94:	461f      	mov	r7, r3
 8006a96:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006a9a:	2830      	cmp	r0, #48	; 0x30
 8006a9c:	d06c      	beq.n	8006b78 <__gethex+0x118>
 8006a9e:	f7ff ffca 	bl	8006a36 <__hexdig_fun>
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d16a      	bne.n	8006b7e <__gethex+0x11e>
 8006aa8:	9a01      	ldr	r2, [sp, #4]
 8006aaa:	9903      	ldr	r1, [sp, #12]
 8006aac:	4638      	mov	r0, r7
 8006aae:	f001 f905 	bl	8007cbc <strncmp>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d166      	bne.n	8006b84 <__gethex+0x124>
 8006ab6:	9b01      	ldr	r3, [sp, #4]
 8006ab8:	5cf8      	ldrb	r0, [r7, r3]
 8006aba:	18fe      	adds	r6, r7, r3
 8006abc:	f7ff ffbb 	bl	8006a36 <__hexdig_fun>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d062      	beq.n	8006b8a <__gethex+0x12a>
 8006ac4:	4633      	mov	r3, r6
 8006ac6:	7818      	ldrb	r0, [r3, #0]
 8006ac8:	461f      	mov	r7, r3
 8006aca:	2830      	cmp	r0, #48	; 0x30
 8006acc:	f103 0301 	add.w	r3, r3, #1
 8006ad0:	d0f9      	beq.n	8006ac6 <__gethex+0x66>
 8006ad2:	f7ff ffb0 	bl	8006a36 <__hexdig_fun>
 8006ad6:	fab0 f580 	clz	r5, r0
 8006ada:	4634      	mov	r4, r6
 8006adc:	f04f 0b01 	mov.w	fp, #1
 8006ae0:	096d      	lsrs	r5, r5, #5
 8006ae2:	463a      	mov	r2, r7
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	7830      	ldrb	r0, [r6, #0]
 8006ae8:	3201      	adds	r2, #1
 8006aea:	f7ff ffa4 	bl	8006a36 <__hexdig_fun>
 8006aee:	2800      	cmp	r0, #0
 8006af0:	d1f8      	bne.n	8006ae4 <__gethex+0x84>
 8006af2:	9a01      	ldr	r2, [sp, #4]
 8006af4:	9903      	ldr	r1, [sp, #12]
 8006af6:	4630      	mov	r0, r6
 8006af8:	f001 f8e0 	bl	8007cbc <strncmp>
 8006afc:	b950      	cbnz	r0, 8006b14 <__gethex+0xb4>
 8006afe:	b954      	cbnz	r4, 8006b16 <__gethex+0xb6>
 8006b00:	9b01      	ldr	r3, [sp, #4]
 8006b02:	18f4      	adds	r4, r6, r3
 8006b04:	4622      	mov	r2, r4
 8006b06:	4616      	mov	r6, r2
 8006b08:	7830      	ldrb	r0, [r6, #0]
 8006b0a:	3201      	adds	r2, #1
 8006b0c:	f7ff ff93 	bl	8006a36 <__hexdig_fun>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d1f8      	bne.n	8006b06 <__gethex+0xa6>
 8006b14:	b10c      	cbz	r4, 8006b1a <__gethex+0xba>
 8006b16:	1ba4      	subs	r4, r4, r6
 8006b18:	00a4      	lsls	r4, r4, #2
 8006b1a:	7833      	ldrb	r3, [r6, #0]
 8006b1c:	2b50      	cmp	r3, #80	; 0x50
 8006b1e:	d001      	beq.n	8006b24 <__gethex+0xc4>
 8006b20:	2b70      	cmp	r3, #112	; 0x70
 8006b22:	d140      	bne.n	8006ba6 <__gethex+0x146>
 8006b24:	7873      	ldrb	r3, [r6, #1]
 8006b26:	2b2b      	cmp	r3, #43	; 0x2b
 8006b28:	d031      	beq.n	8006b8e <__gethex+0x12e>
 8006b2a:	2b2d      	cmp	r3, #45	; 0x2d
 8006b2c:	d033      	beq.n	8006b96 <__gethex+0x136>
 8006b2e:	f04f 0900 	mov.w	r9, #0
 8006b32:	1c71      	adds	r1, r6, #1
 8006b34:	7808      	ldrb	r0, [r1, #0]
 8006b36:	f7ff ff7e 	bl	8006a36 <__hexdig_fun>
 8006b3a:	1e43      	subs	r3, r0, #1
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b18      	cmp	r3, #24
 8006b40:	d831      	bhi.n	8006ba6 <__gethex+0x146>
 8006b42:	f1a0 0210 	sub.w	r2, r0, #16
 8006b46:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006b4a:	f7ff ff74 	bl	8006a36 <__hexdig_fun>
 8006b4e:	1e43      	subs	r3, r0, #1
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b18      	cmp	r3, #24
 8006b54:	d922      	bls.n	8006b9c <__gethex+0x13c>
 8006b56:	f1b9 0f00 	cmp.w	r9, #0
 8006b5a:	d000      	beq.n	8006b5e <__gethex+0xfe>
 8006b5c:	4252      	negs	r2, r2
 8006b5e:	4414      	add	r4, r2
 8006b60:	f8ca 1000 	str.w	r1, [sl]
 8006b64:	b30d      	cbz	r5, 8006baa <__gethex+0x14a>
 8006b66:	f1bb 0f00 	cmp.w	fp, #0
 8006b6a:	bf0c      	ite	eq
 8006b6c:	2706      	moveq	r7, #6
 8006b6e:	2700      	movne	r7, #0
 8006b70:	4638      	mov	r0, r7
 8006b72:	b00b      	add	sp, #44	; 0x2c
 8006b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b78:	f10b 0b01 	add.w	fp, fp, #1
 8006b7c:	e78a      	b.n	8006a94 <__gethex+0x34>
 8006b7e:	2500      	movs	r5, #0
 8006b80:	462c      	mov	r4, r5
 8006b82:	e7ae      	b.n	8006ae2 <__gethex+0x82>
 8006b84:	463e      	mov	r6, r7
 8006b86:	2501      	movs	r5, #1
 8006b88:	e7c7      	b.n	8006b1a <__gethex+0xba>
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	e7fb      	b.n	8006b86 <__gethex+0x126>
 8006b8e:	f04f 0900 	mov.w	r9, #0
 8006b92:	1cb1      	adds	r1, r6, #2
 8006b94:	e7ce      	b.n	8006b34 <__gethex+0xd4>
 8006b96:	f04f 0901 	mov.w	r9, #1
 8006b9a:	e7fa      	b.n	8006b92 <__gethex+0x132>
 8006b9c:	230a      	movs	r3, #10
 8006b9e:	fb03 0202 	mla	r2, r3, r2, r0
 8006ba2:	3a10      	subs	r2, #16
 8006ba4:	e7cf      	b.n	8006b46 <__gethex+0xe6>
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	e7da      	b.n	8006b60 <__gethex+0x100>
 8006baa:	4629      	mov	r1, r5
 8006bac:	1bf3      	subs	r3, r6, r7
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	2b07      	cmp	r3, #7
 8006bb2:	dc49      	bgt.n	8006c48 <__gethex+0x1e8>
 8006bb4:	9802      	ldr	r0, [sp, #8]
 8006bb6:	f000 fa72 	bl	800709e <_Balloc>
 8006bba:	f04f 0b00 	mov.w	fp, #0
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	46da      	mov	sl, fp
 8006bc2:	9b01      	ldr	r3, [sp, #4]
 8006bc4:	f100 0914 	add.w	r9, r0, #20
 8006bc8:	f1c3 0301 	rsb	r3, r3, #1
 8006bcc:	f8cd 9010 	str.w	r9, [sp, #16]
 8006bd0:	9308      	str	r3, [sp, #32]
 8006bd2:	42b7      	cmp	r7, r6
 8006bd4:	d33b      	bcc.n	8006c4e <__gethex+0x1ee>
 8006bd6:	9804      	ldr	r0, [sp, #16]
 8006bd8:	f840 ab04 	str.w	sl, [r0], #4
 8006bdc:	eba0 0009 	sub.w	r0, r0, r9
 8006be0:	1080      	asrs	r0, r0, #2
 8006be2:	6128      	str	r0, [r5, #16]
 8006be4:	0147      	lsls	r7, r0, #5
 8006be6:	4650      	mov	r0, sl
 8006be8:	f000 fb1d 	bl	8007226 <__hi0bits>
 8006bec:	f8d8 6000 	ldr.w	r6, [r8]
 8006bf0:	1a3f      	subs	r7, r7, r0
 8006bf2:	42b7      	cmp	r7, r6
 8006bf4:	dd64      	ble.n	8006cc0 <__gethex+0x260>
 8006bf6:	1bbf      	subs	r7, r7, r6
 8006bf8:	4639      	mov	r1, r7
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	f000 fe27 	bl	800784e <__any_on>
 8006c00:	4682      	mov	sl, r0
 8006c02:	b178      	cbz	r0, 8006c24 <__gethex+0x1c4>
 8006c04:	f04f 0a01 	mov.w	sl, #1
 8006c08:	1e7b      	subs	r3, r7, #1
 8006c0a:	1159      	asrs	r1, r3, #5
 8006c0c:	f003 021f 	and.w	r2, r3, #31
 8006c10:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006c14:	fa0a f202 	lsl.w	r2, sl, r2
 8006c18:	420a      	tst	r2, r1
 8006c1a:	d003      	beq.n	8006c24 <__gethex+0x1c4>
 8006c1c:	4553      	cmp	r3, sl
 8006c1e:	dc46      	bgt.n	8006cae <__gethex+0x24e>
 8006c20:	f04f 0a02 	mov.w	sl, #2
 8006c24:	4639      	mov	r1, r7
 8006c26:	4628      	mov	r0, r5
 8006c28:	f7ff feca 	bl	80069c0 <rshift>
 8006c2c:	443c      	add	r4, r7
 8006c2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006c32:	42a3      	cmp	r3, r4
 8006c34:	da52      	bge.n	8006cdc <__gethex+0x27c>
 8006c36:	4629      	mov	r1, r5
 8006c38:	9802      	ldr	r0, [sp, #8]
 8006c3a:	f000 fa64 	bl	8007106 <_Bfree>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c42:	27a3      	movs	r7, #163	; 0xa3
 8006c44:	6013      	str	r3, [r2, #0]
 8006c46:	e793      	b.n	8006b70 <__gethex+0x110>
 8006c48:	3101      	adds	r1, #1
 8006c4a:	105b      	asrs	r3, r3, #1
 8006c4c:	e7b0      	b.n	8006bb0 <__gethex+0x150>
 8006c4e:	1e73      	subs	r3, r6, #1
 8006c50:	9305      	str	r3, [sp, #20]
 8006c52:	9a07      	ldr	r2, [sp, #28]
 8006c54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d018      	beq.n	8006c8e <__gethex+0x22e>
 8006c5c:	f1bb 0f20 	cmp.w	fp, #32
 8006c60:	d107      	bne.n	8006c72 <__gethex+0x212>
 8006c62:	9b04      	ldr	r3, [sp, #16]
 8006c64:	f8c3 a000 	str.w	sl, [r3]
 8006c68:	f04f 0a00 	mov.w	sl, #0
 8006c6c:	46d3      	mov	fp, sl
 8006c6e:	3304      	adds	r3, #4
 8006c70:	9304      	str	r3, [sp, #16]
 8006c72:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006c76:	f7ff fede 	bl	8006a36 <__hexdig_fun>
 8006c7a:	f000 000f 	and.w	r0, r0, #15
 8006c7e:	fa00 f00b 	lsl.w	r0, r0, fp
 8006c82:	ea4a 0a00 	orr.w	sl, sl, r0
 8006c86:	f10b 0b04 	add.w	fp, fp, #4
 8006c8a:	9b05      	ldr	r3, [sp, #20]
 8006c8c:	e00d      	b.n	8006caa <__gethex+0x24a>
 8006c8e:	9b05      	ldr	r3, [sp, #20]
 8006c90:	9a08      	ldr	r2, [sp, #32]
 8006c92:	4413      	add	r3, r2
 8006c94:	42bb      	cmp	r3, r7
 8006c96:	d3e1      	bcc.n	8006c5c <__gethex+0x1fc>
 8006c98:	4618      	mov	r0, r3
 8006c9a:	9a01      	ldr	r2, [sp, #4]
 8006c9c:	9903      	ldr	r1, [sp, #12]
 8006c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8006ca0:	f001 f80c 	bl	8007cbc <strncmp>
 8006ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca6:	2800      	cmp	r0, #0
 8006ca8:	d1d8      	bne.n	8006c5c <__gethex+0x1fc>
 8006caa:	461e      	mov	r6, r3
 8006cac:	e791      	b.n	8006bd2 <__gethex+0x172>
 8006cae:	1eb9      	subs	r1, r7, #2
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	f000 fdcc 	bl	800784e <__any_on>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d0b2      	beq.n	8006c20 <__gethex+0x1c0>
 8006cba:	f04f 0a03 	mov.w	sl, #3
 8006cbe:	e7b1      	b.n	8006c24 <__gethex+0x1c4>
 8006cc0:	da09      	bge.n	8006cd6 <__gethex+0x276>
 8006cc2:	1bf7      	subs	r7, r6, r7
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	463a      	mov	r2, r7
 8006cc8:	9802      	ldr	r0, [sp, #8]
 8006cca:	f000 fbe7 	bl	800749c <__lshift>
 8006cce:	4605      	mov	r5, r0
 8006cd0:	1be4      	subs	r4, r4, r7
 8006cd2:	f100 0914 	add.w	r9, r0, #20
 8006cd6:	f04f 0a00 	mov.w	sl, #0
 8006cda:	e7a8      	b.n	8006c2e <__gethex+0x1ce>
 8006cdc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006ce0:	42a0      	cmp	r0, r4
 8006ce2:	dd6b      	ble.n	8006dbc <__gethex+0x35c>
 8006ce4:	1b04      	subs	r4, r0, r4
 8006ce6:	42a6      	cmp	r6, r4
 8006ce8:	dc2e      	bgt.n	8006d48 <__gethex+0x2e8>
 8006cea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cee:	2b02      	cmp	r3, #2
 8006cf0:	d022      	beq.n	8006d38 <__gethex+0x2d8>
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d024      	beq.n	8006d40 <__gethex+0x2e0>
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d115      	bne.n	8006d26 <__gethex+0x2c6>
 8006cfa:	42a6      	cmp	r6, r4
 8006cfc:	d113      	bne.n	8006d26 <__gethex+0x2c6>
 8006cfe:	2e01      	cmp	r6, #1
 8006d00:	dc0b      	bgt.n	8006d1a <__gethex+0x2ba>
 8006d02:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006d06:	9a06      	ldr	r2, [sp, #24]
 8006d08:	2762      	movs	r7, #98	; 0x62
 8006d0a:	6013      	str	r3, [r2, #0]
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	612b      	str	r3, [r5, #16]
 8006d10:	f8c9 3000 	str.w	r3, [r9]
 8006d14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d16:	601d      	str	r5, [r3, #0]
 8006d18:	e72a      	b.n	8006b70 <__gethex+0x110>
 8006d1a:	1e71      	subs	r1, r6, #1
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	f000 fd96 	bl	800784e <__any_on>
 8006d22:	2800      	cmp	r0, #0
 8006d24:	d1ed      	bne.n	8006d02 <__gethex+0x2a2>
 8006d26:	4629      	mov	r1, r5
 8006d28:	9802      	ldr	r0, [sp, #8]
 8006d2a:	f000 f9ec 	bl	8007106 <_Bfree>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006d32:	2750      	movs	r7, #80	; 0x50
 8006d34:	6013      	str	r3, [r2, #0]
 8006d36:	e71b      	b.n	8006b70 <__gethex+0x110>
 8006d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d0e1      	beq.n	8006d02 <__gethex+0x2a2>
 8006d3e:	e7f2      	b.n	8006d26 <__gethex+0x2c6>
 8006d40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1dd      	bne.n	8006d02 <__gethex+0x2a2>
 8006d46:	e7ee      	b.n	8006d26 <__gethex+0x2c6>
 8006d48:	1e67      	subs	r7, r4, #1
 8006d4a:	f1ba 0f00 	cmp.w	sl, #0
 8006d4e:	d132      	bne.n	8006db6 <__gethex+0x356>
 8006d50:	b127      	cbz	r7, 8006d5c <__gethex+0x2fc>
 8006d52:	4639      	mov	r1, r7
 8006d54:	4628      	mov	r0, r5
 8006d56:	f000 fd7a 	bl	800784e <__any_on>
 8006d5a:	4682      	mov	sl, r0
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	117a      	asrs	r2, r7, #5
 8006d60:	f007 071f 	and.w	r7, r7, #31
 8006d64:	fa03 f707 	lsl.w	r7, r3, r7
 8006d68:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	421f      	tst	r7, r3
 8006d70:	f04f 0702 	mov.w	r7, #2
 8006d74:	4628      	mov	r0, r5
 8006d76:	bf18      	it	ne
 8006d78:	f04a 0a02 	orrne.w	sl, sl, #2
 8006d7c:	1b36      	subs	r6, r6, r4
 8006d7e:	f7ff fe1f 	bl	80069c0 <rshift>
 8006d82:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006d86:	f1ba 0f00 	cmp.w	sl, #0
 8006d8a:	d048      	beq.n	8006e1e <__gethex+0x3be>
 8006d8c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	d015      	beq.n	8006dc0 <__gethex+0x360>
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d017      	beq.n	8006dc8 <__gethex+0x368>
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d109      	bne.n	8006db0 <__gethex+0x350>
 8006d9c:	f01a 0f02 	tst.w	sl, #2
 8006da0:	d006      	beq.n	8006db0 <__gethex+0x350>
 8006da2:	f8d9 3000 	ldr.w	r3, [r9]
 8006da6:	ea4a 0a03 	orr.w	sl, sl, r3
 8006daa:	f01a 0f01 	tst.w	sl, #1
 8006dae:	d10e      	bne.n	8006dce <__gethex+0x36e>
 8006db0:	f047 0710 	orr.w	r7, r7, #16
 8006db4:	e033      	b.n	8006e1e <__gethex+0x3be>
 8006db6:	f04f 0a01 	mov.w	sl, #1
 8006dba:	e7cf      	b.n	8006d5c <__gethex+0x2fc>
 8006dbc:	2701      	movs	r7, #1
 8006dbe:	e7e2      	b.n	8006d86 <__gethex+0x326>
 8006dc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dc2:	f1c3 0301 	rsb	r3, r3, #1
 8006dc6:	9315      	str	r3, [sp, #84]	; 0x54
 8006dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0f0      	beq.n	8006db0 <__gethex+0x350>
 8006dce:	f04f 0c00 	mov.w	ip, #0
 8006dd2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8006dd6:	f105 0314 	add.w	r3, r5, #20
 8006dda:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006dde:	eb03 010a 	add.w	r1, r3, sl
 8006de2:	4618      	mov	r0, r3
 8006de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006dec:	d01c      	beq.n	8006e28 <__gethex+0x3c8>
 8006dee:	3201      	adds	r2, #1
 8006df0:	6002      	str	r2, [r0, #0]
 8006df2:	2f02      	cmp	r7, #2
 8006df4:	f105 0314 	add.w	r3, r5, #20
 8006df8:	d138      	bne.n	8006e6c <__gethex+0x40c>
 8006dfa:	f8d8 2000 	ldr.w	r2, [r8]
 8006dfe:	3a01      	subs	r2, #1
 8006e00:	42b2      	cmp	r2, r6
 8006e02:	d10a      	bne.n	8006e1a <__gethex+0x3ba>
 8006e04:	2201      	movs	r2, #1
 8006e06:	1171      	asrs	r1, r6, #5
 8006e08:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006e0c:	f006 061f 	and.w	r6, r6, #31
 8006e10:	fa02 f606 	lsl.w	r6, r2, r6
 8006e14:	421e      	tst	r6, r3
 8006e16:	bf18      	it	ne
 8006e18:	4617      	movne	r7, r2
 8006e1a:	f047 0720 	orr.w	r7, r7, #32
 8006e1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e20:	601d      	str	r5, [r3, #0]
 8006e22:	9b06      	ldr	r3, [sp, #24]
 8006e24:	601c      	str	r4, [r3, #0]
 8006e26:	e6a3      	b.n	8006b70 <__gethex+0x110>
 8006e28:	4299      	cmp	r1, r3
 8006e2a:	f843 cc04 	str.w	ip, [r3, #-4]
 8006e2e:	d8d8      	bhi.n	8006de2 <__gethex+0x382>
 8006e30:	68ab      	ldr	r3, [r5, #8]
 8006e32:	4599      	cmp	r9, r3
 8006e34:	db12      	blt.n	8006e5c <__gethex+0x3fc>
 8006e36:	6869      	ldr	r1, [r5, #4]
 8006e38:	9802      	ldr	r0, [sp, #8]
 8006e3a:	3101      	adds	r1, #1
 8006e3c:	f000 f92f 	bl	800709e <_Balloc>
 8006e40:	4683      	mov	fp, r0
 8006e42:	692a      	ldr	r2, [r5, #16]
 8006e44:	f105 010c 	add.w	r1, r5, #12
 8006e48:	3202      	adds	r2, #2
 8006e4a:	0092      	lsls	r2, r2, #2
 8006e4c:	300c      	adds	r0, #12
 8006e4e:	f000 f91b 	bl	8007088 <memcpy>
 8006e52:	4629      	mov	r1, r5
 8006e54:	9802      	ldr	r0, [sp, #8]
 8006e56:	f000 f956 	bl	8007106 <_Bfree>
 8006e5a:	465d      	mov	r5, fp
 8006e5c:	692b      	ldr	r3, [r5, #16]
 8006e5e:	1c5a      	adds	r2, r3, #1
 8006e60:	612a      	str	r2, [r5, #16]
 8006e62:	2201      	movs	r2, #1
 8006e64:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006e68:	615a      	str	r2, [r3, #20]
 8006e6a:	e7c2      	b.n	8006df2 <__gethex+0x392>
 8006e6c:	692a      	ldr	r2, [r5, #16]
 8006e6e:	454a      	cmp	r2, r9
 8006e70:	dd0b      	ble.n	8006e8a <__gethex+0x42a>
 8006e72:	2101      	movs	r1, #1
 8006e74:	4628      	mov	r0, r5
 8006e76:	f7ff fda3 	bl	80069c0 <rshift>
 8006e7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e7e:	3401      	adds	r4, #1
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	f6ff aed8 	blt.w	8006c36 <__gethex+0x1d6>
 8006e86:	2701      	movs	r7, #1
 8006e88:	e7c7      	b.n	8006e1a <__gethex+0x3ba>
 8006e8a:	f016 061f 	ands.w	r6, r6, #31
 8006e8e:	d0fa      	beq.n	8006e86 <__gethex+0x426>
 8006e90:	449a      	add	sl, r3
 8006e92:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006e96:	f000 f9c6 	bl	8007226 <__hi0bits>
 8006e9a:	f1c6 0620 	rsb	r6, r6, #32
 8006e9e:	42b0      	cmp	r0, r6
 8006ea0:	dbe7      	blt.n	8006e72 <__gethex+0x412>
 8006ea2:	e7f0      	b.n	8006e86 <__gethex+0x426>

08006ea4 <L_shift>:
 8006ea4:	f1c2 0208 	rsb	r2, r2, #8
 8006ea8:	0092      	lsls	r2, r2, #2
 8006eaa:	b570      	push	{r4, r5, r6, lr}
 8006eac:	f1c2 0620 	rsb	r6, r2, #32
 8006eb0:	6843      	ldr	r3, [r0, #4]
 8006eb2:	6804      	ldr	r4, [r0, #0]
 8006eb4:	fa03 f506 	lsl.w	r5, r3, r6
 8006eb8:	432c      	orrs	r4, r5
 8006eba:	40d3      	lsrs	r3, r2
 8006ebc:	6004      	str	r4, [r0, #0]
 8006ebe:	f840 3f04 	str.w	r3, [r0, #4]!
 8006ec2:	4288      	cmp	r0, r1
 8006ec4:	d3f4      	bcc.n	8006eb0 <L_shift+0xc>
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}

08006ec8 <__match>:
 8006ec8:	b530      	push	{r4, r5, lr}
 8006eca:	6803      	ldr	r3, [r0, #0]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ed2:	b914      	cbnz	r4, 8006eda <__match+0x12>
 8006ed4:	6003      	str	r3, [r0, #0]
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	bd30      	pop	{r4, r5, pc}
 8006eda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ede:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006ee2:	2d19      	cmp	r5, #25
 8006ee4:	bf98      	it	ls
 8006ee6:	3220      	addls	r2, #32
 8006ee8:	42a2      	cmp	r2, r4
 8006eea:	d0f0      	beq.n	8006ece <__match+0x6>
 8006eec:	2000      	movs	r0, #0
 8006eee:	e7f3      	b.n	8006ed8 <__match+0x10>

08006ef0 <__hexnan>:
 8006ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef4:	2500      	movs	r5, #0
 8006ef6:	680b      	ldr	r3, [r1, #0]
 8006ef8:	4682      	mov	sl, r0
 8006efa:	115f      	asrs	r7, r3, #5
 8006efc:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006f00:	f013 031f 	ands.w	r3, r3, #31
 8006f04:	bf18      	it	ne
 8006f06:	3704      	addne	r7, #4
 8006f08:	1f3e      	subs	r6, r7, #4
 8006f0a:	4690      	mov	r8, r2
 8006f0c:	46b1      	mov	r9, r6
 8006f0e:	4634      	mov	r4, r6
 8006f10:	46ab      	mov	fp, r5
 8006f12:	b087      	sub	sp, #28
 8006f14:	6801      	ldr	r1, [r0, #0]
 8006f16:	9301      	str	r3, [sp, #4]
 8006f18:	f847 5c04 	str.w	r5, [r7, #-4]
 8006f1c:	9502      	str	r5, [sp, #8]
 8006f1e:	784a      	ldrb	r2, [r1, #1]
 8006f20:	1c4b      	adds	r3, r1, #1
 8006f22:	9303      	str	r3, [sp, #12]
 8006f24:	b342      	cbz	r2, 8006f78 <__hexnan+0x88>
 8006f26:	4610      	mov	r0, r2
 8006f28:	9105      	str	r1, [sp, #20]
 8006f2a:	9204      	str	r2, [sp, #16]
 8006f2c:	f7ff fd83 	bl	8006a36 <__hexdig_fun>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d143      	bne.n	8006fbc <__hexnan+0xcc>
 8006f34:	9a04      	ldr	r2, [sp, #16]
 8006f36:	9905      	ldr	r1, [sp, #20]
 8006f38:	2a20      	cmp	r2, #32
 8006f3a:	d818      	bhi.n	8006f6e <__hexnan+0x7e>
 8006f3c:	9b02      	ldr	r3, [sp, #8]
 8006f3e:	459b      	cmp	fp, r3
 8006f40:	dd13      	ble.n	8006f6a <__hexnan+0x7a>
 8006f42:	454c      	cmp	r4, r9
 8006f44:	d206      	bcs.n	8006f54 <__hexnan+0x64>
 8006f46:	2d07      	cmp	r5, #7
 8006f48:	dc04      	bgt.n	8006f54 <__hexnan+0x64>
 8006f4a:	462a      	mov	r2, r5
 8006f4c:	4649      	mov	r1, r9
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f7ff ffa8 	bl	8006ea4 <L_shift>
 8006f54:	4544      	cmp	r4, r8
 8006f56:	d944      	bls.n	8006fe2 <__hexnan+0xf2>
 8006f58:	2300      	movs	r3, #0
 8006f5a:	f1a4 0904 	sub.w	r9, r4, #4
 8006f5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f62:	461d      	mov	r5, r3
 8006f64:	464c      	mov	r4, r9
 8006f66:	f8cd b008 	str.w	fp, [sp, #8]
 8006f6a:	9903      	ldr	r1, [sp, #12]
 8006f6c:	e7d7      	b.n	8006f1e <__hexnan+0x2e>
 8006f6e:	2a29      	cmp	r2, #41	; 0x29
 8006f70:	d14a      	bne.n	8007008 <__hexnan+0x118>
 8006f72:	3102      	adds	r1, #2
 8006f74:	f8ca 1000 	str.w	r1, [sl]
 8006f78:	f1bb 0f00 	cmp.w	fp, #0
 8006f7c:	d044      	beq.n	8007008 <__hexnan+0x118>
 8006f7e:	454c      	cmp	r4, r9
 8006f80:	d206      	bcs.n	8006f90 <__hexnan+0xa0>
 8006f82:	2d07      	cmp	r5, #7
 8006f84:	dc04      	bgt.n	8006f90 <__hexnan+0xa0>
 8006f86:	462a      	mov	r2, r5
 8006f88:	4649      	mov	r1, r9
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f7ff ff8a 	bl	8006ea4 <L_shift>
 8006f90:	4544      	cmp	r4, r8
 8006f92:	d928      	bls.n	8006fe6 <__hexnan+0xf6>
 8006f94:	4643      	mov	r3, r8
 8006f96:	f854 2b04 	ldr.w	r2, [r4], #4
 8006f9a:	42a6      	cmp	r6, r4
 8006f9c:	f843 2b04 	str.w	r2, [r3], #4
 8006fa0:	d2f9      	bcs.n	8006f96 <__hexnan+0xa6>
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f843 2b04 	str.w	r2, [r3], #4
 8006fa8:	429e      	cmp	r6, r3
 8006faa:	d2fb      	bcs.n	8006fa4 <__hexnan+0xb4>
 8006fac:	6833      	ldr	r3, [r6, #0]
 8006fae:	b91b      	cbnz	r3, 8006fb8 <__hexnan+0xc8>
 8006fb0:	4546      	cmp	r6, r8
 8006fb2:	d127      	bne.n	8007004 <__hexnan+0x114>
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	6033      	str	r3, [r6, #0]
 8006fb8:	2005      	movs	r0, #5
 8006fba:	e026      	b.n	800700a <__hexnan+0x11a>
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	2d08      	cmp	r5, #8
 8006fc0:	f10b 0b01 	add.w	fp, fp, #1
 8006fc4:	dd06      	ble.n	8006fd4 <__hexnan+0xe4>
 8006fc6:	4544      	cmp	r4, r8
 8006fc8:	d9cf      	bls.n	8006f6a <__hexnan+0x7a>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2501      	movs	r5, #1
 8006fce:	f844 3c04 	str.w	r3, [r4, #-4]
 8006fd2:	3c04      	subs	r4, #4
 8006fd4:	6822      	ldr	r2, [r4, #0]
 8006fd6:	f000 000f 	and.w	r0, r0, #15
 8006fda:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006fde:	6020      	str	r0, [r4, #0]
 8006fe0:	e7c3      	b.n	8006f6a <__hexnan+0x7a>
 8006fe2:	2508      	movs	r5, #8
 8006fe4:	e7c1      	b.n	8006f6a <__hexnan+0x7a>
 8006fe6:	9b01      	ldr	r3, [sp, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d0df      	beq.n	8006fac <__hexnan+0xbc>
 8006fec:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff0:	f1c3 0320 	rsb	r3, r3, #32
 8006ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006ffc:	401a      	ands	r2, r3
 8006ffe:	f847 2c04 	str.w	r2, [r7, #-4]
 8007002:	e7d3      	b.n	8006fac <__hexnan+0xbc>
 8007004:	3e04      	subs	r6, #4
 8007006:	e7d1      	b.n	8006fac <__hexnan+0xbc>
 8007008:	2004      	movs	r0, #4
 800700a:	b007      	add	sp, #28
 800700c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007010 <__locale_ctype_ptr_l>:
 8007010:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007014:	4770      	bx	lr

08007016 <__localeconv_l>:
 8007016:	30f0      	adds	r0, #240	; 0xf0
 8007018:	4770      	bx	lr
	...

0800701c <_localeconv_r>:
 800701c:	4b04      	ldr	r3, [pc, #16]	; (8007030 <_localeconv_r+0x14>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6a18      	ldr	r0, [r3, #32]
 8007022:	4b04      	ldr	r3, [pc, #16]	; (8007034 <_localeconv_r+0x18>)
 8007024:	2800      	cmp	r0, #0
 8007026:	bf08      	it	eq
 8007028:	4618      	moveq	r0, r3
 800702a:	30f0      	adds	r0, #240	; 0xf0
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000010 	.word	0x20000010
 8007034:	20000074 	.word	0x20000074

08007038 <malloc>:
 8007038:	4b02      	ldr	r3, [pc, #8]	; (8007044 <malloc+0xc>)
 800703a:	4601      	mov	r1, r0
 800703c:	6818      	ldr	r0, [r3, #0]
 800703e:	f000 bc81 	b.w	8007944 <_malloc_r>
 8007042:	bf00      	nop
 8007044:	20000010 	.word	0x20000010

08007048 <__ascii_mbtowc>:
 8007048:	b082      	sub	sp, #8
 800704a:	b901      	cbnz	r1, 800704e <__ascii_mbtowc+0x6>
 800704c:	a901      	add	r1, sp, #4
 800704e:	b142      	cbz	r2, 8007062 <__ascii_mbtowc+0x1a>
 8007050:	b14b      	cbz	r3, 8007066 <__ascii_mbtowc+0x1e>
 8007052:	7813      	ldrb	r3, [r2, #0]
 8007054:	600b      	str	r3, [r1, #0]
 8007056:	7812      	ldrb	r2, [r2, #0]
 8007058:	1c10      	adds	r0, r2, #0
 800705a:	bf18      	it	ne
 800705c:	2001      	movne	r0, #1
 800705e:	b002      	add	sp, #8
 8007060:	4770      	bx	lr
 8007062:	4610      	mov	r0, r2
 8007064:	e7fb      	b.n	800705e <__ascii_mbtowc+0x16>
 8007066:	f06f 0001 	mvn.w	r0, #1
 800706a:	e7f8      	b.n	800705e <__ascii_mbtowc+0x16>

0800706c <memchr>:
 800706c:	b510      	push	{r4, lr}
 800706e:	b2c9      	uxtb	r1, r1
 8007070:	4402      	add	r2, r0
 8007072:	4290      	cmp	r0, r2
 8007074:	4603      	mov	r3, r0
 8007076:	d101      	bne.n	800707c <memchr+0x10>
 8007078:	2300      	movs	r3, #0
 800707a:	e003      	b.n	8007084 <memchr+0x18>
 800707c:	781c      	ldrb	r4, [r3, #0]
 800707e:	3001      	adds	r0, #1
 8007080:	428c      	cmp	r4, r1
 8007082:	d1f6      	bne.n	8007072 <memchr+0x6>
 8007084:	4618      	mov	r0, r3
 8007086:	bd10      	pop	{r4, pc}

08007088 <memcpy>:
 8007088:	b510      	push	{r4, lr}
 800708a:	1e43      	subs	r3, r0, #1
 800708c:	440a      	add	r2, r1
 800708e:	4291      	cmp	r1, r2
 8007090:	d100      	bne.n	8007094 <memcpy+0xc>
 8007092:	bd10      	pop	{r4, pc}
 8007094:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007098:	f803 4f01 	strb.w	r4, [r3, #1]!
 800709c:	e7f7      	b.n	800708e <memcpy+0x6>

0800709e <_Balloc>:
 800709e:	b570      	push	{r4, r5, r6, lr}
 80070a0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070a2:	4604      	mov	r4, r0
 80070a4:	460e      	mov	r6, r1
 80070a6:	b93d      	cbnz	r5, 80070b8 <_Balloc+0x1a>
 80070a8:	2010      	movs	r0, #16
 80070aa:	f7ff ffc5 	bl	8007038 <malloc>
 80070ae:	6260      	str	r0, [r4, #36]	; 0x24
 80070b0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070b4:	6005      	str	r5, [r0, #0]
 80070b6:	60c5      	str	r5, [r0, #12]
 80070b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80070ba:	68eb      	ldr	r3, [r5, #12]
 80070bc:	b183      	cbz	r3, 80070e0 <_Balloc+0x42>
 80070be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80070c6:	b9b8      	cbnz	r0, 80070f8 <_Balloc+0x5a>
 80070c8:	2101      	movs	r1, #1
 80070ca:	fa01 f506 	lsl.w	r5, r1, r6
 80070ce:	1d6a      	adds	r2, r5, #5
 80070d0:	0092      	lsls	r2, r2, #2
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 fbdc 	bl	8007890 <_calloc_r>
 80070d8:	b160      	cbz	r0, 80070f4 <_Balloc+0x56>
 80070da:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80070de:	e00e      	b.n	80070fe <_Balloc+0x60>
 80070e0:	2221      	movs	r2, #33	; 0x21
 80070e2:	2104      	movs	r1, #4
 80070e4:	4620      	mov	r0, r4
 80070e6:	f000 fbd3 	bl	8007890 <_calloc_r>
 80070ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070ec:	60e8      	str	r0, [r5, #12]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1e4      	bne.n	80070be <_Balloc+0x20>
 80070f4:	2000      	movs	r0, #0
 80070f6:	bd70      	pop	{r4, r5, r6, pc}
 80070f8:	6802      	ldr	r2, [r0, #0]
 80070fa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80070fe:	2300      	movs	r3, #0
 8007100:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007104:	e7f7      	b.n	80070f6 <_Balloc+0x58>

08007106 <_Bfree>:
 8007106:	b570      	push	{r4, r5, r6, lr}
 8007108:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800710a:	4606      	mov	r6, r0
 800710c:	460d      	mov	r5, r1
 800710e:	b93c      	cbnz	r4, 8007120 <_Bfree+0x1a>
 8007110:	2010      	movs	r0, #16
 8007112:	f7ff ff91 	bl	8007038 <malloc>
 8007116:	6270      	str	r0, [r6, #36]	; 0x24
 8007118:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800711c:	6004      	str	r4, [r0, #0]
 800711e:	60c4      	str	r4, [r0, #12]
 8007120:	b13d      	cbz	r5, 8007132 <_Bfree+0x2c>
 8007122:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007124:	686a      	ldr	r2, [r5, #4]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800712c:	6029      	str	r1, [r5, #0]
 800712e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007132:	bd70      	pop	{r4, r5, r6, pc}

08007134 <__multadd>:
 8007134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007138:	461f      	mov	r7, r3
 800713a:	4606      	mov	r6, r0
 800713c:	460c      	mov	r4, r1
 800713e:	2300      	movs	r3, #0
 8007140:	690d      	ldr	r5, [r1, #16]
 8007142:	f101 0c14 	add.w	ip, r1, #20
 8007146:	f8dc 0000 	ldr.w	r0, [ip]
 800714a:	3301      	adds	r3, #1
 800714c:	b281      	uxth	r1, r0
 800714e:	fb02 7101 	mla	r1, r2, r1, r7
 8007152:	0c00      	lsrs	r0, r0, #16
 8007154:	0c0f      	lsrs	r7, r1, #16
 8007156:	fb02 7000 	mla	r0, r2, r0, r7
 800715a:	b289      	uxth	r1, r1
 800715c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007160:	429d      	cmp	r5, r3
 8007162:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007166:	f84c 1b04 	str.w	r1, [ip], #4
 800716a:	dcec      	bgt.n	8007146 <__multadd+0x12>
 800716c:	b1d7      	cbz	r7, 80071a4 <__multadd+0x70>
 800716e:	68a3      	ldr	r3, [r4, #8]
 8007170:	42ab      	cmp	r3, r5
 8007172:	dc12      	bgt.n	800719a <__multadd+0x66>
 8007174:	6861      	ldr	r1, [r4, #4]
 8007176:	4630      	mov	r0, r6
 8007178:	3101      	adds	r1, #1
 800717a:	f7ff ff90 	bl	800709e <_Balloc>
 800717e:	4680      	mov	r8, r0
 8007180:	6922      	ldr	r2, [r4, #16]
 8007182:	f104 010c 	add.w	r1, r4, #12
 8007186:	3202      	adds	r2, #2
 8007188:	0092      	lsls	r2, r2, #2
 800718a:	300c      	adds	r0, #12
 800718c:	f7ff ff7c 	bl	8007088 <memcpy>
 8007190:	4621      	mov	r1, r4
 8007192:	4630      	mov	r0, r6
 8007194:	f7ff ffb7 	bl	8007106 <_Bfree>
 8007198:	4644      	mov	r4, r8
 800719a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800719e:	3501      	adds	r5, #1
 80071a0:	615f      	str	r7, [r3, #20]
 80071a2:	6125      	str	r5, [r4, #16]
 80071a4:	4620      	mov	r0, r4
 80071a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080071aa <__s2b>:
 80071aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ae:	4615      	mov	r5, r2
 80071b0:	2209      	movs	r2, #9
 80071b2:	461f      	mov	r7, r3
 80071b4:	3308      	adds	r3, #8
 80071b6:	460c      	mov	r4, r1
 80071b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80071bc:	4606      	mov	r6, r0
 80071be:	2201      	movs	r2, #1
 80071c0:	2100      	movs	r1, #0
 80071c2:	429a      	cmp	r2, r3
 80071c4:	db20      	blt.n	8007208 <__s2b+0x5e>
 80071c6:	4630      	mov	r0, r6
 80071c8:	f7ff ff69 	bl	800709e <_Balloc>
 80071cc:	9b08      	ldr	r3, [sp, #32]
 80071ce:	2d09      	cmp	r5, #9
 80071d0:	6143      	str	r3, [r0, #20]
 80071d2:	f04f 0301 	mov.w	r3, #1
 80071d6:	6103      	str	r3, [r0, #16]
 80071d8:	dd19      	ble.n	800720e <__s2b+0x64>
 80071da:	f104 0809 	add.w	r8, r4, #9
 80071de:	46c1      	mov	r9, r8
 80071e0:	442c      	add	r4, r5
 80071e2:	f819 3b01 	ldrb.w	r3, [r9], #1
 80071e6:	4601      	mov	r1, r0
 80071e8:	3b30      	subs	r3, #48	; 0x30
 80071ea:	220a      	movs	r2, #10
 80071ec:	4630      	mov	r0, r6
 80071ee:	f7ff ffa1 	bl	8007134 <__multadd>
 80071f2:	45a1      	cmp	r9, r4
 80071f4:	d1f5      	bne.n	80071e2 <__s2b+0x38>
 80071f6:	eb08 0405 	add.w	r4, r8, r5
 80071fa:	3c08      	subs	r4, #8
 80071fc:	1b2d      	subs	r5, r5, r4
 80071fe:	1963      	adds	r3, r4, r5
 8007200:	42bb      	cmp	r3, r7
 8007202:	db07      	blt.n	8007214 <__s2b+0x6a>
 8007204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007208:	0052      	lsls	r2, r2, #1
 800720a:	3101      	adds	r1, #1
 800720c:	e7d9      	b.n	80071c2 <__s2b+0x18>
 800720e:	340a      	adds	r4, #10
 8007210:	2509      	movs	r5, #9
 8007212:	e7f3      	b.n	80071fc <__s2b+0x52>
 8007214:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007218:	4601      	mov	r1, r0
 800721a:	3b30      	subs	r3, #48	; 0x30
 800721c:	220a      	movs	r2, #10
 800721e:	4630      	mov	r0, r6
 8007220:	f7ff ff88 	bl	8007134 <__multadd>
 8007224:	e7eb      	b.n	80071fe <__s2b+0x54>

08007226 <__hi0bits>:
 8007226:	0c02      	lsrs	r2, r0, #16
 8007228:	0412      	lsls	r2, r2, #16
 800722a:	4603      	mov	r3, r0
 800722c:	b9b2      	cbnz	r2, 800725c <__hi0bits+0x36>
 800722e:	0403      	lsls	r3, r0, #16
 8007230:	2010      	movs	r0, #16
 8007232:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007236:	bf04      	itt	eq
 8007238:	021b      	lsleq	r3, r3, #8
 800723a:	3008      	addeq	r0, #8
 800723c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007240:	bf04      	itt	eq
 8007242:	011b      	lsleq	r3, r3, #4
 8007244:	3004      	addeq	r0, #4
 8007246:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800724a:	bf04      	itt	eq
 800724c:	009b      	lsleq	r3, r3, #2
 800724e:	3002      	addeq	r0, #2
 8007250:	2b00      	cmp	r3, #0
 8007252:	db06      	blt.n	8007262 <__hi0bits+0x3c>
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	d503      	bpl.n	8007260 <__hi0bits+0x3a>
 8007258:	3001      	adds	r0, #1
 800725a:	4770      	bx	lr
 800725c:	2000      	movs	r0, #0
 800725e:	e7e8      	b.n	8007232 <__hi0bits+0xc>
 8007260:	2020      	movs	r0, #32
 8007262:	4770      	bx	lr

08007264 <__lo0bits>:
 8007264:	6803      	ldr	r3, [r0, #0]
 8007266:	4601      	mov	r1, r0
 8007268:	f013 0207 	ands.w	r2, r3, #7
 800726c:	d00b      	beq.n	8007286 <__lo0bits+0x22>
 800726e:	07da      	lsls	r2, r3, #31
 8007270:	d423      	bmi.n	80072ba <__lo0bits+0x56>
 8007272:	0798      	lsls	r0, r3, #30
 8007274:	bf49      	itett	mi
 8007276:	085b      	lsrmi	r3, r3, #1
 8007278:	089b      	lsrpl	r3, r3, #2
 800727a:	2001      	movmi	r0, #1
 800727c:	600b      	strmi	r3, [r1, #0]
 800727e:	bf5c      	itt	pl
 8007280:	600b      	strpl	r3, [r1, #0]
 8007282:	2002      	movpl	r0, #2
 8007284:	4770      	bx	lr
 8007286:	b298      	uxth	r0, r3
 8007288:	b9a8      	cbnz	r0, 80072b6 <__lo0bits+0x52>
 800728a:	2010      	movs	r0, #16
 800728c:	0c1b      	lsrs	r3, r3, #16
 800728e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007292:	bf04      	itt	eq
 8007294:	0a1b      	lsreq	r3, r3, #8
 8007296:	3008      	addeq	r0, #8
 8007298:	071a      	lsls	r2, r3, #28
 800729a:	bf04      	itt	eq
 800729c:	091b      	lsreq	r3, r3, #4
 800729e:	3004      	addeq	r0, #4
 80072a0:	079a      	lsls	r2, r3, #30
 80072a2:	bf04      	itt	eq
 80072a4:	089b      	lsreq	r3, r3, #2
 80072a6:	3002      	addeq	r0, #2
 80072a8:	07da      	lsls	r2, r3, #31
 80072aa:	d402      	bmi.n	80072b2 <__lo0bits+0x4e>
 80072ac:	085b      	lsrs	r3, r3, #1
 80072ae:	d006      	beq.n	80072be <__lo0bits+0x5a>
 80072b0:	3001      	adds	r0, #1
 80072b2:	600b      	str	r3, [r1, #0]
 80072b4:	4770      	bx	lr
 80072b6:	4610      	mov	r0, r2
 80072b8:	e7e9      	b.n	800728e <__lo0bits+0x2a>
 80072ba:	2000      	movs	r0, #0
 80072bc:	4770      	bx	lr
 80072be:	2020      	movs	r0, #32
 80072c0:	4770      	bx	lr

080072c2 <__i2b>:
 80072c2:	b510      	push	{r4, lr}
 80072c4:	460c      	mov	r4, r1
 80072c6:	2101      	movs	r1, #1
 80072c8:	f7ff fee9 	bl	800709e <_Balloc>
 80072cc:	2201      	movs	r2, #1
 80072ce:	6144      	str	r4, [r0, #20]
 80072d0:	6102      	str	r2, [r0, #16]
 80072d2:	bd10      	pop	{r4, pc}

080072d4 <__multiply>:
 80072d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	4614      	mov	r4, r2
 80072da:	690a      	ldr	r2, [r1, #16]
 80072dc:	6923      	ldr	r3, [r4, #16]
 80072de:	4688      	mov	r8, r1
 80072e0:	429a      	cmp	r2, r3
 80072e2:	bfbe      	ittt	lt
 80072e4:	460b      	movlt	r3, r1
 80072e6:	46a0      	movlt	r8, r4
 80072e8:	461c      	movlt	r4, r3
 80072ea:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80072ee:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80072f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80072f6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80072fa:	eb07 0609 	add.w	r6, r7, r9
 80072fe:	42b3      	cmp	r3, r6
 8007300:	bfb8      	it	lt
 8007302:	3101      	addlt	r1, #1
 8007304:	f7ff fecb 	bl	800709e <_Balloc>
 8007308:	f100 0514 	add.w	r5, r0, #20
 800730c:	462b      	mov	r3, r5
 800730e:	2200      	movs	r2, #0
 8007310:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007314:	4573      	cmp	r3, lr
 8007316:	d316      	bcc.n	8007346 <__multiply+0x72>
 8007318:	f104 0214 	add.w	r2, r4, #20
 800731c:	f108 0114 	add.w	r1, r8, #20
 8007320:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007324:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007328:	9300      	str	r3, [sp, #0]
 800732a:	9b00      	ldr	r3, [sp, #0]
 800732c:	9201      	str	r2, [sp, #4]
 800732e:	4293      	cmp	r3, r2
 8007330:	d80c      	bhi.n	800734c <__multiply+0x78>
 8007332:	2e00      	cmp	r6, #0
 8007334:	dd03      	ble.n	800733e <__multiply+0x6a>
 8007336:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800733a:	2b00      	cmp	r3, #0
 800733c:	d05d      	beq.n	80073fa <__multiply+0x126>
 800733e:	6106      	str	r6, [r0, #16]
 8007340:	b003      	add	sp, #12
 8007342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007346:	f843 2b04 	str.w	r2, [r3], #4
 800734a:	e7e3      	b.n	8007314 <__multiply+0x40>
 800734c:	f8b2 b000 	ldrh.w	fp, [r2]
 8007350:	f1bb 0f00 	cmp.w	fp, #0
 8007354:	d023      	beq.n	800739e <__multiply+0xca>
 8007356:	4689      	mov	r9, r1
 8007358:	46ac      	mov	ip, r5
 800735a:	f04f 0800 	mov.w	r8, #0
 800735e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007362:	f8dc a000 	ldr.w	sl, [ip]
 8007366:	b2a3      	uxth	r3, r4
 8007368:	fa1f fa8a 	uxth.w	sl, sl
 800736c:	fb0b a303 	mla	r3, fp, r3, sl
 8007370:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007374:	f8dc 4000 	ldr.w	r4, [ip]
 8007378:	4443      	add	r3, r8
 800737a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800737e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007382:	46e2      	mov	sl, ip
 8007384:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007388:	b29b      	uxth	r3, r3
 800738a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800738e:	454f      	cmp	r7, r9
 8007390:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007394:	f84a 3b04 	str.w	r3, [sl], #4
 8007398:	d82b      	bhi.n	80073f2 <__multiply+0x11e>
 800739a:	f8cc 8004 	str.w	r8, [ip, #4]
 800739e:	9b01      	ldr	r3, [sp, #4]
 80073a0:	3204      	adds	r2, #4
 80073a2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80073a6:	f1ba 0f00 	cmp.w	sl, #0
 80073aa:	d020      	beq.n	80073ee <__multiply+0x11a>
 80073ac:	4689      	mov	r9, r1
 80073ae:	46a8      	mov	r8, r5
 80073b0:	f04f 0b00 	mov.w	fp, #0
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	f8b9 c000 	ldrh.w	ip, [r9]
 80073ba:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	fb0a 440c 	mla	r4, sl, ip, r4
 80073c4:	46c4      	mov	ip, r8
 80073c6:	445c      	add	r4, fp
 80073c8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80073cc:	f84c 3b04 	str.w	r3, [ip], #4
 80073d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80073d4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80073d8:	0c1b      	lsrs	r3, r3, #16
 80073da:	fb0a b303 	mla	r3, sl, r3, fp
 80073de:	454f      	cmp	r7, r9
 80073e0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80073e4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80073e8:	d805      	bhi.n	80073f6 <__multiply+0x122>
 80073ea:	f8c8 3004 	str.w	r3, [r8, #4]
 80073ee:	3504      	adds	r5, #4
 80073f0:	e79b      	b.n	800732a <__multiply+0x56>
 80073f2:	46d4      	mov	ip, sl
 80073f4:	e7b3      	b.n	800735e <__multiply+0x8a>
 80073f6:	46e0      	mov	r8, ip
 80073f8:	e7dd      	b.n	80073b6 <__multiply+0xe2>
 80073fa:	3e01      	subs	r6, #1
 80073fc:	e799      	b.n	8007332 <__multiply+0x5e>
	...

08007400 <__pow5mult>:
 8007400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007404:	4615      	mov	r5, r2
 8007406:	f012 0203 	ands.w	r2, r2, #3
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	d007      	beq.n	8007420 <__pow5mult+0x20>
 8007410:	4c21      	ldr	r4, [pc, #132]	; (8007498 <__pow5mult+0x98>)
 8007412:	3a01      	subs	r2, #1
 8007414:	2300      	movs	r3, #0
 8007416:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800741a:	f7ff fe8b 	bl	8007134 <__multadd>
 800741e:	4607      	mov	r7, r0
 8007420:	10ad      	asrs	r5, r5, #2
 8007422:	d035      	beq.n	8007490 <__pow5mult+0x90>
 8007424:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007426:	b93c      	cbnz	r4, 8007438 <__pow5mult+0x38>
 8007428:	2010      	movs	r0, #16
 800742a:	f7ff fe05 	bl	8007038 <malloc>
 800742e:	6270      	str	r0, [r6, #36]	; 0x24
 8007430:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007434:	6004      	str	r4, [r0, #0]
 8007436:	60c4      	str	r4, [r0, #12]
 8007438:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800743c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007440:	b94c      	cbnz	r4, 8007456 <__pow5mult+0x56>
 8007442:	f240 2171 	movw	r1, #625	; 0x271
 8007446:	4630      	mov	r0, r6
 8007448:	f7ff ff3b 	bl	80072c2 <__i2b>
 800744c:	2300      	movs	r3, #0
 800744e:	4604      	mov	r4, r0
 8007450:	f8c8 0008 	str.w	r0, [r8, #8]
 8007454:	6003      	str	r3, [r0, #0]
 8007456:	f04f 0800 	mov.w	r8, #0
 800745a:	07eb      	lsls	r3, r5, #31
 800745c:	d50a      	bpl.n	8007474 <__pow5mult+0x74>
 800745e:	4639      	mov	r1, r7
 8007460:	4622      	mov	r2, r4
 8007462:	4630      	mov	r0, r6
 8007464:	f7ff ff36 	bl	80072d4 <__multiply>
 8007468:	4681      	mov	r9, r0
 800746a:	4639      	mov	r1, r7
 800746c:	4630      	mov	r0, r6
 800746e:	f7ff fe4a 	bl	8007106 <_Bfree>
 8007472:	464f      	mov	r7, r9
 8007474:	106d      	asrs	r5, r5, #1
 8007476:	d00b      	beq.n	8007490 <__pow5mult+0x90>
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	b938      	cbnz	r0, 800748c <__pow5mult+0x8c>
 800747c:	4622      	mov	r2, r4
 800747e:	4621      	mov	r1, r4
 8007480:	4630      	mov	r0, r6
 8007482:	f7ff ff27 	bl	80072d4 <__multiply>
 8007486:	6020      	str	r0, [r4, #0]
 8007488:	f8c0 8000 	str.w	r8, [r0]
 800748c:	4604      	mov	r4, r0
 800748e:	e7e4      	b.n	800745a <__pow5mult+0x5a>
 8007490:	4638      	mov	r0, r7
 8007492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007496:	bf00      	nop
 8007498:	08008018 	.word	0x08008018

0800749c <__lshift>:
 800749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	460c      	mov	r4, r1
 80074a2:	4607      	mov	r7, r0
 80074a4:	4616      	mov	r6, r2
 80074a6:	6923      	ldr	r3, [r4, #16]
 80074a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074ac:	eb0a 0903 	add.w	r9, sl, r3
 80074b0:	6849      	ldr	r1, [r1, #4]
 80074b2:	68a3      	ldr	r3, [r4, #8]
 80074b4:	f109 0501 	add.w	r5, r9, #1
 80074b8:	42ab      	cmp	r3, r5
 80074ba:	db32      	blt.n	8007522 <__lshift+0x86>
 80074bc:	4638      	mov	r0, r7
 80074be:	f7ff fdee 	bl	800709e <_Balloc>
 80074c2:	2300      	movs	r3, #0
 80074c4:	4680      	mov	r8, r0
 80074c6:	461a      	mov	r2, r3
 80074c8:	f100 0114 	add.w	r1, r0, #20
 80074cc:	4553      	cmp	r3, sl
 80074ce:	db2b      	blt.n	8007528 <__lshift+0x8c>
 80074d0:	6920      	ldr	r0, [r4, #16]
 80074d2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074d6:	f104 0314 	add.w	r3, r4, #20
 80074da:	f016 021f 	ands.w	r2, r6, #31
 80074de:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074e2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80074e6:	d025      	beq.n	8007534 <__lshift+0x98>
 80074e8:	2000      	movs	r0, #0
 80074ea:	f1c2 0e20 	rsb	lr, r2, #32
 80074ee:	468a      	mov	sl, r1
 80074f0:	681e      	ldr	r6, [r3, #0]
 80074f2:	4096      	lsls	r6, r2
 80074f4:	4330      	orrs	r0, r6
 80074f6:	f84a 0b04 	str.w	r0, [sl], #4
 80074fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80074fe:	459c      	cmp	ip, r3
 8007500:	fa20 f00e 	lsr.w	r0, r0, lr
 8007504:	d814      	bhi.n	8007530 <__lshift+0x94>
 8007506:	6048      	str	r0, [r1, #4]
 8007508:	b108      	cbz	r0, 800750e <__lshift+0x72>
 800750a:	f109 0502 	add.w	r5, r9, #2
 800750e:	3d01      	subs	r5, #1
 8007510:	4638      	mov	r0, r7
 8007512:	f8c8 5010 	str.w	r5, [r8, #16]
 8007516:	4621      	mov	r1, r4
 8007518:	f7ff fdf5 	bl	8007106 <_Bfree>
 800751c:	4640      	mov	r0, r8
 800751e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007522:	3101      	adds	r1, #1
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	e7c7      	b.n	80074b8 <__lshift+0x1c>
 8007528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800752c:	3301      	adds	r3, #1
 800752e:	e7cd      	b.n	80074cc <__lshift+0x30>
 8007530:	4651      	mov	r1, sl
 8007532:	e7dc      	b.n	80074ee <__lshift+0x52>
 8007534:	3904      	subs	r1, #4
 8007536:	f853 2b04 	ldr.w	r2, [r3], #4
 800753a:	459c      	cmp	ip, r3
 800753c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007540:	d8f9      	bhi.n	8007536 <__lshift+0x9a>
 8007542:	e7e4      	b.n	800750e <__lshift+0x72>

08007544 <__mcmp>:
 8007544:	6903      	ldr	r3, [r0, #16]
 8007546:	690a      	ldr	r2, [r1, #16]
 8007548:	b530      	push	{r4, r5, lr}
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	d10c      	bne.n	8007568 <__mcmp+0x24>
 800754e:	0092      	lsls	r2, r2, #2
 8007550:	3014      	adds	r0, #20
 8007552:	3114      	adds	r1, #20
 8007554:	1884      	adds	r4, r0, r2
 8007556:	4411      	add	r1, r2
 8007558:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800755c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007560:	4295      	cmp	r5, r2
 8007562:	d003      	beq.n	800756c <__mcmp+0x28>
 8007564:	d305      	bcc.n	8007572 <__mcmp+0x2e>
 8007566:	2301      	movs	r3, #1
 8007568:	4618      	mov	r0, r3
 800756a:	bd30      	pop	{r4, r5, pc}
 800756c:	42a0      	cmp	r0, r4
 800756e:	d3f3      	bcc.n	8007558 <__mcmp+0x14>
 8007570:	e7fa      	b.n	8007568 <__mcmp+0x24>
 8007572:	f04f 33ff 	mov.w	r3, #4294967295
 8007576:	e7f7      	b.n	8007568 <__mcmp+0x24>

08007578 <__mdiff>:
 8007578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	460d      	mov	r5, r1
 800757e:	4607      	mov	r7, r0
 8007580:	4611      	mov	r1, r2
 8007582:	4628      	mov	r0, r5
 8007584:	4614      	mov	r4, r2
 8007586:	f7ff ffdd 	bl	8007544 <__mcmp>
 800758a:	1e06      	subs	r6, r0, #0
 800758c:	d108      	bne.n	80075a0 <__mdiff+0x28>
 800758e:	4631      	mov	r1, r6
 8007590:	4638      	mov	r0, r7
 8007592:	f7ff fd84 	bl	800709e <_Balloc>
 8007596:	2301      	movs	r3, #1
 8007598:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800759c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075a0:	bfa4      	itt	ge
 80075a2:	4623      	movge	r3, r4
 80075a4:	462c      	movge	r4, r5
 80075a6:	4638      	mov	r0, r7
 80075a8:	6861      	ldr	r1, [r4, #4]
 80075aa:	bfa6      	itte	ge
 80075ac:	461d      	movge	r5, r3
 80075ae:	2600      	movge	r6, #0
 80075b0:	2601      	movlt	r6, #1
 80075b2:	f7ff fd74 	bl	800709e <_Balloc>
 80075b6:	f04f 0e00 	mov.w	lr, #0
 80075ba:	60c6      	str	r6, [r0, #12]
 80075bc:	692b      	ldr	r3, [r5, #16]
 80075be:	6926      	ldr	r6, [r4, #16]
 80075c0:	f104 0214 	add.w	r2, r4, #20
 80075c4:	f105 0914 	add.w	r9, r5, #20
 80075c8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80075cc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80075d0:	f100 0114 	add.w	r1, r0, #20
 80075d4:	f852 ab04 	ldr.w	sl, [r2], #4
 80075d8:	f859 5b04 	ldr.w	r5, [r9], #4
 80075dc:	fa1f f38a 	uxth.w	r3, sl
 80075e0:	4473      	add	r3, lr
 80075e2:	b2ac      	uxth	r4, r5
 80075e4:	1b1b      	subs	r3, r3, r4
 80075e6:	0c2c      	lsrs	r4, r5, #16
 80075e8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80075ec:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 80075f6:	45c8      	cmp	r8, r9
 80075f8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80075fc:	4694      	mov	ip, r2
 80075fe:	f841 4b04 	str.w	r4, [r1], #4
 8007602:	d8e7      	bhi.n	80075d4 <__mdiff+0x5c>
 8007604:	45bc      	cmp	ip, r7
 8007606:	d304      	bcc.n	8007612 <__mdiff+0x9a>
 8007608:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800760c:	b183      	cbz	r3, 8007630 <__mdiff+0xb8>
 800760e:	6106      	str	r6, [r0, #16]
 8007610:	e7c4      	b.n	800759c <__mdiff+0x24>
 8007612:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007616:	b2a2      	uxth	r2, r4
 8007618:	4472      	add	r2, lr
 800761a:	1413      	asrs	r3, r2, #16
 800761c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007620:	b292      	uxth	r2, r2
 8007622:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007626:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800762a:	f841 2b04 	str.w	r2, [r1], #4
 800762e:	e7e9      	b.n	8007604 <__mdiff+0x8c>
 8007630:	3e01      	subs	r6, #1
 8007632:	e7e9      	b.n	8007608 <__mdiff+0x90>

08007634 <__ulp>:
 8007634:	4b10      	ldr	r3, [pc, #64]	; (8007678 <__ulp+0x44>)
 8007636:	400b      	ands	r3, r1
 8007638:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800763c:	2b00      	cmp	r3, #0
 800763e:	dd02      	ble.n	8007646 <__ulp+0x12>
 8007640:	2000      	movs	r0, #0
 8007642:	4619      	mov	r1, r3
 8007644:	4770      	bx	lr
 8007646:	425b      	negs	r3, r3
 8007648:	151b      	asrs	r3, r3, #20
 800764a:	2b13      	cmp	r3, #19
 800764c:	f04f 0000 	mov.w	r0, #0
 8007650:	f04f 0100 	mov.w	r1, #0
 8007654:	dc04      	bgt.n	8007660 <__ulp+0x2c>
 8007656:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800765a:	fa42 f103 	asr.w	r1, r2, r3
 800765e:	4770      	bx	lr
 8007660:	2201      	movs	r2, #1
 8007662:	3b14      	subs	r3, #20
 8007664:	2b1e      	cmp	r3, #30
 8007666:	bfce      	itee	gt
 8007668:	4613      	movgt	r3, r2
 800766a:	f1c3 031f 	rsble	r3, r3, #31
 800766e:	fa02 f303 	lslle.w	r3, r2, r3
 8007672:	4618      	mov	r0, r3
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	7ff00000 	.word	0x7ff00000

0800767c <__b2d>:
 800767c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007680:	6907      	ldr	r7, [r0, #16]
 8007682:	f100 0914 	add.w	r9, r0, #20
 8007686:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800768a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800768e:	f1a7 0804 	sub.w	r8, r7, #4
 8007692:	4630      	mov	r0, r6
 8007694:	f7ff fdc7 	bl	8007226 <__hi0bits>
 8007698:	f1c0 0320 	rsb	r3, r0, #32
 800769c:	280a      	cmp	r0, #10
 800769e:	600b      	str	r3, [r1, #0]
 80076a0:	491e      	ldr	r1, [pc, #120]	; (800771c <__b2d+0xa0>)
 80076a2:	dc17      	bgt.n	80076d4 <__b2d+0x58>
 80076a4:	45c1      	cmp	r9, r8
 80076a6:	bf28      	it	cs
 80076a8:	2200      	movcs	r2, #0
 80076aa:	f1c0 0c0b 	rsb	ip, r0, #11
 80076ae:	fa26 f30c 	lsr.w	r3, r6, ip
 80076b2:	bf38      	it	cc
 80076b4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80076b8:	ea43 0501 	orr.w	r5, r3, r1
 80076bc:	f100 0315 	add.w	r3, r0, #21
 80076c0:	fa06 f303 	lsl.w	r3, r6, r3
 80076c4:	fa22 f20c 	lsr.w	r2, r2, ip
 80076c8:	ea43 0402 	orr.w	r4, r3, r2
 80076cc:	4620      	mov	r0, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076d4:	45c1      	cmp	r9, r8
 80076d6:	bf3a      	itte	cc
 80076d8:	f1a7 0808 	subcc.w	r8, r7, #8
 80076dc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80076e0:	2200      	movcs	r2, #0
 80076e2:	f1b0 030b 	subs.w	r3, r0, #11
 80076e6:	d015      	beq.n	8007714 <__b2d+0x98>
 80076e8:	409e      	lsls	r6, r3
 80076ea:	f1c3 0720 	rsb	r7, r3, #32
 80076ee:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80076f2:	fa22 f107 	lsr.w	r1, r2, r7
 80076f6:	45c8      	cmp	r8, r9
 80076f8:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 80076fc:	ea46 0501 	orr.w	r5, r6, r1
 8007700:	bf94      	ite	ls
 8007702:	2100      	movls	r1, #0
 8007704:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007708:	fa02 f003 	lsl.w	r0, r2, r3
 800770c:	40f9      	lsrs	r1, r7
 800770e:	ea40 0401 	orr.w	r4, r0, r1
 8007712:	e7db      	b.n	80076cc <__b2d+0x50>
 8007714:	ea46 0501 	orr.w	r5, r6, r1
 8007718:	4614      	mov	r4, r2
 800771a:	e7d7      	b.n	80076cc <__b2d+0x50>
 800771c:	3ff00000 	.word	0x3ff00000

08007720 <__d2b>:
 8007720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007724:	461c      	mov	r4, r3
 8007726:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800772a:	2101      	movs	r1, #1
 800772c:	4690      	mov	r8, r2
 800772e:	f7ff fcb6 	bl	800709e <_Balloc>
 8007732:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007736:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800773a:	4607      	mov	r7, r0
 800773c:	bb34      	cbnz	r4, 800778c <__d2b+0x6c>
 800773e:	9201      	str	r2, [sp, #4]
 8007740:	f1b8 0200 	subs.w	r2, r8, #0
 8007744:	d027      	beq.n	8007796 <__d2b+0x76>
 8007746:	a802      	add	r0, sp, #8
 8007748:	f840 2d08 	str.w	r2, [r0, #-8]!
 800774c:	f7ff fd8a 	bl	8007264 <__lo0bits>
 8007750:	9900      	ldr	r1, [sp, #0]
 8007752:	b1f0      	cbz	r0, 8007792 <__d2b+0x72>
 8007754:	9a01      	ldr	r2, [sp, #4]
 8007756:	f1c0 0320 	rsb	r3, r0, #32
 800775a:	fa02 f303 	lsl.w	r3, r2, r3
 800775e:	430b      	orrs	r3, r1
 8007760:	40c2      	lsrs	r2, r0
 8007762:	617b      	str	r3, [r7, #20]
 8007764:	9201      	str	r2, [sp, #4]
 8007766:	9b01      	ldr	r3, [sp, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	bf14      	ite	ne
 800776c:	2102      	movne	r1, #2
 800776e:	2101      	moveq	r1, #1
 8007770:	61bb      	str	r3, [r7, #24]
 8007772:	6139      	str	r1, [r7, #16]
 8007774:	b1c4      	cbz	r4, 80077a8 <__d2b+0x88>
 8007776:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800777a:	4404      	add	r4, r0
 800777c:	6034      	str	r4, [r6, #0]
 800777e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007782:	6028      	str	r0, [r5, #0]
 8007784:	4638      	mov	r0, r7
 8007786:	b002      	add	sp, #8
 8007788:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800778c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007790:	e7d5      	b.n	800773e <__d2b+0x1e>
 8007792:	6179      	str	r1, [r7, #20]
 8007794:	e7e7      	b.n	8007766 <__d2b+0x46>
 8007796:	a801      	add	r0, sp, #4
 8007798:	f7ff fd64 	bl	8007264 <__lo0bits>
 800779c:	2101      	movs	r1, #1
 800779e:	9b01      	ldr	r3, [sp, #4]
 80077a0:	6139      	str	r1, [r7, #16]
 80077a2:	617b      	str	r3, [r7, #20]
 80077a4:	3020      	adds	r0, #32
 80077a6:	e7e5      	b.n	8007774 <__d2b+0x54>
 80077a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80077ac:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80077b0:	6030      	str	r0, [r6, #0]
 80077b2:	6918      	ldr	r0, [r3, #16]
 80077b4:	f7ff fd37 	bl	8007226 <__hi0bits>
 80077b8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80077bc:	e7e1      	b.n	8007782 <__d2b+0x62>

080077be <__ratio>:
 80077be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c2:	4688      	mov	r8, r1
 80077c4:	4669      	mov	r1, sp
 80077c6:	4681      	mov	r9, r0
 80077c8:	f7ff ff58 	bl	800767c <__b2d>
 80077cc:	468b      	mov	fp, r1
 80077ce:	4606      	mov	r6, r0
 80077d0:	460f      	mov	r7, r1
 80077d2:	4640      	mov	r0, r8
 80077d4:	a901      	add	r1, sp, #4
 80077d6:	f7ff ff51 	bl	800767c <__b2d>
 80077da:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80077de:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80077e2:	460d      	mov	r5, r1
 80077e4:	eba3 0c02 	sub.w	ip, r3, r2
 80077e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80077ec:	1a9b      	subs	r3, r3, r2
 80077ee:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bfd5      	itete	le
 80077f6:	460a      	movle	r2, r1
 80077f8:	463a      	movgt	r2, r7
 80077fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80077fe:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8007802:	bfd8      	it	le
 8007804:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 8007808:	462b      	mov	r3, r5
 800780a:	4602      	mov	r2, r0
 800780c:	4659      	mov	r1, fp
 800780e:	4630      	mov	r0, r6
 8007810:	f7f8 ffa4 	bl	800075c <__aeabi_ddiv>
 8007814:	b003      	add	sp, #12
 8007816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800781a <__copybits>:
 800781a:	3901      	subs	r1, #1
 800781c:	b510      	push	{r4, lr}
 800781e:	1149      	asrs	r1, r1, #5
 8007820:	6914      	ldr	r4, [r2, #16]
 8007822:	3101      	adds	r1, #1
 8007824:	f102 0314 	add.w	r3, r2, #20
 8007828:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800782c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007830:	42a3      	cmp	r3, r4
 8007832:	4602      	mov	r2, r0
 8007834:	d303      	bcc.n	800783e <__copybits+0x24>
 8007836:	2300      	movs	r3, #0
 8007838:	428a      	cmp	r2, r1
 800783a:	d305      	bcc.n	8007848 <__copybits+0x2e>
 800783c:	bd10      	pop	{r4, pc}
 800783e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007842:	f840 2b04 	str.w	r2, [r0], #4
 8007846:	e7f3      	b.n	8007830 <__copybits+0x16>
 8007848:	f842 3b04 	str.w	r3, [r2], #4
 800784c:	e7f4      	b.n	8007838 <__copybits+0x1e>

0800784e <__any_on>:
 800784e:	f100 0214 	add.w	r2, r0, #20
 8007852:	6900      	ldr	r0, [r0, #16]
 8007854:	114b      	asrs	r3, r1, #5
 8007856:	4298      	cmp	r0, r3
 8007858:	b510      	push	{r4, lr}
 800785a:	db11      	blt.n	8007880 <__any_on+0x32>
 800785c:	dd0a      	ble.n	8007874 <__any_on+0x26>
 800785e:	f011 011f 	ands.w	r1, r1, #31
 8007862:	d007      	beq.n	8007874 <__any_on+0x26>
 8007864:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007868:	fa24 f001 	lsr.w	r0, r4, r1
 800786c:	fa00 f101 	lsl.w	r1, r0, r1
 8007870:	428c      	cmp	r4, r1
 8007872:	d10b      	bne.n	800788c <__any_on+0x3e>
 8007874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007878:	4293      	cmp	r3, r2
 800787a:	d803      	bhi.n	8007884 <__any_on+0x36>
 800787c:	2000      	movs	r0, #0
 800787e:	bd10      	pop	{r4, pc}
 8007880:	4603      	mov	r3, r0
 8007882:	e7f7      	b.n	8007874 <__any_on+0x26>
 8007884:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007888:	2900      	cmp	r1, #0
 800788a:	d0f5      	beq.n	8007878 <__any_on+0x2a>
 800788c:	2001      	movs	r0, #1
 800788e:	e7f6      	b.n	800787e <__any_on+0x30>

08007890 <_calloc_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	fb02 f401 	mul.w	r4, r2, r1
 8007896:	4621      	mov	r1, r4
 8007898:	f000 f854 	bl	8007944 <_malloc_r>
 800789c:	4605      	mov	r5, r0
 800789e:	b118      	cbz	r0, 80078a8 <_calloc_r+0x18>
 80078a0:	4622      	mov	r2, r4
 80078a2:	2100      	movs	r1, #0
 80078a4:	f7fc fd2c 	bl	8004300 <memset>
 80078a8:	4628      	mov	r0, r5
 80078aa:	bd38      	pop	{r3, r4, r5, pc}

080078ac <_free_r>:
 80078ac:	b538      	push	{r3, r4, r5, lr}
 80078ae:	4605      	mov	r5, r0
 80078b0:	2900      	cmp	r1, #0
 80078b2:	d043      	beq.n	800793c <_free_r+0x90>
 80078b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b8:	1f0c      	subs	r4, r1, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfb8      	it	lt
 80078be:	18e4      	addlt	r4, r4, r3
 80078c0:	f000 fa34 	bl	8007d2c <__malloc_lock>
 80078c4:	4a1e      	ldr	r2, [pc, #120]	; (8007940 <_free_r+0x94>)
 80078c6:	6813      	ldr	r3, [r2, #0]
 80078c8:	4610      	mov	r0, r2
 80078ca:	b933      	cbnz	r3, 80078da <_free_r+0x2e>
 80078cc:	6063      	str	r3, [r4, #4]
 80078ce:	6014      	str	r4, [r2, #0]
 80078d0:	4628      	mov	r0, r5
 80078d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078d6:	f000 ba2a 	b.w	8007d2e <__malloc_unlock>
 80078da:	42a3      	cmp	r3, r4
 80078dc:	d90b      	bls.n	80078f6 <_free_r+0x4a>
 80078de:	6821      	ldr	r1, [r4, #0]
 80078e0:	1862      	adds	r2, r4, r1
 80078e2:	4293      	cmp	r3, r2
 80078e4:	bf01      	itttt	eq
 80078e6:	681a      	ldreq	r2, [r3, #0]
 80078e8:	685b      	ldreq	r3, [r3, #4]
 80078ea:	1852      	addeq	r2, r2, r1
 80078ec:	6022      	streq	r2, [r4, #0]
 80078ee:	6063      	str	r3, [r4, #4]
 80078f0:	6004      	str	r4, [r0, #0]
 80078f2:	e7ed      	b.n	80078d0 <_free_r+0x24>
 80078f4:	4613      	mov	r3, r2
 80078f6:	685a      	ldr	r2, [r3, #4]
 80078f8:	b10a      	cbz	r2, 80078fe <_free_r+0x52>
 80078fa:	42a2      	cmp	r2, r4
 80078fc:	d9fa      	bls.n	80078f4 <_free_r+0x48>
 80078fe:	6819      	ldr	r1, [r3, #0]
 8007900:	1858      	adds	r0, r3, r1
 8007902:	42a0      	cmp	r0, r4
 8007904:	d10b      	bne.n	800791e <_free_r+0x72>
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	4401      	add	r1, r0
 800790a:	1858      	adds	r0, r3, r1
 800790c:	4282      	cmp	r2, r0
 800790e:	6019      	str	r1, [r3, #0]
 8007910:	d1de      	bne.n	80078d0 <_free_r+0x24>
 8007912:	6810      	ldr	r0, [r2, #0]
 8007914:	6852      	ldr	r2, [r2, #4]
 8007916:	4401      	add	r1, r0
 8007918:	6019      	str	r1, [r3, #0]
 800791a:	605a      	str	r2, [r3, #4]
 800791c:	e7d8      	b.n	80078d0 <_free_r+0x24>
 800791e:	d902      	bls.n	8007926 <_free_r+0x7a>
 8007920:	230c      	movs	r3, #12
 8007922:	602b      	str	r3, [r5, #0]
 8007924:	e7d4      	b.n	80078d0 <_free_r+0x24>
 8007926:	6820      	ldr	r0, [r4, #0]
 8007928:	1821      	adds	r1, r4, r0
 800792a:	428a      	cmp	r2, r1
 800792c:	bf01      	itttt	eq
 800792e:	6811      	ldreq	r1, [r2, #0]
 8007930:	6852      	ldreq	r2, [r2, #4]
 8007932:	1809      	addeq	r1, r1, r0
 8007934:	6021      	streq	r1, [r4, #0]
 8007936:	6062      	str	r2, [r4, #4]
 8007938:	605c      	str	r4, [r3, #4]
 800793a:	e7c9      	b.n	80078d0 <_free_r+0x24>
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	20000200 	.word	0x20000200

08007944 <_malloc_r>:
 8007944:	b570      	push	{r4, r5, r6, lr}
 8007946:	1ccd      	adds	r5, r1, #3
 8007948:	f025 0503 	bic.w	r5, r5, #3
 800794c:	3508      	adds	r5, #8
 800794e:	2d0c      	cmp	r5, #12
 8007950:	bf38      	it	cc
 8007952:	250c      	movcc	r5, #12
 8007954:	2d00      	cmp	r5, #0
 8007956:	4606      	mov	r6, r0
 8007958:	db01      	blt.n	800795e <_malloc_r+0x1a>
 800795a:	42a9      	cmp	r1, r5
 800795c:	d903      	bls.n	8007966 <_malloc_r+0x22>
 800795e:	230c      	movs	r3, #12
 8007960:	6033      	str	r3, [r6, #0]
 8007962:	2000      	movs	r0, #0
 8007964:	bd70      	pop	{r4, r5, r6, pc}
 8007966:	f000 f9e1 	bl	8007d2c <__malloc_lock>
 800796a:	4a21      	ldr	r2, [pc, #132]	; (80079f0 <_malloc_r+0xac>)
 800796c:	6814      	ldr	r4, [r2, #0]
 800796e:	4621      	mov	r1, r4
 8007970:	b991      	cbnz	r1, 8007998 <_malloc_r+0x54>
 8007972:	4c20      	ldr	r4, [pc, #128]	; (80079f4 <_malloc_r+0xb0>)
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	b91b      	cbnz	r3, 8007980 <_malloc_r+0x3c>
 8007978:	4630      	mov	r0, r6
 800797a:	f000 f98f 	bl	8007c9c <_sbrk_r>
 800797e:	6020      	str	r0, [r4, #0]
 8007980:	4629      	mov	r1, r5
 8007982:	4630      	mov	r0, r6
 8007984:	f000 f98a 	bl	8007c9c <_sbrk_r>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d124      	bne.n	80079d6 <_malloc_r+0x92>
 800798c:	230c      	movs	r3, #12
 800798e:	4630      	mov	r0, r6
 8007990:	6033      	str	r3, [r6, #0]
 8007992:	f000 f9cc 	bl	8007d2e <__malloc_unlock>
 8007996:	e7e4      	b.n	8007962 <_malloc_r+0x1e>
 8007998:	680b      	ldr	r3, [r1, #0]
 800799a:	1b5b      	subs	r3, r3, r5
 800799c:	d418      	bmi.n	80079d0 <_malloc_r+0x8c>
 800799e:	2b0b      	cmp	r3, #11
 80079a0:	d90f      	bls.n	80079c2 <_malloc_r+0x7e>
 80079a2:	600b      	str	r3, [r1, #0]
 80079a4:	18cc      	adds	r4, r1, r3
 80079a6:	50cd      	str	r5, [r1, r3]
 80079a8:	4630      	mov	r0, r6
 80079aa:	f000 f9c0 	bl	8007d2e <__malloc_unlock>
 80079ae:	f104 000b 	add.w	r0, r4, #11
 80079b2:	1d23      	adds	r3, r4, #4
 80079b4:	f020 0007 	bic.w	r0, r0, #7
 80079b8:	1ac3      	subs	r3, r0, r3
 80079ba:	d0d3      	beq.n	8007964 <_malloc_r+0x20>
 80079bc:	425a      	negs	r2, r3
 80079be:	50e2      	str	r2, [r4, r3]
 80079c0:	e7d0      	b.n	8007964 <_malloc_r+0x20>
 80079c2:	684b      	ldr	r3, [r1, #4]
 80079c4:	428c      	cmp	r4, r1
 80079c6:	bf16      	itet	ne
 80079c8:	6063      	strne	r3, [r4, #4]
 80079ca:	6013      	streq	r3, [r2, #0]
 80079cc:	460c      	movne	r4, r1
 80079ce:	e7eb      	b.n	80079a8 <_malloc_r+0x64>
 80079d0:	460c      	mov	r4, r1
 80079d2:	6849      	ldr	r1, [r1, #4]
 80079d4:	e7cc      	b.n	8007970 <_malloc_r+0x2c>
 80079d6:	1cc4      	adds	r4, r0, #3
 80079d8:	f024 0403 	bic.w	r4, r4, #3
 80079dc:	42a0      	cmp	r0, r4
 80079de:	d005      	beq.n	80079ec <_malloc_r+0xa8>
 80079e0:	1a21      	subs	r1, r4, r0
 80079e2:	4630      	mov	r0, r6
 80079e4:	f000 f95a 	bl	8007c9c <_sbrk_r>
 80079e8:	3001      	adds	r0, #1
 80079ea:	d0cf      	beq.n	800798c <_malloc_r+0x48>
 80079ec:	6025      	str	r5, [r4, #0]
 80079ee:	e7db      	b.n	80079a8 <_malloc_r+0x64>
 80079f0:	20000200 	.word	0x20000200
 80079f4:	20000204 	.word	0x20000204

080079f8 <__ssputs_r>:
 80079f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079fc:	688e      	ldr	r6, [r1, #8]
 80079fe:	4682      	mov	sl, r0
 8007a00:	429e      	cmp	r6, r3
 8007a02:	460c      	mov	r4, r1
 8007a04:	4690      	mov	r8, r2
 8007a06:	4699      	mov	r9, r3
 8007a08:	d837      	bhi.n	8007a7a <__ssputs_r+0x82>
 8007a0a:	898a      	ldrh	r2, [r1, #12]
 8007a0c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007a10:	d031      	beq.n	8007a76 <__ssputs_r+0x7e>
 8007a12:	2302      	movs	r3, #2
 8007a14:	6825      	ldr	r5, [r4, #0]
 8007a16:	6909      	ldr	r1, [r1, #16]
 8007a18:	1a6f      	subs	r7, r5, r1
 8007a1a:	6965      	ldr	r5, [r4, #20]
 8007a1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a20:	fb95 f5f3 	sdiv	r5, r5, r3
 8007a24:	f109 0301 	add.w	r3, r9, #1
 8007a28:	443b      	add	r3, r7
 8007a2a:	429d      	cmp	r5, r3
 8007a2c:	bf38      	it	cc
 8007a2e:	461d      	movcc	r5, r3
 8007a30:	0553      	lsls	r3, r2, #21
 8007a32:	d530      	bpl.n	8007a96 <__ssputs_r+0x9e>
 8007a34:	4629      	mov	r1, r5
 8007a36:	f7ff ff85 	bl	8007944 <_malloc_r>
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	b950      	cbnz	r0, 8007a54 <__ssputs_r+0x5c>
 8007a3e:	230c      	movs	r3, #12
 8007a40:	f04f 30ff 	mov.w	r0, #4294967295
 8007a44:	f8ca 3000 	str.w	r3, [sl]
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a54:	463a      	mov	r2, r7
 8007a56:	6921      	ldr	r1, [r4, #16]
 8007a58:	f7ff fb16 	bl	8007088 <memcpy>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	6126      	str	r6, [r4, #16]
 8007a6a:	443e      	add	r6, r7
 8007a6c:	6026      	str	r6, [r4, #0]
 8007a6e:	464e      	mov	r6, r9
 8007a70:	6165      	str	r5, [r4, #20]
 8007a72:	1bed      	subs	r5, r5, r7
 8007a74:	60a5      	str	r5, [r4, #8]
 8007a76:	454e      	cmp	r6, r9
 8007a78:	d900      	bls.n	8007a7c <__ssputs_r+0x84>
 8007a7a:	464e      	mov	r6, r9
 8007a7c:	4632      	mov	r2, r6
 8007a7e:	4641      	mov	r1, r8
 8007a80:	6820      	ldr	r0, [r4, #0]
 8007a82:	f000 f93a 	bl	8007cfa <memmove>
 8007a86:	68a3      	ldr	r3, [r4, #8]
 8007a88:	2000      	movs	r0, #0
 8007a8a:	1b9b      	subs	r3, r3, r6
 8007a8c:	60a3      	str	r3, [r4, #8]
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	441e      	add	r6, r3
 8007a92:	6026      	str	r6, [r4, #0]
 8007a94:	e7dc      	b.n	8007a50 <__ssputs_r+0x58>
 8007a96:	462a      	mov	r2, r5
 8007a98:	f000 f94a 	bl	8007d30 <_realloc_r>
 8007a9c:	4606      	mov	r6, r0
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d1e2      	bne.n	8007a68 <__ssputs_r+0x70>
 8007aa2:	6921      	ldr	r1, [r4, #16]
 8007aa4:	4650      	mov	r0, sl
 8007aa6:	f7ff ff01 	bl	80078ac <_free_r>
 8007aaa:	e7c8      	b.n	8007a3e <__ssputs_r+0x46>

08007aac <_svfiprintf_r>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	461d      	mov	r5, r3
 8007ab2:	898b      	ldrh	r3, [r1, #12]
 8007ab4:	b09d      	sub	sp, #116	; 0x74
 8007ab6:	061f      	lsls	r7, r3, #24
 8007ab8:	4680      	mov	r8, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	4616      	mov	r6, r2
 8007abe:	d50f      	bpl.n	8007ae0 <_svfiprintf_r+0x34>
 8007ac0:	690b      	ldr	r3, [r1, #16]
 8007ac2:	b96b      	cbnz	r3, 8007ae0 <_svfiprintf_r+0x34>
 8007ac4:	2140      	movs	r1, #64	; 0x40
 8007ac6:	f7ff ff3d 	bl	8007944 <_malloc_r>
 8007aca:	6020      	str	r0, [r4, #0]
 8007acc:	6120      	str	r0, [r4, #16]
 8007ace:	b928      	cbnz	r0, 8007adc <_svfiprintf_r+0x30>
 8007ad0:	230c      	movs	r3, #12
 8007ad2:	f8c8 3000 	str.w	r3, [r8]
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	e0c8      	b.n	8007c6e <_svfiprintf_r+0x1c2>
 8007adc:	2340      	movs	r3, #64	; 0x40
 8007ade:	6163      	str	r3, [r4, #20]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ae4:	2320      	movs	r3, #32
 8007ae6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007aea:	2330      	movs	r3, #48	; 0x30
 8007aec:	f04f 0b01 	mov.w	fp, #1
 8007af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007af4:	9503      	str	r5, [sp, #12]
 8007af6:	4637      	mov	r7, r6
 8007af8:	463d      	mov	r5, r7
 8007afa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007afe:	b10b      	cbz	r3, 8007b04 <_svfiprintf_r+0x58>
 8007b00:	2b25      	cmp	r3, #37	; 0x25
 8007b02:	d13e      	bne.n	8007b82 <_svfiprintf_r+0xd6>
 8007b04:	ebb7 0a06 	subs.w	sl, r7, r6
 8007b08:	d00b      	beq.n	8007b22 <_svfiprintf_r+0x76>
 8007b0a:	4653      	mov	r3, sl
 8007b0c:	4632      	mov	r2, r6
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4640      	mov	r0, r8
 8007b12:	f7ff ff71 	bl	80079f8 <__ssputs_r>
 8007b16:	3001      	adds	r0, #1
 8007b18:	f000 80a4 	beq.w	8007c64 <_svfiprintf_r+0x1b8>
 8007b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b1e:	4453      	add	r3, sl
 8007b20:	9309      	str	r3, [sp, #36]	; 0x24
 8007b22:	783b      	ldrb	r3, [r7, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f000 809d 	beq.w	8007c64 <_svfiprintf_r+0x1b8>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b34:	9304      	str	r3, [sp, #16]
 8007b36:	9307      	str	r3, [sp, #28]
 8007b38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b3c:	931a      	str	r3, [sp, #104]	; 0x68
 8007b3e:	462f      	mov	r7, r5
 8007b40:	2205      	movs	r2, #5
 8007b42:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007b46:	4850      	ldr	r0, [pc, #320]	; (8007c88 <_svfiprintf_r+0x1dc>)
 8007b48:	f7ff fa90 	bl	800706c <memchr>
 8007b4c:	9b04      	ldr	r3, [sp, #16]
 8007b4e:	b9d0      	cbnz	r0, 8007b86 <_svfiprintf_r+0xda>
 8007b50:	06d9      	lsls	r1, r3, #27
 8007b52:	bf44      	itt	mi
 8007b54:	2220      	movmi	r2, #32
 8007b56:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b5a:	071a      	lsls	r2, r3, #28
 8007b5c:	bf44      	itt	mi
 8007b5e:	222b      	movmi	r2, #43	; 0x2b
 8007b60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b64:	782a      	ldrb	r2, [r5, #0]
 8007b66:	2a2a      	cmp	r2, #42	; 0x2a
 8007b68:	d015      	beq.n	8007b96 <_svfiprintf_r+0xea>
 8007b6a:	462f      	mov	r7, r5
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	250a      	movs	r5, #10
 8007b70:	9a07      	ldr	r2, [sp, #28]
 8007b72:	4639      	mov	r1, r7
 8007b74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b78:	3b30      	subs	r3, #48	; 0x30
 8007b7a:	2b09      	cmp	r3, #9
 8007b7c:	d94d      	bls.n	8007c1a <_svfiprintf_r+0x16e>
 8007b7e:	b1b8      	cbz	r0, 8007bb0 <_svfiprintf_r+0x104>
 8007b80:	e00f      	b.n	8007ba2 <_svfiprintf_r+0xf6>
 8007b82:	462f      	mov	r7, r5
 8007b84:	e7b8      	b.n	8007af8 <_svfiprintf_r+0x4c>
 8007b86:	4a40      	ldr	r2, [pc, #256]	; (8007c88 <_svfiprintf_r+0x1dc>)
 8007b88:	463d      	mov	r5, r7
 8007b8a:	1a80      	subs	r0, r0, r2
 8007b8c:	fa0b f000 	lsl.w	r0, fp, r0
 8007b90:	4318      	orrs	r0, r3
 8007b92:	9004      	str	r0, [sp, #16]
 8007b94:	e7d3      	b.n	8007b3e <_svfiprintf_r+0x92>
 8007b96:	9a03      	ldr	r2, [sp, #12]
 8007b98:	1d11      	adds	r1, r2, #4
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	9103      	str	r1, [sp, #12]
 8007b9e:	2a00      	cmp	r2, #0
 8007ba0:	db01      	blt.n	8007ba6 <_svfiprintf_r+0xfa>
 8007ba2:	9207      	str	r2, [sp, #28]
 8007ba4:	e004      	b.n	8007bb0 <_svfiprintf_r+0x104>
 8007ba6:	4252      	negs	r2, r2
 8007ba8:	f043 0302 	orr.w	r3, r3, #2
 8007bac:	9207      	str	r2, [sp, #28]
 8007bae:	9304      	str	r3, [sp, #16]
 8007bb0:	783b      	ldrb	r3, [r7, #0]
 8007bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8007bb4:	d10c      	bne.n	8007bd0 <_svfiprintf_r+0x124>
 8007bb6:	787b      	ldrb	r3, [r7, #1]
 8007bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8007bba:	d133      	bne.n	8007c24 <_svfiprintf_r+0x178>
 8007bbc:	9b03      	ldr	r3, [sp, #12]
 8007bbe:	3702      	adds	r7, #2
 8007bc0:	1d1a      	adds	r2, r3, #4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	9203      	str	r2, [sp, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfb8      	it	lt
 8007bca:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bce:	9305      	str	r3, [sp, #20]
 8007bd0:	4d2e      	ldr	r5, [pc, #184]	; (8007c8c <_svfiprintf_r+0x1e0>)
 8007bd2:	2203      	movs	r2, #3
 8007bd4:	7839      	ldrb	r1, [r7, #0]
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	f7ff fa48 	bl	800706c <memchr>
 8007bdc:	b138      	cbz	r0, 8007bee <_svfiprintf_r+0x142>
 8007bde:	2340      	movs	r3, #64	; 0x40
 8007be0:	1b40      	subs	r0, r0, r5
 8007be2:	fa03 f000 	lsl.w	r0, r3, r0
 8007be6:	9b04      	ldr	r3, [sp, #16]
 8007be8:	3701      	adds	r7, #1
 8007bea:	4303      	orrs	r3, r0
 8007bec:	9304      	str	r3, [sp, #16]
 8007bee:	7839      	ldrb	r1, [r7, #0]
 8007bf0:	2206      	movs	r2, #6
 8007bf2:	4827      	ldr	r0, [pc, #156]	; (8007c90 <_svfiprintf_r+0x1e4>)
 8007bf4:	1c7e      	adds	r6, r7, #1
 8007bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007bfa:	f7ff fa37 	bl	800706c <memchr>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d038      	beq.n	8007c74 <_svfiprintf_r+0x1c8>
 8007c02:	4b24      	ldr	r3, [pc, #144]	; (8007c94 <_svfiprintf_r+0x1e8>)
 8007c04:	bb13      	cbnz	r3, 8007c4c <_svfiprintf_r+0x1a0>
 8007c06:	9b03      	ldr	r3, [sp, #12]
 8007c08:	3307      	adds	r3, #7
 8007c0a:	f023 0307 	bic.w	r3, r3, #7
 8007c0e:	3308      	adds	r3, #8
 8007c10:	9303      	str	r3, [sp, #12]
 8007c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c14:	444b      	add	r3, r9
 8007c16:	9309      	str	r3, [sp, #36]	; 0x24
 8007c18:	e76d      	b.n	8007af6 <_svfiprintf_r+0x4a>
 8007c1a:	fb05 3202 	mla	r2, r5, r2, r3
 8007c1e:	2001      	movs	r0, #1
 8007c20:	460f      	mov	r7, r1
 8007c22:	e7a6      	b.n	8007b72 <_svfiprintf_r+0xc6>
 8007c24:	2300      	movs	r3, #0
 8007c26:	250a      	movs	r5, #10
 8007c28:	4619      	mov	r1, r3
 8007c2a:	3701      	adds	r7, #1
 8007c2c:	9305      	str	r3, [sp, #20]
 8007c2e:	4638      	mov	r0, r7
 8007c30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c34:	3a30      	subs	r2, #48	; 0x30
 8007c36:	2a09      	cmp	r2, #9
 8007c38:	d903      	bls.n	8007c42 <_svfiprintf_r+0x196>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0c8      	beq.n	8007bd0 <_svfiprintf_r+0x124>
 8007c3e:	9105      	str	r1, [sp, #20]
 8007c40:	e7c6      	b.n	8007bd0 <_svfiprintf_r+0x124>
 8007c42:	fb05 2101 	mla	r1, r5, r1, r2
 8007c46:	2301      	movs	r3, #1
 8007c48:	4607      	mov	r7, r0
 8007c4a:	e7f0      	b.n	8007c2e <_svfiprintf_r+0x182>
 8007c4c:	ab03      	add	r3, sp, #12
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	4622      	mov	r2, r4
 8007c52:	4b11      	ldr	r3, [pc, #68]	; (8007c98 <_svfiprintf_r+0x1ec>)
 8007c54:	a904      	add	r1, sp, #16
 8007c56:	4640      	mov	r0, r8
 8007c58:	f7fc fbec 	bl	8004434 <_printf_float>
 8007c5c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c60:	4681      	mov	r9, r0
 8007c62:	d1d6      	bne.n	8007c12 <_svfiprintf_r+0x166>
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	065b      	lsls	r3, r3, #25
 8007c68:	f53f af35 	bmi.w	8007ad6 <_svfiprintf_r+0x2a>
 8007c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c6e:	b01d      	add	sp, #116	; 0x74
 8007c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c74:	ab03      	add	r3, sp, #12
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	4622      	mov	r2, r4
 8007c7a:	4b07      	ldr	r3, [pc, #28]	; (8007c98 <_svfiprintf_r+0x1ec>)
 8007c7c:	a904      	add	r1, sp, #16
 8007c7e:	4640      	mov	r0, r8
 8007c80:	f7fc fe84 	bl	800498c <_printf_i>
 8007c84:	e7ea      	b.n	8007c5c <_svfiprintf_r+0x1b0>
 8007c86:	bf00      	nop
 8007c88:	08008024 	.word	0x08008024
 8007c8c:	0800802a 	.word	0x0800802a
 8007c90:	0800802e 	.word	0x0800802e
 8007c94:	08004435 	.word	0x08004435
 8007c98:	080079f9 	.word	0x080079f9

08007c9c <_sbrk_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4c05      	ldr	r4, [pc, #20]	; (8007cb8 <_sbrk_r+0x1c>)
 8007ca2:	4605      	mov	r5, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	6023      	str	r3, [r4, #0]
 8007ca8:	f7fc fa7a 	bl	80041a0 <_sbrk>
 8007cac:	1c43      	adds	r3, r0, #1
 8007cae:	d102      	bne.n	8007cb6 <_sbrk_r+0x1a>
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	b103      	cbz	r3, 8007cb6 <_sbrk_r+0x1a>
 8007cb4:	602b      	str	r3, [r5, #0]
 8007cb6:	bd38      	pop	{r3, r4, r5, pc}
 8007cb8:	200002b8 	.word	0x200002b8

08007cbc <strncmp>:
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	b16a      	cbz	r2, 8007cdc <strncmp+0x20>
 8007cc0:	3901      	subs	r1, #1
 8007cc2:	1884      	adds	r4, r0, r2
 8007cc4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007cc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d103      	bne.n	8007cd8 <strncmp+0x1c>
 8007cd0:	42a0      	cmp	r0, r4
 8007cd2:	d001      	beq.n	8007cd8 <strncmp+0x1c>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1f5      	bne.n	8007cc4 <strncmp+0x8>
 8007cd8:	1a98      	subs	r0, r3, r2
 8007cda:	bd10      	pop	{r4, pc}
 8007cdc:	4610      	mov	r0, r2
 8007cde:	e7fc      	b.n	8007cda <strncmp+0x1e>

08007ce0 <__ascii_wctomb>:
 8007ce0:	b149      	cbz	r1, 8007cf6 <__ascii_wctomb+0x16>
 8007ce2:	2aff      	cmp	r2, #255	; 0xff
 8007ce4:	bf8b      	itete	hi
 8007ce6:	238a      	movhi	r3, #138	; 0x8a
 8007ce8:	700a      	strbls	r2, [r1, #0]
 8007cea:	6003      	strhi	r3, [r0, #0]
 8007cec:	2001      	movls	r0, #1
 8007cee:	bf88      	it	hi
 8007cf0:	f04f 30ff 	movhi.w	r0, #4294967295
 8007cf4:	4770      	bx	lr
 8007cf6:	4608      	mov	r0, r1
 8007cf8:	4770      	bx	lr

08007cfa <memmove>:
 8007cfa:	4288      	cmp	r0, r1
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	eb01 0302 	add.w	r3, r1, r2
 8007d02:	d807      	bhi.n	8007d14 <memmove+0x1a>
 8007d04:	1e42      	subs	r2, r0, #1
 8007d06:	4299      	cmp	r1, r3
 8007d08:	d00a      	beq.n	8007d20 <memmove+0x26>
 8007d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007d12:	e7f8      	b.n	8007d06 <memmove+0xc>
 8007d14:	4283      	cmp	r3, r0
 8007d16:	d9f5      	bls.n	8007d04 <memmove+0xa>
 8007d18:	1881      	adds	r1, r0, r2
 8007d1a:	1ad2      	subs	r2, r2, r3
 8007d1c:	42d3      	cmn	r3, r2
 8007d1e:	d100      	bne.n	8007d22 <memmove+0x28>
 8007d20:	bd10      	pop	{r4, pc}
 8007d22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007d26:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007d2a:	e7f7      	b.n	8007d1c <memmove+0x22>

08007d2c <__malloc_lock>:
 8007d2c:	4770      	bx	lr

08007d2e <__malloc_unlock>:
 8007d2e:	4770      	bx	lr

08007d30 <_realloc_r>:
 8007d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d32:	4607      	mov	r7, r0
 8007d34:	4614      	mov	r4, r2
 8007d36:	460e      	mov	r6, r1
 8007d38:	b921      	cbnz	r1, 8007d44 <_realloc_r+0x14>
 8007d3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d3e:	4611      	mov	r1, r2
 8007d40:	f7ff be00 	b.w	8007944 <_malloc_r>
 8007d44:	b922      	cbnz	r2, 8007d50 <_realloc_r+0x20>
 8007d46:	f7ff fdb1 	bl	80078ac <_free_r>
 8007d4a:	4625      	mov	r5, r4
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d50:	f000 f814 	bl	8007d7c <_malloc_usable_size_r>
 8007d54:	42a0      	cmp	r0, r4
 8007d56:	d20f      	bcs.n	8007d78 <_realloc_r+0x48>
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4638      	mov	r0, r7
 8007d5c:	f7ff fdf2 	bl	8007944 <_malloc_r>
 8007d60:	4605      	mov	r5, r0
 8007d62:	2800      	cmp	r0, #0
 8007d64:	d0f2      	beq.n	8007d4c <_realloc_r+0x1c>
 8007d66:	4631      	mov	r1, r6
 8007d68:	4622      	mov	r2, r4
 8007d6a:	f7ff f98d 	bl	8007088 <memcpy>
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4638      	mov	r0, r7
 8007d72:	f7ff fd9b 	bl	80078ac <_free_r>
 8007d76:	e7e9      	b.n	8007d4c <_realloc_r+0x1c>
 8007d78:	4635      	mov	r5, r6
 8007d7a:	e7e7      	b.n	8007d4c <_realloc_r+0x1c>

08007d7c <_malloc_usable_size_r>:
 8007d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d80:	1f18      	subs	r0, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	bfbc      	itt	lt
 8007d86:	580b      	ldrlt	r3, [r1, r0]
 8007d88:	18c0      	addlt	r0, r0, r3
 8007d8a:	4770      	bx	lr

08007d8c <_init>:
 8007d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d8e:	bf00      	nop
 8007d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d92:	bc08      	pop	{r3}
 8007d94:	469e      	mov	lr, r3
 8007d96:	4770      	bx	lr

08007d98 <_fini>:
 8007d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9a:	bf00      	nop
 8007d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d9e:	bc08      	pop	{r3}
 8007da0:	469e      	mov	lr, r3
 8007da2:	4770      	bx	lr
